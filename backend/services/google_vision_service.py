"""
Google Vision –∏ Gemini Service –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞
"""
import os
import base64
import logging
from typing import Dict, Any, List, Optional
from PIL import Image
import io
import json
import google.generativeai as genai
from google.cloud import vision

logger = logging.getLogger(__name__)

class GoogleVisionService:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Cloud Vision
        self.vision_client = None
        self.credentials_path = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
        self.gemini_api_key = os.getenv('GOOGLE_API_KEY')
        self.gemini_model = os.getenv('GEMINI_MODEL', 'gemini-2.0-flash')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
        if self.gemini_api_key:
            genai.configure(api_key=self.gemini_api_key)
            self.model = genai.GenerativeModel(self.gemini_model)
            logger.info(f"ü§ñ Gemini initialized with model: {self.gemini_model}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            from .archive_photo_service import ArchivePhotoService
            self.archive_service = ArchivePhotoService()
            logger.info("üèõÔ∏è Archive service integrated into Google Vision")
        except Exception as e:
            logger.warning(f"Archive service not available in Google Vision: {e}")
            self.archive_service = None
        else:
            logger.warning("GOOGLE_API_KEY not found in environment variables")
            self.model = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Cloud Vision
        if self.credentials_path and os.path.exists(self.credentials_path):
            try:
                self.vision_client = vision.ImageAnnotatorClient()
                logger.info("üîç Google Cloud Vision initialized")
            except Exception as e:
                logger.warning(f"Google Cloud Vision initialization failed: {e}")
        else:
            logger.warning("Google Cloud Vision credentials not found")
    
    def _prepare_image(self, image_path: str) -> tuple:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            with Image.open(image_path) as img:
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                img.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ RGB –¥–ª—è JPEG
                if img.mode in ('RGBA', 'LA', 'P'):
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    if img.mode == 'P':
                        img = img.convert('RGBA')
                    background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
                    img = background
                elif img.mode not in ('RGB', 'L'):
                    img = img.convert('RGB')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
                buffer = io.BytesIO()
                img.save(buffer, format='JPEG', quality=85)
                buffer.seek(0)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
                image_data = buffer.getvalue()
                image_base64 = base64.b64encode(image_data).decode('utf-8')
                
                return image_data, image_base64
        except Exception as e:
            logger.error(f"Error preparing image: {e}")
            raise
    
    def analyze_image_with_gemini(self, image_path: str, prompt: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini"""
        if not self.model:
            return {'success': False, 'error': 'Gemini API not configured'}
        
        try:
            image_data, _ = self._prepare_image(image_path)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Gemini
            image_part = {
                "mime_type": "image/jpeg",
                "data": image_data
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            response = self.model.generate_content([prompt, image_part])
            
            if response.text:
                return {
                    'success': True,
                    'source': 'gemini',
                    'analysis': response.text,
                    'model': self.gemini_model
                }
            else:
                return {'success': False, 'error': 'No response from Gemini'}
                
        except Exception as e:
            logger.error(f"Gemini API error: {e}")
            return {'success': False, 'error': f'Gemini analysis failed: {str(e)}'}
    
    def extract_text_with_vision(self, image_path: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Google Cloud Vision OCR"""
        if not self.vision_client:
            return {'success': False, 'error': 'Google Cloud Vision not configured'}
        
        try:
            image_data, _ = self._prepare_image(image_path)
            image = vision.Image(content=image_data)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º OCR
            response = self.vision_client.text_detection(image=image)
            texts = response.text_annotations
            
            if texts:
                full_text = texts[0].description
                text_blocks = []
                
                for text in texts[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç)
                    vertices = [(vertex.x, vertex.y) for vertex in text.bounding_poly.vertices]
                    text_blocks.append({
                        'text': text.description,
                        'confidence': getattr(text, 'confidence', 0.9),
                        'bounding_box': vertices
                    })
                
                return {
                    'success': True,
                    'source': 'google_vision',
                    'full_text': full_text,
                    'text_blocks': text_blocks
                }
            else:
                return {
                    'success': True,
                    'source': 'google_vision',
                    'full_text': '',
                    'text_blocks': []
                }
                
        except Exception as e:
            logger.error(f"Google Vision OCR error: {e}")
            return {'success': False, 'error': f'OCR failed: {str(e)}'}
    
    def analyze_image(self, image_path: str, prompt: str = None) -> Dict[str, Any]:
        """
        –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        default_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏:
1. –¢–∏–ø –∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
3. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
4. –í–∏–¥–∏–º—ã–µ –∞–¥—Ä–µ—Å–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤
5. –û–∫—Ä—É–∂–∞—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
6. –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∂–∏–ª–æ–≥–æ —Ñ–æ–Ω–¥–∞

–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
        
        analysis_prompt = prompt or default_prompt
        return self.analyze_image_with_gemini(image_path, analysis_prompt)
    
    def detect_violations(self, image_path: str) -> Dict[str, Any]:
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é Gemini
        """
        violation_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∂–∏–ª–æ–≥–æ —Ñ–æ–Ω–¥–∞:

1. –ù–ï–ó–ê–ö–û–ù–ù–´–ï –ü–†–ò–°–¢–†–û–ô–ö–ò:
   - –°–∞–º–æ–≤–æ–ª—å–Ω—ã–µ –ø—Ä–∏—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–¥–∞–Ω–∏—è–º
   - –ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –±–∞–ª–∫–æ–Ω—ã, —Ç–µ—Ä—Ä–∞—Å—ã
   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

2. –ù–ê–†–£–®–ï–ù–ò–Ø –§–ê–°–ê–î–û–í:
   - –ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤—ã–≤–µ—Å–∫–∏
   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –æ–±–ª–∏–∫–∞
   - –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã

3. –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–ï–†–†–ò–¢–û–†–ò–ò:
   - –ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞
   - –°–∫–ª–∞–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   - –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

4. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:
   - –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
   - –ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "violations_detected": true/false,
  "violations": [
    {
      "type": "—Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è",
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
      "severity": "low/medium/high",
      "confidence": 0.0-100.0
    }
  ],
  "building_analysis": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–¥–∞–Ω–∏—è",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
}"""
        
        try:
            result = self.analyze_image_with_gemini(image_path, violation_prompt)
            logger.info(f"ü§ñ Gemini raw result: {result}")
            
            if result.get('success') and result.get('analysis'):
                analysis_text = result['analysis']
                logger.info(f"ü§ñ Gemini analysis text: {analysis_text}")
                
                # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                import re
                json_match = re.search(r'\{.*\}', analysis_text, re.DOTALL)
                if json_match:
                    try:
                        parsed_data = json.loads(json_match.group())
                        logger.info(f"ü§ñ Gemini parsed JSON: {parsed_data}")
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        violations = []
                        if parsed_data.get('violations_detected') and parsed_data.get('violations'):
                            for v in parsed_data['violations']:
                                violations.append({
                                    'type': v.get('type', 'unknown'),
                                    'description': v.get('description', ''),
                                    'severity': v.get('severity', 'medium'),
                                    'confidence': float(v.get('confidence', 0.0)),
                                    'source': 'gemini'
                                })
                        
                        logger.info(f"ü§ñ Gemini - Found {len(violations)} violations")
                        
                        return {
                            'success': True,
                            'violations': violations,
                            'building_analysis': parsed_data.get('building_analysis', ''),
                            'recommendations': parsed_data.get('recommendations', []),
                            'source': 'gemini'
                        }
                    except json.JSONDecodeError as e:
                        logger.error(f"ü§ñ Gemini JSON parse error: {e}")
                        # Fallback - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        return {
                            'success': True,
                            'violations': [{
                                'type': 'general_analysis',
                                'description': analysis_text[:200] + '...',
                                'severity': 'medium',
                                'confidence': 0.7,
                                'source': 'gemini'
                            }],
                            'building_analysis': analysis_text,
                            'recommendations': [],
                            'source': 'gemini'
                        }
                else:
                    logger.warning(f"ü§ñ Gemini: No JSON found in response")
                    return {
                        'success': True,
                        'violations': [{
                            'type': 'text_analysis',
                            'description': analysis_text[:100] + '...',
                            'severity': 'low',
                            'confidence': 0.5,
                            'source': 'gemini'
                        }],
                        'building_analysis': analysis_text,
                        'recommendations': [],
                        'source': 'gemini'
                    }
            else:
                logger.error(f"ü§ñ Gemini: Analysis failed - {result}")
                return {'success': False, 'error': 'Analysis failed'}
                
        except Exception as e:
            logger.error(f"Error in Gemini analysis: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def analyze_violations_with_archive_context(self, image_path: str, custom_prompt: str = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            custom_prompt: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        """
        try:
            result = {
                'success': True,
                'archive_context': None,
                'enhanced_analysis': None,
                'similar_buildings': []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ
            if self.archive_service:
                # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–¥–∞–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–µ
                similar_buildings = self.archive_service.find_similar_buildings(image_path, threshold=0.6)
                result['similar_buildings'] = similar_buildings
                
                if similar_buildings:
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    archive_context = self._create_archive_context(similar_buildings)
                    result['archive_context'] = archive_context
                    
                    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                    enhanced_prompt = self._create_enhanced_violation_prompt(archive_context, custom_prompt)
                    
                    # –ê–Ω–∞–ª–∏–∑ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                    enhanced_analysis = self.analyze_image_with_gemini(image_path, enhanced_prompt)
                    result['enhanced_analysis'] = enhanced_analysis
                    
                    logger.info(f"üèõÔ∏è Enhanced violation analysis with {len(similar_buildings)} archive matches")
                else:
                    # –û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    standard_analysis = self.analyze_image_with_gemini(image_path, custom_prompt or self._get_default_violation_prompt())
                    result['enhanced_analysis'] = standard_analysis
                    logger.info("üìã Standard violation analysis (no archive matches)")
            else:
                # –ê—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                standard_analysis = self.analyze_image_with_gemini(image_path, custom_prompt or self._get_default_violation_prompt())
                result['enhanced_analysis'] = standard_analysis
                logger.info("üìã Standard violation analysis (archive service unavailable)")
            
            return result
            
        except Exception as e:
            logger.error(f"Error in archive-enhanced violation analysis: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _create_archive_context(self, similar_buildings: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞."""
        try:
            context = {
                'building_types': [],
                'architectural_styles': [],
                'common_violations': [],
                'historical_info': [],
                'location_context': []
            }
            
            for building in similar_buildings[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –ø–æ—Ö–æ–∂–∏—Ö
                metadata = building.get('metadata', {})
                
                # –¢–∏–ø—ã –∑–¥–∞–Ω–∏–π
                building_type = metadata.get('building_type')
                if building_type and building_type not in context['building_types']:
                    context['building_types'].append(building_type)
                
                # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏
                arch_style = metadata.get('architectural_style')
                if arch_style and arch_style not in context['architectural_styles']:
                    context['architectural_styles'].append(arch_style)
                
                # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if metadata.get('construction_year'):
                    context['historical_info'].append({
                        'description': metadata.get('description', ''),
                        'year': metadata.get('construction_year'),
                        'address': metadata.get('address', '')
                    })
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                if metadata.get('address'):
                    context['location_context'].append(metadata['address'])
            
            return context
            
        except Exception as e:
            logger.error(f"Error creating archive context: {e}")
            return {}
    
    def _create_enhanced_violation_prompt(self, archive_context: Dict[str, Any], custom_prompt: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º."""
        try:
            base_prompt = custom_prompt or self._get_default_violation_prompt()
            
            context_info = []
            
            if archive_context.get('building_types'):
                context_info.append(f"–¢–∏–ø –∑–¥–∞–Ω–∏–π –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ: {', '.join(archive_context['building_types'])}")
            
            if archive_context.get('architectural_styles'):
                context_info.append(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏: {', '.join(archive_context['architectural_styles'])}")
            
            if archive_context.get('historical_info'):
                historical = archive_context['historical_info'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
                context_info.append(f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞: {historical.get('description', '')} ({historical.get('year', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
            
            if archive_context.get('location_context'):
                context_info.append(f"–†–∞–π–æ–Ω: {archive_context['location_context'][0]}")
            
            if context_info:
                enhanced_prompt = f"""–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ê–†–•–ò–í–ù–´–• –î–ê–ù–ù–´–•:
{chr(10).join(context_info)}

–û–°–ù–û–í–ù–û–ô –ê–ù–ê–õ–ò–ó:
{base_prompt}

–£—á–∏—Ç—ã–≤–∞–π –∞—Ä—Ö–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—ä–µ–∫—Ç–∞."""
            else:
                enhanced_prompt = base_prompt
            
            return enhanced_prompt
            
        except Exception as e:
            logger.error(f"Error creating enhanced prompt: {e}")
            return custom_prompt or self._get_default_violation_prompt()
    
    def _get_default_violation_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π."""
        return """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:

1. –ù–ê–†–£–®–ï–ù–ò–Ø –ò –ü–†–û–ë–õ–ï–ú–´:
   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞—Å–∞–¥–æ–º
   - –ù–∞—Ä—É—à–µ–Ω–∏—è –±–ª–∞–≥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π

2. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:
   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–∞–Ω–∏—è
   - –í–∏–¥–∏–º—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
   - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞

3. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ù–û–†–ú–ê–ú:
   - –ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã
   - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º."""
    
    def extract_address_info(self, image_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç OCR (Google Vision) –∏ –∞–Ω–∞–ª–∏–∑ (Gemini)
        """
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
        ocr_result = self.extract_text_with_vision(image_path)
        
        # –ó–∞—Ç–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Gemini
        address_prompt = """–ù–∞–π–¥–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –≤—Å—é –∞–¥—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

1. –ù–û–ú–ï–†–ê –î–û–ú–û–í
2. –ù–ê–ó–í–ê–ù–ò–Ø –£–õ–ò–¶
3. –í–´–í–ï–°–ö–ò –° –ê–î–†–ï–°–ê–ú–ò
4. –ü–û–ß–¢–û–í–´–ï –ò–ù–î–ï–ö–°–´
5. –ù–ê–ó–í–ê–ù–ò–Ø –†–ê–ô–û–ù–û–í/–ì–û–†–û–î–û–í
6. –û–†–ò–ï–ù–¢–ò–†–´ –ò –ù–ê–ó–í–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "address_found": true/false,
  "house_numbers": ["–Ω–æ–º–µ—Ä1", "–Ω–æ–º–µ—Ä2"],
  "street_names": ["—É–ª–∏—Ü–∞1", "—É–ª–∏—Ü–∞2"],
  "postal_codes": ["–∏–Ω–¥–µ–∫—Å1"],
  "districts": ["—Ä–∞–π–æ–Ω1"],
  "landmarks": ["–æ—Ä–∏–µ–Ω—Ç–∏—Ä1", "–æ—Ä–∏–µ–Ω—Ç–∏—Ä2"],
  "full_addresses": ["–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω"],
  "confidence": 0.0-1.0
}"""
        
        gemini_result = self.analyze_image_with_gemini(image_path, address_prompt)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        combined_result = {
            'success': True,
            'ocr_text': ocr_result.get('full_text', '') if ocr_result.get('success') else '',
            'gemini_analysis': gemini_result.get('analysis', '') if gemini_result.get('success') else '',
            'source': 'google_vision_gemini'
        }
        
        return combined_result
    
    def analyze_property_type(self, image_path: str) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é Gemini
        """
        property_prompt = """–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:

–¢–ò–ü–´ –ó–î–ê–ù–ò–ô:
- –ñ–∏–ª–æ–π –¥–æ–º (–º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π/—á–∞—Å—Ç–Ω—ã–π)
- –û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
- –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä/–º–∞–≥–∞–∑–∏–Ω
- –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
- –°–∫–ª–∞–¥—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
- –ì–∞—Ä–∞–∂/–ø–∞—Ä–∫–∏–Ω–≥
- –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (—à–∫–æ–ª–∞, –±–æ–ª—å–Ω–∏—Ü–∞)
- –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç (—Ç–µ–∞—Ç—Ä, –º—É–∑–µ–π)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "property_type": "—Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
  "building_class": "–∫–ª–∞—Å—Å –∑–¥–∞–Ω–∏—è (A/B/C/D)",
  "floors_count": —á–∏—Å–ª–æ_—ç—Ç–∞–∂–µ–π,
  "construction_period": "–ø–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
  "architectural_style": "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å",
  "condition": "—Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç–ª–∏—á–Ω–æ–µ/—Ö–æ—Ä–æ—à–µ–µ/—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ/–ø–ª–æ—Ö–æ–µ)",
  "commercial_use": true/false,
  "confidence": 0.0-1.0
}"""
        
        return self.analyze_image_with_gemini(image_path, property_prompt)
