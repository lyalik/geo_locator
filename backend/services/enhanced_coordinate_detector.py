import os
import logging
from typing import Optional, Dict, Any, List, Tuple
import numpy as np
from PIL import Image
import cv2
import exifread
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut, GeocoderServiceError
import requests
import json
from datetime import datetime

# Import AI services
from .mistral_ocr_service import MistralOCRService
from .panorama_analyzer_service import PanoramaAnalyzer

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class EnhancedCoordinateDetector:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ü–µ–∫–∏–Ω–∞
    """
    
    def __init__(self):
        self.geocoder = Nominatim(user_agent="geo_locator_enhanced")
        
        # Initialize AI services
        self.mistral_ocr = MistralOCRService()
        self.panorama_analyzer = PanoramaAnalyzer()
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –†–æ—Å—Å–∏–∏
        self.russia_bounds = {
            'min_lat': 41.0,  # –Æ–∂–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –†–æ—Å—Å–∏–∏
            'max_lat': 82.0,  # –°–µ–≤–µ—Ä–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –†–æ—Å—Å–∏–∏  
            'min_lon': 19.0,  # –ó–∞–ø–∞–¥–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –†–æ—Å—Å–∏–∏
            'max_lon': 180.0  # –í–æ—Å—Ç–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –†–æ—Å—Å–∏–∏
        }
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (–≤–º–µ—Å—Ç–æ –ü–µ–∫–∏–Ω–∞)
        self.regional_defaults = {
            'russia': {'lat': 55.7558, 'lon': 37.6176, 'name': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'},
            'europe': {'lat': 50.8503, 'lon': 4.3517, 'name': '–ë—Ä—é—Å—Å–µ–ª—å, –ï–≤—Ä–æ–ø–∞'},
            'asia': {'lat': 35.6762, 'lon': 139.6503, 'name': '–¢–æ–∫–∏–æ, –ê–∑–∏—è'},
            'america': {'lat': 40.7128, 'lon': -74.0060, 'name': '–ù—å—é-–ô–æ—Ä–∫, –°–®–ê'},
            'global': {'lat': 0.0, 'lon': 0.0, 'name': '–≠–∫–≤–∞—Ç–æ—Ä'}
        }
        
        # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        self.source_weights = {
            'gps_exif': 1.0,           # GPS –∏–∑ EXIF - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'panorama_analysis': 0.95,  # –ê–Ω–∞–ª–∏–∑ –ø–∞–Ω–æ—Ä–∞–º - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'location_hint': 0.9,       # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            'yandex_maps': 0.85,        # –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã
            'mistral_ocr': 0.8,         # Mistral AI OCR
            'dgis': 0.8,               # 2GIS
            'nominatim': 0.7,          # OpenStreetMap Nominatim
            'image_similarity': 0.6,    # –°—Ö–æ–¥—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'object_detection': 0.5,    # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            'fallback': 0.1            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        }

    def detect_coordinates_enhanced(self, image_path: str, location_hint: Optional[str] = None) -> Dict[str, Any]:
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        """
        logger.info(f"üîç Enhanced coordinate detection for: {image_path}")
        logger.info(f"üìç Location hint: {location_hint}")
        
        coordinate_candidates = []
        
        try:
            # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GPS –∏–∑ EXIF (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            gps_coords = self._extract_gps_from_exif(image_path)
            if gps_coords:
                coordinate_candidates.append({
                    'coordinates': gps_coords,
                    'source': 'gps_exif',
                    'confidence': 0.95,
                    'weight': self.source_weights['gps_exif']
                })
                logger.info(f"‚úÖ GPS from EXIF: {gps_coords}")
            
            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if location_hint:
                hint_coords = self._geocode_location_hint(location_hint)
                if hint_coords:
                    coordinate_candidates.append({
                        'coordinates': hint_coords,
                        'source': 'location_hint',
                        'confidence': 0.8,
                        'weight': self.source_weights['location_hint']
                    })
                    logger.info(f"‚úÖ Location hint geocoded: {hint_coords}")
            
            # 3. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å Mistral AI
            mistral_coords = self._extract_coordinates_with_mistral(image_path)
            if mistral_coords:
                coordinate_candidates.append({
                    'coordinates': mistral_coords,
                    'source': 'mistral_ocr',
                    'confidence': 0.75,
                    'weight': self.source_weights['mistral_ocr']
                })
                logger.info(f"‚úÖ Coordinates from Mistral OCR: {mistral_coords}")
            
            # 4. –ê–Ω–∞–ª–∏–∑ –ø–∞–Ω–æ—Ä–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
            if coordinate_candidates:
                # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–Ω–æ—Ä–∞–º
                temp_best = max(coordinate_candidates, key=lambda x: x['confidence'] * x['weight'])
                panorama_coords = self._analyze_with_panoramas(image_path, temp_best['coordinates'])
                if panorama_coords:
                    coordinate_candidates.append({
                        'coordinates': panorama_coords,
                        'source': 'panorama_analysis',
                        'confidence': 0.85,
                        'weight': self.source_weights['panorama_analysis']
                    })
                    logger.info(f"‚úÖ Coordinates from panorama analysis: {panorama_coords}")
            
            # 5. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            region_coords = self._detect_region_from_objects(image_path, location_hint)
            if region_coords:
                coordinate_candidates.append({
                    'coordinates': region_coords,
                    'source': 'object_detection',
                    'confidence': 0.6,
                    'weight': self.source_weights['object_detection']
                })
                logger.info(f"‚úÖ Region from objects: {region_coords}")
            
            # 6. –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            if coordinate_candidates:
                best_candidate = self._select_best_candidate(coordinate_candidates, location_hint)
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if self._validate_coordinates(best_candidate['coordinates'], location_hint):
                    result = {
                        'success': True,
                        'coordinates': best_candidate['coordinates'],
                        'source': best_candidate['source'],
                        'confidence': best_candidate['confidence'],
                        'all_candidates': coordinate_candidates,
                        'validation_passed': True
                    }
                    logger.info(f"üéØ Final coordinates: {best_candidate['coordinates']} from {best_candidate['source']}")
                    return result
            
            # 6. –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            logger.warning("‚ö†Ô∏è No valid coordinates found - returning None instead of default")
            return {
                'success': False,
                'message': 'No valid coordinates found from any source',
                'candidates_tried': len(coordinate_candidates) if coordinate_candidates else 0,
                'validation_failed': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error in enhanced coordinate detection: {e}")
            return {
                'success': False,
                'coordinates': None,
                'source': 'error',
                'confidence': 0.0,
                'error': str(e)
            }

    def _extract_gps_from_exif(self, image_path: str) -> Optional[Dict[str, float]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ EXIF –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open(image_path, 'rb') as f:
                tags = exifread.process_file(f)
                
                gps_latitude = tags.get('GPS GPSLatitude')
                gps_latitude_ref = tags.get('GPS GPSLatitudeRef')
                gps_longitude = tags.get('GPS GPSLongitude')
                gps_longitude_ref = tags.get('GPS GPSLongitudeRef')
                
                if all([gps_latitude, gps_latitude_ref, gps_longitude, gps_longitude_ref]):
                    lat = self._convert_to_degrees(gps_latitude)
                    lon = self._convert_to_degrees(gps_longitude)
                    
                    if str(gps_latitude_ref) == 'S':
                        lat = -lat
                    if str(gps_longitude_ref) == 'W':
                        lon = -lon
                    
                    return {'latitude': lat, 'longitude': lon}
        except Exception as e:
            logger.error(f"Error extracting GPS from EXIF: {e}")
        return None

    def _convert_to_degrees(self, value):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã"""
        d = float(value.values[0].num) / float(value.values[0].den)
        m = float(value.values[1].num) / float(value.values[1].den)
        s = float(value.values[2].num) / float(value.values[2].den)
        return d + (m / 60.0) + (s / 3600.0)

    def _geocode_location_hint(self, location_hint: str) -> Optional[Dict[str, float]]:
        """–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º "–†–æ—Å—Å–∏—è" –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞
            if location_hint and '—Ä–æ—Å—Å–∏—è' not in location_hint.lower() and 'russia' not in location_hint.lower():
                enhanced_hint = f"{location_hint}, –†–æ—Å—Å–∏—è"
            else:
                enhanced_hint = location_hint
            
            location = self.geocoder.geocode(enhanced_hint, timeout=10)
            if location:
                return {
                    'latitude': location.latitude,
                    'longitude': location.longitude
                }
        except (GeocoderTimedOut, GeocoderServiceError) as e:
            logger.error(f"Geocoding error: {e}")
        return None

    def _extract_coordinates_from_image_text(self, image_path: str) -> Optional[Dict[str, float]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (OCR)"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ç–µ–∫—Å—Ç–µ
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã OCR
            import re
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ç–µ–∫—Å—Ç–µ
            coord_patterns = [
                r'(\d{1,2}[.,]\d+)[¬∞\s]*[NS]?\s*[,\s]\s*(\d{1,3}[.,]\d+)[¬∞\s]*[EW]?',
                r'lat[:\s]*(\d{1,2}[.,]\d+).*lon[:\s]*(\d{1,3}[.,]\d+)',
                r'(\d{1,2}[.,]\d+)[,\s]+(\d{1,3}[.,]\d+)'
            ]
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π OCR, –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
            
        except Exception as e:
            logger.error(f"Error extracting coordinates from image text: {e}")
        return None

    def _detect_region_from_objects(self, image_path: str, location_hint: Optional[str]) -> Optional[Dict[str, float]]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            logger.info("üö´ Skipping default city coordinates - need real image analysis")
            
            # TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            # —Å –ø–æ–º–æ—â—å—é YOLO –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
            
            return None  # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            
        except Exception as e:
            logger.error(f"Error detecting region from objects: {e}")
        return None

    def _select_best_candidate(self, candidates: List[Dict], location_hint: Optional[str]) -> Dict:
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        if not candidates:
            return None
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        for candidate in candidates:
            score = candidate['confidence'] * candidate['weight']
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            if location_hint and candidate['source'] == 'location_hint':
                score *= 1.2
            
            # –ë–æ–Ω—É—Å –∑–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≥–æ—Ä–æ–¥
            if location_hint and any(city in location_hint.lower() 
                                   for city in ['—Ä–æ—Å—Å–∏—è', 'russia', '–º–æ—Å–∫–≤–∞', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥']):
                coords = candidate['coordinates']
                if self._is_in_russia(coords['latitude'], coords['longitude']):
                    score *= 1.1
            
            candidate['final_score'] = score
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π
        return max(candidates, key=lambda x: x['final_score'])

    def _validate_coordinates(self, coordinates: Dict[str, float], location_hint: Optional[str]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        if not coordinates:
            return False
        
        lat, lon = coordinates['latitude'], coordinates['longitude']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—á–∞—Å—Ç–æ –æ—à–∏–±–æ—á–Ω—ã–µ)
        if lat == 0.0 and lon == 0.0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ü–µ–∫–∏–Ω–∞ (–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        if abs(lat - 39.9042) < 0.1 and abs(lon - 116.4074) < 0.1:
            logger.warning("üö´ Detected Beijing coordinates - likely default values, rejecting")
            return False
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –≥–æ—Ä–æ–¥–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if location_hint and any(city in location_hint.lower() 
                               for city in ['—Ä–æ—Å—Å–∏—è', 'russia', '–º–æ—Å–∫–≤–∞', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä']):
            if not self._is_in_russia(lat, lon):
                logger.warning(f"üö´ Coordinates {lat}, {lon} not in Russia despite Russian location hint")
                return False
        
        return True

    def _is_in_russia(self, lat: float, lon: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –†–æ—Å—Å–∏–∏"""
        return (self.russia_bounds['min_lat'] <= lat <= self.russia_bounds['max_lat'] and
                self.russia_bounds['min_lon'] <= lon <= self.russia_bounds['max_lon'])

    def get_smart_fallback_coordinates(self, location_hint: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —É–º–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–º–µ—Å—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ü–µ–∫–∏–Ω–∞
        """
        if location_hint:
            hint_lower = location_hint.lower()
            
            # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            if any(city in hint_lower for city in ['—Ä–æ—Å—Å–∏—è', 'russia', '–º–æ—Å–∫–≤–∞', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥']):
                return {
                    'coordinates': self.regional_defaults['russia'],
                    'source': 'smart_fallback_russia',
                    'confidence': 0.3,
                    'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –†–æ—Å—Å–∏–∏'
                }
            
            # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –≥–æ—Ä–æ–¥–∞
            elif any(city in hint_lower for city in ['–µ–≤—Ä–æ–ø–∞', 'europe', '–±–µ—Ä–ª–∏–Ω', '–ø–∞—Ä–∏–∂', '–ª–æ–Ω–¥–æ–Ω']):
                return {
                    'coordinates': self.regional_defaults['europe'],
                    'source': 'smart_fallback_europe',
                    'confidence': 0.3,
                    'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –ï–≤—Ä–æ–ø—ã'
                }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ - –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        return {
            'coordinates': None,
            'source': 'no_fallback',
            'confidence': 0.0,
            'message': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏.'
        }
    
    def _analyze_with_panoramas(self, image_path: str, approximate_coords: Dict[str, float]) -> Optional[Dict[str, float]]:
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–Ω–æ—Ä–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        """
        try:
            from .panorama_analyzer_service import PanoramaAnalyzer
            from .yandex_maps_service import YandexMapsService
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            yandex_service = YandexMapsService()
            panorama_analyzer = PanoramaAnalyzer(yandex_service)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–∞–Ω–æ—Ä–∞–º–∞–º–∏
            result = panorama_analyzer.analyze_location_with_panoramas(
                image_path,
                approximate_coords['latitude'],
                approximate_coords['longitude'],
                search_radius=300
            )
            
            if result.get('success') and result.get('coordinates'):
                logger.info(f"üéØ Panorama analysis successful: confidence {result.get('confidence', 0):.2f}")
                return result['coordinates']
            else:
                logger.info(f"üì∏ Panorama analysis failed: {result.get('message', 'Unknown error')}")
                return None
                
        except ImportError as e:
            logger.warning(f"Panorama analyzer not available: {e}")
            return None
        except Exception as e:
            logger.error(f"Error in panorama analysis: {e}")
            return None
    
    def _extract_coordinates_with_mistral(self, image_path: str) -> Optional[Dict[str, float]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Mistral AI OCR
        """
        try:
            logger.info("ü§ñ Analyzing image with Mistral AI OCR...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Mistral OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            ocr_result = self.mistral_ocr.extract_text_and_addresses(image_path)
            
            if not ocr_result.get('success'):
                logger.info(f"Mistral OCR failed: {ocr_result.get('error', 'Unknown error')}")
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            address_info = ocr_result.get('address_info', {})
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            coordinates = address_info.get('coordinates')
            if coordinates and coordinates.get('latitude') and coordinates.get('longitude'):
                logger.info(f"‚úÖ Found coordinates in Mistral OCR: {coordinates}")
                return {
                    'latitude': float(coordinates['latitude']),
                    'longitude': float(coordinates['longitude'])
                }
            
            # –ï—Å–ª–∏ –ø—Ä—è–º—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å
            full_address = address_info.get('full_address')
            if full_address:
                logger.info(f"üîç Geocoding address from Mistral OCR: {full_address}")
                geocoded = self._geocode_location_hint(full_address)
                if geocoded:
                    logger.info(f"‚úÖ Geocoded Mistral address: {geocoded}")
                    return geocoded
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞
            address_components = []
            if address_info.get('street'):
                address_components.append(address_info['street'])
            if address_info.get('city'):
                address_components.append(address_info['city'])
            if address_info.get('region'):
                address_components.append(address_info['region'])
            
            if address_components:
                combined_address = ', '.join(address_components)
                logger.info(f"üîç Geocoding combined address: {combined_address}")
                geocoded = self._geocode_location_hint(combined_address)
                if geocoded:
                    logger.info(f"‚úÖ Geocoded combined address: {geocoded}")
                    return geocoded
            
            logger.info("No usable address information found in Mistral OCR result")
            return None
            
        except Exception as e:
            logger.error(f"Error in Mistral OCR coordinate extraction: {e}")
            return None
