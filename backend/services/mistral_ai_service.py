import os
import base64
import requests
import logging
from typing import Dict, Any, List, Optional
from PIL import Image
import io
from .dataset_search_service import DatasetSearchService

logger = logging.getLogger(__name__)

class MistralAIService:
    def __init__(self):
        self.api_key = os.getenv('MISTRAL_API_KEY')
        self.base_url = "https://api.mistral.ai/v1"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å Mistral –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.model = os.getenv('MISTRAL_MODEL', "pixtral-12b-2409")  # Mistral's vision model
        self.dataset_search = DatasetSearchService()
        
        if not self.api_key:
            logger.warning("MISTRAL_API_KEY not found in environment variables")
            # –î–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.demo_mode = True
        else:
            self.demo_mode = False
            logger.info(f"ü§ñ AI initialized with API key: {self.api_key[:8]}...")
    
    def _encode_image(self, image_path: str) -> str:
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64"""
        try:
            with Image.open(image_path) as img:
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                img.thumbnail((1024, 1024), Image.Resampling.LANCZOS)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RGBA –≤ RGB –¥–ª—è JPEG
                if img.mode in ('RGBA', 'LA', 'P'):
                    # –°–æ–∑–¥–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω
                    background = Image.new('RGB', img.size, (255, 255, 255))
                    if img.mode == 'P':
                        img = img.convert('RGBA')
                    background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
                    img = background
                elif img.mode not in ('RGB', 'L'):
                    img = img.convert('RGB')
                
                buffer = io.BytesIO()
                img.save(buffer, format='JPEG', quality=85)
                buffer.seek(0)
                
                return base64.b64encode(buffer.read()).decode('utf-8')
        except Exception as e:
            logger.error(f"Error encoding image: {e}")
            raise
    
    def analyze_image(self, image_path: str, prompt: str = None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
        """
        if not self.api_key:
            return {'success': False, 'error': 'AI API key not configured'}
        
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_base64 = self._encode_image(image_path)
            
            # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            default_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏:
1. –¢–∏–ø –∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
2. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
3. –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
4. –í–∏–¥–∏–º—ã–µ –∞–¥—Ä–µ—Å–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤
5. –û–∫—Ä—É–∂–∞—é—â—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
6. –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∂–∏–ª–æ–≥–æ —Ñ–æ–Ω–¥–∞

–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
            
            analysis_prompt = prompt or default_prompt
            
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "model": self.model,
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": analysis_prompt
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}"
                                }
                            }
                        ]
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.3
            }
            
            response = requests.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=30
            )
            response.raise_for_status()
            
            result = response.json()
            
            if 'choices' in result and len(result['choices']) > 0:
                analysis = result['choices'][0]['message']['content']
                
                return {
                    'success': True,
                    'source': 'mistral_ai',
                    'analysis': analysis,
                    'model': self.model,
                    'tokens_used': result.get('usage', {}).get('total_tokens', 0)
                }
            else:
                return {'success': False, 'error': 'No analysis returned from AI'}
                
        except requests.RequestException as e:
            logger.error(f"AI API error: {e}")
            return {'success': False, 'error': f'API request failed: {str(e)}'}
        except Exception as e:
            logger.error(f"Unexpected error in AI analysis: {e}")
            return {'success': False, 'error': f'Analysis failed: {str(e)}'}
    
    def detect_violations(self, image_path: str) -> Dict[str, Any]:
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
        """
        violation_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–∂–∏–ª–æ–≥–æ —Ñ–æ–Ω–¥–∞:

1. –ù–ï–ó–ê–ö–û–ù–ù–´–ï –ü–†–ò–°–¢–†–û–ô–ö–ò:
   - –°–∞–º–æ–≤–æ–ª—å–Ω—ã–µ –ø—Ä–∏—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–¥–∞–Ω–∏—è–º
   - –ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –±–∞–ª–∫–æ–Ω—ã, —Ç–µ—Ä—Ä–∞—Å—ã
   - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

2. –ù–ê–†–£–®–ï–ù–ò–Ø –§–ê–°–ê–î–û–í:
   - –ù–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≤—ã–≤–µ—Å–∫–∏
   - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –æ–±–ª–∏–∫–∞
   - –ù–∞—Ä—É—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã

3. –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –¢–ï–†–†–ò–¢–û–†–ò–ò:
   - –ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞
   - –°–∫–ª–∞–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   - –¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

4. –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:
   - –ê–≤–∞—Ä–∏–π–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
   - –ù–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "violations_detected": true/false,
  "violations": [
    {
      "type": "—Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è",
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
      "severity": "low/medium/high",
      "confidence": 0.0-100.0
    }
  ],
  "building_analysis": "–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∑–¥–∞–Ω–∏—è",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
}"""
        
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if self.demo_mode:
                logger.info(f"ü§ñ AI DEMO MODE - generating mock violations")
                return {
                    'success': True,
                    'violations': [
                        {
                            'type': 'facade_violation',
                            'description': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è –≤—ã–≤–µ—Å–∫–∞ –Ω–∞ —Ñ–∞—Å–∞–¥–µ –∑–¥–∞–Ω–∏—è',
                            'severity': 'medium',
                            'confidence': 0.78
                        },
                        {
                            'type': 'unauthorized_construction',
                            'description': '–í–æ–∑–º–æ–∂–Ω–∞—è —Å–∞–º–æ–≤–æ–ª—å–Ω–∞—è –ø—Ä–∏—Å—Ç—Ä–æ–π–∫–∞ –∫ –∑–¥–∞–Ω–∏—é',
                            'severity': 'high',
                            'confidence': 0.65
                        }
                    ],
                    'building_analysis': '–ú–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω–æ–µ –∂–∏–ª–æ–µ –∑–¥–∞–Ω–∏–µ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Ñ–∞—Å–∞–¥–∞',
                    'recommendations': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–≤–µ—Å–∫–∏', '–û–±—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—Å—Ç—Ä–æ–π–∫–∏']
                }
            
            result = self.analyze_image(image_path, violation_prompt)
            logger.info(f"ü§ñ AI raw result: {result}")
            
            if result.get('success') and result.get('analysis'):
                # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
                import json
                import re
                
                analysis_text = result['analysis']
                logger.info(f"ü§ñ AI analysis text: {analysis_text}")
                
                # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
                json_match = re.search(r'\{.*\}', analysis_text, re.DOTALL)
                if json_match:
                    try:
                        parsed_data = json.loads(json_match.group())
                        logger.info(f"ü§ñ AI parsed JSON: {parsed_data}")
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        violations = []
                        if parsed_data.get('violations_detected') and parsed_data.get('violations'):
                            for v in parsed_data['violations']:
                                violations.append({
                                    'type': v.get('type', 'unknown'),
                                    'description': v.get('description', ''),
                                    'severity': v.get('severity', 'medium'),
                                    'confidence': float(v.get('confidence', 0.0))
                                })
                        
                        # –£–±–∏—Ä–∞–µ–º –¥–µ–º–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                        logger.info(f"ü§ñ AI - Found {len(violations)} real violations")
                        
                        return {
                            'success': True,
                            'violations': violations,
                            'building_analysis': parsed_data.get('building_analysis', ''),
                            'recommendations': parsed_data.get('recommendations', [])
                        }
                    except json.JSONDecodeError as e:
                        logger.error(f"ü§ñ AI JSON parse error: {e}")
                        # Fallback - —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        return {
                            'success': True,
                            'violations': [{
                                'type': 'general_analysis',
                                'description': analysis_text[:200] + '...',
                                'severity': 'medium',
                                'confidence': 0.7
                            }],
                            'building_analysis': analysis_text,
                            'recommendations': []
                        }
                else:
                    logger.warning(f"ü§ñ AI: No JSON found in response")
                    return {
                        'success': True,
                        'violations': [{
                            'type': 'text_analysis',
                            'description': analysis_text[:100] + '...',
                            'severity': 'low',
                            'confidence': 0.5
                        }],
                        'building_analysis': analysis_text,
                        'recommendations': []
                    }
            else:
                logger.error(f"ü§ñ AI: Analysis failed - {result}")
                return {'success': False, 'error': 'Analysis failed'}
                
        except Exception as e:
            logger.error(f"ü§ñ AI detect_violations error: {e}")
            return {'success': False, 'error': str(e)}
    
    def extract_address_info(self, image_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        address_prompt = """–ù–∞–π–¥–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –≤—Å—é –∞–¥—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:

1. –ù–û–ú–ï–†–ê –î–û–ú–û–í
2. –ù–ê–ó–í–ê–ù–ò–Ø –£–õ–ò–¶
3. –í–´–í–ï–°–ö–ò –° –ê–î–†–ï–°–ê–ú–ò
4. –ü–û–ß–¢–û–í–´–ï –ò–ù–î–ï–ö–°–´
5. –ù–ê–ó–í–ê–ù–ò–Ø –†–ê–ô–û–ù–û–í/–ì–û–†–û–î–û–í
6. –û–†–ò–ï–ù–¢–ò–†–´ –ò –ù–ê–ó–í–ê–ù–ò–Ø –û–ë–™–ï–ö–¢–û–í

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "address_found": true/false,
  "house_numbers": ["–Ω–æ–º–µ—Ä1", "–Ω–æ–º–µ—Ä2"],
  "street_names": ["—É–ª–∏—Ü–∞1", "—É–ª–∏—Ü–∞2"],
  "postal_codes": ["–∏–Ω–¥–µ–∫—Å1"],
  "districts": ["—Ä–∞–π–æ–Ω1"],
  "landmarks": ["–æ—Ä–∏–µ–Ω—Ç–∏—Ä1", "–æ—Ä–∏–µ–Ω—Ç–∏—Ä2"],
  "full_addresses": ["–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω"],
  "confidence": 0.0-1.0
}"""
        
        return self.analyze_image(image_path, address_prompt)
    
    def analyze_property_type(self, image_path: str) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        """
        property_prompt = """–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:

–¢–ò–ü–´ –ó–î–ê–ù–ò–ô:
- –ñ–∏–ª–æ–π –¥–æ–º (–º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π/—á–∞—Å—Ç–Ω—ã–π)
- –û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
- –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä/–º–∞–≥–∞–∑–∏–Ω
- –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ
- –°–∫–ª–∞–¥—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ
- –ì–∞—Ä–∞–∂/–ø–∞—Ä–∫–∏–Ω–≥
- –°–æ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (—à–∫–æ–ª–∞, –±–æ–ª—å–Ω–∏—Ü–∞)
- –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç (—Ç–µ–∞—Ç—Ä, –º—É–∑–µ–π)

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "property_type": "—Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
  "building_class": "–∫–ª–∞—Å—Å –∑–¥–∞–Ω–∏—è (A/B/C/D)",
  "floors_count": —á–∏—Å–ª–æ_—ç—Ç–∞–∂–µ–π,
  "construction_period": "–ø–µ—Ä–∏–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏",
  "architectural_style": "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å",
  "condition": "—Å–æ—Å—Ç–æ—è–Ω–∏–µ (–æ—Ç–ª–∏—á–Ω–æ–µ/—Ö–æ—Ä–æ—à–µ–µ/—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ/–ø–ª–æ—Ö–æ–µ)",
  "commercial_use": true/false,
  "confidence": 0.0-1.0
}"""
        
        return self.analyze_image(image_path, property_prompt)
    
    def extract_location_info(self, image_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:
        - –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        - –ù–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü –∏ –∞–¥—Ä–µ—Å–∞
        - –ù–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤
        - –ù–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π
        - –î–æ—Ä–æ–∂–Ω—ã–µ –∑–Ω–∞–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        """
        location_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –õ–Æ–ë–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:

1. –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ï –ù–û–ú–ï–†–ê:
   - –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ê123–ê–ê777 (—Ä–µ–≥–∏–æ–Ω –≤ –∫–æ–Ω—Ü–µ)
   - –£–∫–∞–∂–∏ —Ä–µ–≥–∏–æ–Ω –∏ –≥–æ—Ä–æ–¥

2. –ê–î–†–ï–°–ê –ò –£–õ–ò–¶–´:
   - –ù–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü –Ω–∞ —Ç–∞–±–ª–∏—á–∫–∞—Ö
   - –ù–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤
   - –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤

3. –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:
   - –í—ã–≤–µ—Å–∫–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –∫–∞—Ñ–µ, –æ—Ñ–∏—Å–æ–≤
   - –ù–∞–∑–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤
   - –ë—Ä–µ–Ω–¥—ã –∏ –∫–æ–º–ø–∞–Ω–∏–∏

4. –î–û–†–û–ñ–ù–´–ï –ó–ù–ê–ö–ò:
   - –£–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   - –ù–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
   - –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≥–æ—Ä–æ–¥–æ–≤

–í–µ—Ä–Ω–∏ JSON:
{
  "found": true/false,
  "info_type": "license_plate/street/address/organization/sign",
  "extracted_text": "—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
  "location": {
    "city": "–≥–æ—Ä–æ–¥",
    "street": "—É–ª–∏—Ü–∞",
    "house_number": "–Ω–æ–º–µ—Ä –¥–æ–º–∞",
    "region": "—Ä–µ–≥–∏–æ–Ω/–æ–±–ª–∞—Å—Ç—å"
  },
  "license_plates": [
    {"plate": "–ê123–ê–ê777", "region_code": "777", "region_name": "–ú–æ—Å–∫–≤–∞"}
  ],
  "confidence": 0.0-1.0
}

–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω–∏ {"found": false}"""
        
        result = self.analyze_image(image_path, location_prompt)
        
        if not result.get('success'):
            return {
                'success': False,
                'message': 'Mistral AI analysis failed'
            }
        
        analysis = result.get('analysis', {})
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        if analysis.get('found'):
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            location = analysis.get('location', {})
            city = location.get('city', '')
            street = location.get('street', '')
            region = location.get('region', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            license_plates = analysis.get('license_plates', [])
            if license_plates:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ –Ω–æ–º–µ—Ä–∞
                plate_info = license_plates[0]
                region_name = plate_info.get('region_name', '')
                
                # –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
                region_coords = {
                    '–ú–æ—Å–∫–≤–∞': {'lat': 55.7558, 'lon': 37.6176},
                    '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': {'lat': 59.9311, 'lon': 30.3609},
                    '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat': 55.7, 'lon': 37.5},
                }
                
                coords = region_coords.get(region_name)
                if coords:
                    return {
                        'success': True,
                        'coordinates': {
                            'latitude': coords['lat'],
                            'longitude': coords['lon'],
                            'source': 'mistral_ai_ocr',
                            'confidence': analysis.get('confidence', 0.7)
                        },
                        'info_type': 'license_plate',
                        'extracted_info': f"–ù–æ–º–µ—Ä {plate_info.get('plate')} ‚Üí {region_name}",
                        'details': analysis
                    }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ä–æ–¥ –∏ —É–ª–∏—Ü–∞, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if city and street:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ Yandex Geocoder
                return {
                    'success': True,
                    'info_type': 'address',
                    'extracted_info': f"{city}, {street}",
                    'details': analysis,
                    'needs_geocoding': True  # –§–ª–∞–≥ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                }
        
        return {
            'success': False,
            'message': 'No location information found in image',
            'details': analysis
        }
