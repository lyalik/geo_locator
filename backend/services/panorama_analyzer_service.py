"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–Ω–æ—Ä–∞–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç Yandex Panorama API —Å YOLO –¥–µ—Ç–µ–∫—Ü–∏–µ–π –æ–±—ä–µ–∫—Ç–æ–≤
"""

import logging
import requests
import cv2
import numpy as np
from typing import Dict, List, Any, Optional, Tuple
import tempfile
import os
from PIL import Image
import io

from .yandex_maps_service import YandexMapsService
from .dgis_panorama_service import DGISPanoramaService
from .yolo_violation_detector import YOLOObjectDetector

logger = logging.getLogger(__name__)

class PanoramaAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞–Ω–æ—Ä–∞–º –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    
    def __init__(self, yandex_service: YandexMapsService = None):
        self.yandex_service = yandex_service or YandexMapsService()
        self.dgis_service = DGISPanoramaService()
        self.yolo_detector = YOLOObjectDetector()
        
    def analyze_location_with_panoramas(self, 
                                      target_image_path: str, 
                                      lat: float, 
                                      lon: float, 
                                      search_radius: int = 300) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–Ω–æ—Ä–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        Args:
            target_image_path: –ü—É—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            lat: –®–∏—Ä–æ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            lon: –î–æ–ª–≥–æ—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
            search_radius: –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –ø–∞–Ω–æ—Ä–∞–º –≤ –º–µ—Ç—Ä–∞—Ö
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        """
        try:
            logger.info(f"üîç Starting panorama analysis for {lat}, {lon}")
            
            # 1. –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø–∞–Ω–æ—Ä–∞–º –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            all_panoramas = []
            
            # –ü–æ–∏—Å–∫ –ø–∞–Ω–æ—Ä–∞–º Yandex
            yandex_result = self.yandex_service.get_panorama_nearby(lat, lon, search_radius)
            if yandex_result.get('success') and yandex_result.get('panoramas'):
                all_panoramas.extend(yandex_result['panoramas'])
                logger.info(f"üìç Found {len(yandex_result['panoramas'])} Yandex panoramas")
            
            # –ü–æ–∏—Å–∫ –ø–∞–Ω–æ—Ä–∞–º 2GIS
            dgis_result = self.dgis_service.get_panorama_nearby(lat, lon, search_radius)
            if dgis_result.get('success') and dgis_result.get('panoramas'):
                all_panoramas.extend(dgis_result['panoramas'])
                logger.info(f"üìç Found {len(dgis_result['panoramas'])} 2GIS panoramas")
            
            if not all_panoramas:
                logger.warning("No panoramas found from any source")
                return {
                    'success': False,
                    'message': 'No panoramas available in the area from any source',
                    'panoramas_found': 0,
                    'sources_checked': ['yandex', '2gis']
                }
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–Ω–æ—Ä–∞–º—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            all_panoramas.sort(key=lambda x: x.get('distance', float('inf')))
            panoramas = all_panoramas
            logger.info(f"üì∏ Found {len(panoramas)} panoramas to analyze")
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            target_objects = self._analyze_image_objects(target_image_path)
            
            if not target_objects:
                logger.warning("No objects detected in target image")
                return {
                    'success': False,
                    'message': 'No objects detected in target image',
                    'panoramas_found': len(panoramas)
                }
            
            # 3. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–Ω–æ—Ä–∞–º—ã
            panorama_matches = []
            
            for i, panorama in enumerate(panoramas[:3]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –ø–∞–Ω–æ—Ä–∞–º
                logger.info(f"üîç Analyzing panorama {i+1}/{min(3, len(panoramas))}")
                
                match_result = self._analyze_panorama_match(
                    panorama, target_objects, target_image_path
                )
                
                if match_result['success']:
                    panorama_matches.append(match_result)
            
            # 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            best_match = self._find_best_match(panorama_matches)
            
            if best_match:
                logger.info(f"‚úÖ Best match found with confidence {best_match['confidence']:.2f}")
                return {
                    'success': True,
                    'source': 'panorama_analysis',
                    'confidence': best_match['confidence'],
                    'coordinates': {
                        'latitude': best_match['latitude'],
                        'longitude': best_match['longitude']
                    },
                    'panorama_id': best_match['panorama_id'],
                    'panorama_source': best_match.get('panorama_source', 'unknown'),
                    'matched_objects': best_match['matched_objects'],
                    'panoramas_analyzed': len(panorama_matches),
                    'total_panoramas_found': len(panoramas),
                    'sources_used': {
                        'yandex': len([p for p in panoramas if p.get('source') != '2gis']),
                        '2gis': len([p for p in panoramas if p.get('source') == '2gis'])
                    },
                    'analysis_details': {
                        'target_objects': len(target_objects),
                        'panorama_objects': best_match.get('panorama_objects', 0),
                        'similarity_score': best_match.get('similarity_score', 0)
                    }
                }
            else:
                logger.info("No good matches found in panoramas")
                return {
                    'success': False,
                    'message': 'No matching objects found in panoramas',
                    'panoramas_analyzed': len(panorama_matches),
                    'total_panoramas_found': len(panoramas),
                    'target_objects': len(target_objects)
                }
                
        except Exception as e:
            logger.error(f"Error in panorama analysis: {e}")
            return {
                'success': False,
                'error': str(e),
                'source': 'panorama_analysis'
            }
    
    def _analyze_image_objects(self, image_path: str) -> List[Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é YOLO
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º YOLO –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
            results = self.yolo_detector.detect_objects(image_path)
            
            objects = []
            if results.get('success') and results.get('objects'):
                for obj in results['objects']:
                    objects.append({
                        'class': obj.get('category', 'unknown'),
                        'confidence': obj.get('confidence', 0),
                        'bbox': obj.get('bbox', {}),
                        'area': self._calculate_bbox_area(obj.get('bbox', {}))
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä—É
            objects.sort(key=lambda x: (x['confidence'], x['area']), reverse=True)
            
            logger.info(f"üéØ Detected {len(objects)} objects in target image")
            return objects[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –æ–±—ä–µ–∫—Ç–æ–≤
            
        except Exception as e:
            logger.error(f"Error analyzing target image objects: {e}")
            return []
    
    def _analyze_panorama_match(self, 
                               panorama: Dict[str, Any], 
                               target_objects: List[Dict[str, Any]], 
                               target_image_path: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –ø–∞–Ω–æ—Ä–∞–º–æ–π –∏ —Ü–µ–ª–µ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        """
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º—ã
            panorama_image_path = self._download_panorama_image(panorama)
            
            if not panorama_image_path:
                return {'success': False, 'error': 'Failed to download panorama'}
            
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –ø–∞–Ω–æ—Ä–∞–º–µ
                panorama_objects = self._analyze_image_objects(panorama_image_path)
                
                if not panorama_objects:
                    return {'success': False, 'error': 'No objects detected in panorama'}
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
                matches = self._compare_objects(target_objects, panorama_objects)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Å–∫–æ—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                confidence = self._calculate_match_confidence(matches, target_objects, panorama_objects)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                similarity_score = self._calculate_visual_similarity(target_image_path, panorama_image_path)
                
                # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                combined_confidence = (confidence * 0.7 + similarity_score * 0.3)
                
                return {
                    'success': True,
                    'panorama_id': panorama['id'],
                    'latitude': panorama['latitude'],
                    'longitude': panorama['longitude'],
                    'confidence': combined_confidence,
                    'panorama_source': panorama.get('source', 'yandex'),
                    'matched_objects': matches,
                    'panorama_objects': len(panorama_objects),
                    'similarity_score': similarity_score,
                    'distance_from_center': panorama['distance']
                }
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(panorama_image_path):
                    os.unlink(panorama_image_path)
                    
        except Exception as e:
            logger.error(f"Error analyzing panorama match: {e}")
            return {'success': False, 'error': str(e)}
    
    def _download_panorama_image(self, panorama: Dict[str, Any]) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–æ—Ä–∞–º—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (Yandex, 2GIS)
        """
        try:
            image_url = None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if panorama.get('source') == '2gis':
                # –î–ª—è 2GIS –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                if panorama.get('photos') and len(panorama['photos']) > 0:
                    image_url = panorama['photos'][0].get('url')
            else:
                # –î–ª—è Yandex –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π image_url
                image_url = panorama.get('image_url')
            
            if not image_url:
                logger.warning(f"No image URL found for panorama from {panorama.get('source', 'unknown')}")
                return None
            
            logger.info(f"üì• Downloading panorama from {panorama.get('source', 'unknown')}: {image_url}")
            response = requests.get(image_url, timeout=15)
            response.raise_for_status()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
                tmp_file.write(response.content)
                return tmp_file.name
                
        except Exception as e:
            logger.error(f"Error downloading panorama image from {panorama.get('source', 'unknown')}: {e}")
            return None
    
    def _compare_objects(self, 
                        target_objects: List[Dict[str, Any]], 
                        panorama_objects: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É —Ü–µ–ª–µ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–∞–Ω–æ—Ä–∞–º–æ–π
        """
        matches = []
        
        for target_obj in target_objects:
            best_match = None
            best_score = 0
            
            for pano_obj in panorama_objects:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤
                if target_obj['class'] == pano_obj['class']:
                    # –£—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏
                    score = min(target_obj['confidence'], pano_obj['confidence'])
                    
                    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ (–ø–æ—Ö–æ–∂–∏–µ —Ä–∞–∑–º–µ—Ä—ã = –≤—ã—à–µ —Å–∫–æ—Ä)
                    size_ratio = min(target_obj['area'], pano_obj['area']) / max(target_obj['area'], pano_obj['area'])
                    score *= (0.5 + 0.5 * size_ratio)
                    
                    if score > best_score:
                        best_score = score
                        best_match = pano_obj
            
            if best_match and best_score > 0.3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                matches.append({
                    'target_object': target_obj,
                    'panorama_object': best_match,
                    'match_score': best_score
                })
        
        return matches
    
    def _calculate_match_confidence(self, 
                                  matches: List[Dict[str, Any]], 
                                  target_objects: List[Dict[str, Any]], 
                                  panorama_objects: List[Dict[str, Any]]) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        """
        if not matches or not target_objects:
            return 0.0
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–≤—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        match_ratio = len(matches) / len(target_objects)
        
        # –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        avg_match_score = sum(match['match_score'] for match in matches) / len(matches)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = match_ratio * avg_match_score
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if len(matches) >= 3:
            confidence *= 1.2
        elif len(matches) >= 2:
            confidence *= 1.1
        
        return min(confidence, 1.0)
    
    def _calculate_visual_similarity(self, image1_path: str, image2_path: str) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            img1 = cv2.imread(image1_path)
            img2 = cv2.imread(image2_path)
            
            if img1 is None or img2 is None:
                return 0.0
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
            img1 = cv2.resize(img1, (256, 256))
            img2 = cv2.resize(img2, (256, 256))
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            hist1 = cv2.calcHist([img1], [0, 1, 2], None, [50, 50, 50], [0, 256, 0, 256, 0, 256])
            hist2 = cv2.calcHist([img2], [0, 1, 2], None, [50, 50, 50], [0, 256, 0, 256, 0, 256])
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            similarity = cv2.compareHist(hist1, hist2, cv2.HISTCMP_CORREL)
            
            return max(0.0, similarity)
            
        except Exception as e:
            logger.error(f"Error calculating visual similarity: {e}")
            return 0.0
    
    def _find_best_match(self, panorama_matches: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –ø–∞–Ω–æ—Ä–∞–º
        """
        if not panorama_matches:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        panorama_matches.sort(key=lambda x: x['confidence'], reverse=True)
        
        best_match = panorama_matches[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if best_match['confidence'] < 0.4:
            return None
        
        return best_match
    
    def _calculate_bbox_area(self, bbox: Dict[str, Any]) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ bounding box
        """
        try:
            width = bbox.get('width', 0)
            height = bbox.get('height', 0)
            return width * height
        except:
            return 0.0
