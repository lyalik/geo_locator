"""
Mistral AI OCR Service –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import logging
from typing import Dict, Any, List, Optional
from .mistral_ai_service import MistralAIService
import json
import re

logger = logging.getLogger(__name__)

class MistralOCRService:
    """
    OCR —Å–µ—Ä–≤–∏—Å –Ω–∞ –±–∞–∑–µ Mistral AI –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.mistral_service = MistralAIService()
        
    def extract_text_and_addresses(self, image_path: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            ocr_prompt = """–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–Æ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

1. –ê–î–†–ï–°–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
   - –ù–æ–º–µ—Ä–∞ –¥–æ–º–æ–≤ (–ª—é–±—ã–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ —Ç–∞–±–ª–∏—á–∫–∞—Ö, –∑–¥–∞–Ω–∏—è—Ö)
   - –ù–∞–∑–≤–∞–Ω–∏—è —É–ª–∏—Ü (–ø–æ–ª–Ω–æ—Å—Ç—å—é, –≤–∫–ª—é—á–∞—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è)
   - –ù–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤, –≥–æ—Ä–æ–¥–æ–≤
   - –ü–æ—á—Ç–æ–≤—ã–µ –∏–Ω–¥–µ–∫—Å—ã
   - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)

2. –í–´–í–ï–°–ö–ò –ò –¢–ê–ë–õ–ò–ß–ö–ò:
   - –ù–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
   - –†–µ–∫–ª–∞–º–Ω—ã–µ –≤—ã–≤–µ—Å–∫–∏
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—á–∫–∏
   - –£–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

3. –õ–Æ–ë–û–ô –î–†–£–ì–û–ô –¢–ï–ö–°–¢:
   - –ù–∞–¥–ø–∏—Å–∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ
   - –ì—Ä–∞—Ñ—Ñ–∏—Ç–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
   - –ù–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏
   - –õ—é–±—ã–µ –≤–∏–¥–∏–º—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã

–í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–π –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ –≤–∏–¥–∏–º—ã–π –∏–ª–∏ –Ω–µ—á–µ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "text_found": true/false,
  "addresses": {
    "house_numbers": ["–Ω–æ–º–µ—Ä1", "–Ω–æ–º–µ—Ä2"],
    "street_names": ["—É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞", "–ø—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞"],
    "districts": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω"],
    "cities": ["–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"],
    "postal_codes": ["350000"],
    "full_addresses": ["—É–ª. –õ–µ–Ω–∏–Ω–∞ 123"]
  },
  "signs_and_text": [
    {
      "text": "–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
      "type": "–≤—ã–≤–µ—Å–∫–∞/—Ç–∞–±–ª–∏—á–∫–∞/–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏/–¥—Ä—É–≥–æ–µ",
      "confidence": 0.0-1.0
    }
  ],
  "coordinates_found": ["–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å"],
  "overall_confidence": 0.0-1.0
}"""
            
            logger.info(f"üîç Extracting text from image: {image_path}")
            result = self.mistral_service.analyze_image(image_path, ocr_prompt)
            
            if result.get('success') and result.get('analysis'):
                return self._parse_ocr_result(result['analysis'])
            else:
                logger.error(f"Mistral OCR failed: {result}")
                return {
                    'success': False,
                    'error': result.get('error', 'OCR analysis failed')
                }
                
        except Exception as e:
            logger.error(f"Error in Mistral OCR: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _parse_ocr_result(self, analysis_text: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', analysis_text, re.DOTALL)
            if json_match:
                parsed_data = json.loads(json_match.group())
                logger.info(f"‚úÖ Mistral OCR parsed: {parsed_data}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                addresses = parsed_data.get('addresses', {})
                signs_text = parsed_data.get('signs_and_text', [])
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                all_addresses = []
                if addresses.get('full_addresses'):
                    all_addresses.extend(addresses['full_addresses'])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                street_names = addresses.get('street_names', [])
                house_numbers = addresses.get('house_numbers', [])
                
                for street in street_names:
                    for house in house_numbers:
                        combined_address = f"{street} {house}"
                        if combined_address not in all_addresses:
                            all_addresses.append(combined_address)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                all_text = []
                for sign in signs_text:
                    if isinstance(sign, dict) and sign.get('text'):
                        all_text.append(sign['text'])
                
                return {
                    'success': True,
                    'source': 'mistral_ocr',
                    'addresses_found': all_addresses,
                    'street_names': street_names,
                    'house_numbers': house_numbers,
                    'districts': addresses.get('districts', []),
                    'cities': addresses.get('cities', []),
                    'all_text': all_text,
                    'coordinates': parsed_data.get('coordinates_found', []),
                    'confidence': parsed_data.get('overall_confidence', 0.7),
                    'raw_analysis': analysis_text
                }
            else:
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                logger.warning("No JSON found, trying text extraction")
                return self._extract_from_text(analysis_text)
                
        except json.JSONDecodeError as e:
            logger.error(f"JSON parse error: {e}")
            return self._extract_from_text(analysis_text)
        except Exception as e:
            logger.error(f"Error parsing OCR result: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _extract_from_text(self, text: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (fallback)
        """
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
            street_patterns = [
                r'—É–ª\.?\s*([–ê-–Ø–∞-—è\s]+)',
                r'—É–ª–∏—Ü–∞\s+([–ê-–Ø–∞-—è\s]+)',
                r'–ø—Ä–æ—Å–ø–µ–∫—Ç\s+([–ê-–Ø–∞-—è\s]+)',
                r'–ø—Ä\.?\s*([–ê-–Ø–∞-—è\s]+)',
                r'–ø–µ—Ä–µ—É–ª–æ–∫\s+([–ê-–Ø–∞-—è\s]+)',
                r'–ø–µ—Ä\.?\s*([–ê-–Ø–∞-—è\s]+)'
            ]
            
            house_patterns = [
                r'–¥–æ–º\s+(\d+[–∞-—è]?)',
                r'–¥\.?\s*(\d+[–∞-—è]?)',
                r'‚Ññ\s*(\d+[–∞-—è]?)',
                r'\b(\d{1,4}[–∞-—è]?)\b'
            ]
            
            streets = []
            houses = []
            
            for pattern in street_patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                streets.extend([match.strip() for match in matches])
            
            for pattern in house_patterns:
                matches = re.findall(pattern, text, re.IGNORECASE)
                houses.extend([match.strip() for match in matches])
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            streets = list(set(streets))
            houses = list(set(houses))
            
            logger.info(f"Text extraction found: streets={streets}, houses={houses}")
            
            return {
                'success': True,
                'source': 'mistral_ocr_text',
                'addresses_found': [],
                'street_names': streets,
                'house_numbers': houses,
                'districts': [],
                'cities': [],
                'all_text': [text],
                'coordinates': [],
                'confidence': 0.5,
                'raw_analysis': text
            }
            
        except Exception as e:
            logger.error(f"Error in text extraction: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def extract_coordinates_from_text(self, image_path: str) -> Optional[Dict[str, float]]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        """
        try:
            result = self.extract_text_and_addresses(image_path)
            
            if result.get('success') and result.get('coordinates'):
                # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                for coord_text in result['coordinates']:
                    coords = self._parse_coordinates(coord_text)
                    if coords:
                        return coords
            
            return None
            
        except Exception as e:
            logger.error(f"Error extracting coordinates: {e}")
            return None
    
    def _parse_coordinates(self, coord_text: str) -> Optional[Dict[str, float]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
        """
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            patterns = [
                r'(\d+\.?\d*)[¬∞\s]*[NS]?\s*[,\s]\s*(\d+\.?\d*)[¬∞\s]*[EW]?',
                r'lat[:\s]*(\d+\.?\d*)[,\s]*lon[:\s]*(\d+\.?\d*)',
                r'(\d{2}\.\d+)[,\s]+(\d{2}\.\d+)'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, coord_text, re.IGNORECASE)
                if match:
                    lat, lon = float(match.group(1)), float(match.group(2))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –†–æ—Å—Å–∏–∏
                    if 41 <= lat <= 82 and 19 <= lon <= 180:
                        return {'latitude': lat, 'longitude': lon}
            
            return None
            
        except Exception as e:
            logger.error(f"Error parsing coordinates: {e}")
            return None
