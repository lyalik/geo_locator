"""
–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã
"""

import json
import logging
import pandas as pd
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
import math
from datetime import datetime

logger = logging.getLogger(__name__)

class ReferenceDatabaseService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    
    def __init__(self):
        self.data_path = Path("uploads/data")
        self.reference_data = {}
        self.violation_types = {
            '00-022': '–û–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≥—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞–º',
            '18-001': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞'
        }
        self.total_records = 0
        self._load_reference_data()
    
    def _load_reference_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞"""
        try:
            logger.info("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–∞...")
            
            for json_file in self.data_path.glob("*.json"):
                logger.info(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º {json_file.name}")
                
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                if '00-022' in json_file.name:
                    violation_type = '00-022'
                elif '18-001' in json_file.name:
                    violation_type = '18-001'
                else:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
                period = '–ê–≤–≥—É—Å—Ç' if '–ê–≤–≥—É—Å—Ç' in json_file.name else '–ò—é–ª—å'
                
                key = f"{violation_type}_{period}"
                self.reference_data[key] = data
                
                count = data.get('count', 0)
                self.total_records += count
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ {violation_type} –∑–∞ {period}")
            
            logger.info(f"üéØ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {self.total_records} –∑–∞–ø–∏—Å–µ–π –∏–∑ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑—ã –∑–∞–∫–∞–∑—á–∏–∫–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑—ã: {e}")
    
    def _calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–º"""
        R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
        
        lat1_rad = math.radians(lat1)
        lon1_rad = math.radians(lon1)
        lat2_rad = math.radians(lat2)
        lon2_rad = math.radians(lon2)
        
        dlat = lat2_rad - lat1_rad
        dlon = lon2_rad - lon1_rad
        
        a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        
        return R * c
    
    def search_by_coordinates(self, latitude: float, longitude: float, 
                            radius_km: float = 0.1) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        try:
            results = []
            
            for key, data in self.reference_data.items():
                if 'results' not in data:
                    continue
                
                for record in data['results']:
                    ref_lat = record.get('latitude')
                    ref_lon = record.get('longitude')
                    
                    if ref_lat is None or ref_lon is None:
                        continue
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    distance = self._calculate_distance(latitude, longitude, ref_lat, ref_lon)
                    
                    if distance <= radius_km:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
                        issues = record.get('issues', [])
                        if issues:
                            issue = issues[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ
                            
                            result = {
                                'id': record.get('id'),
                                'violation_type': issue.get('label'),
                                'violation_name': self.violation_types.get(issue.get('label'), 'Unknown'),
                                'confidence': issue.get('score', 0),
                                'latitude': ref_lat,
                                'longitude': ref_lon,
                                'distance_km': distance,
                                'image_url': record.get('image'),
                                'bbox': issue.get('bbox', {}),
                                'camera_id': record.get('camera'),
                                'timestamp': record.get('create_timestamp'),
                                'source': 'reference_database'
                            }
                            results.append(result)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            results.sort(key=lambda x: x['distance_km'])
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π –≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ —Ä—è–¥–æ–º —Å {latitude}, {longitude}")
            return results[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ: {e}")
            return []
    
    def validate_detection(self, our_result: Dict) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ—Ç–∏–≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑—ã –∑–∞–∫–∞–∑—á–∏–∫–∞"""
        try:
            validation_result = {
                'validated': False,
                'confidence_match': False,
                'location_match': False,
                'type_match': False,
                'reference_records': [],
                'validation_score': 0.0,
                'message': ''
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if 'coordinates' not in our_result or not our_result['coordinates']:
                validation_result['message'] = '–ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏'
                return validation_result
            
            lat = our_result['coordinates'].get('latitude')
            lon = our_result['coordinates'].get('longitude')
            
            if not lat or not lon:
                validation_result['message'] = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
                return validation_result
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ
            reference_records = self.search_by_coordinates(lat, lon, radius_km=0.05)
            
            if reference_records:
                validation_result['reference_records'] = reference_records
                validation_result['location_match'] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                our_violations = our_result.get('violations', [])
                if our_violations:
                    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—à–∏—Ö —Ç–∏–ø–æ–≤ –∫ —Ç–∏–ø–∞–º –∑–∞–∫–∞–∑—á–∏–∫–∞
                    type_mapping = {
                        'building_violations': '00-022',
                        'construction_violations': '18-001',
                        '–ù–∞—Ä—É—à–µ–Ω–∏—è —Ñ–∞—Å–∞–¥–æ–≤': '00-022',
                        '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': '18-001'
                    }
                    
                    our_types = [type_mapping.get(v.get('category', ''), v.get('category', '')) 
                                for v in our_violations]
                    ref_types = [r.get('violation_type', '') for r in reference_records]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
                    if any(our_type in ref_types for our_type in our_types):
                        validation_result['type_match'] = True
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π score –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                score = 0
                if validation_result['location_match']:
                    score += 0.5
                if validation_result['type_match']:
                    score += 0.5
                
                validation_result['validation_score'] = score
                validation_result['validated'] = score >= 0.5
                validation_result['message'] = f'–ù–∞–π–¥–µ–Ω–æ {len(reference_records)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ'
            else:
                validation_result['message'] = '–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ –∑–∞–∫–∞–∑—á–∏–∫–∞'
            
            return validation_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {'validated': False, 'error': str(e)}
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            stats = {
                'total_records': self.total_records,
                'violation_types': {},
                'periods': {},
                'confidence_stats': {
                    'min': 1.0,
                    'max': 0.0,
                    'avg': 0.0
                }
            }
            
            all_confidences = []
            
            for key, data in self.reference_data.items():
                violation_type = key.split('_')[0]
                period = key.split('_')[1]
                count = data.get('count', 0)
                
                stats['violation_types'][violation_type] = stats['violation_types'].get(violation_type, 0) + count
                stats['periods'][period] = stats['periods'].get(period, 0) + count
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if 'results' in data:
                    for record in data['results'][:1000]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        issues = record.get('issues', [])
                        if issues:
                            confidence = issues[0].get('score', 0)
                            all_confidences.append(confidence)
            
            if all_confidences:
                stats['confidence_stats']['min'] = min(all_confidences)
                stats['confidence_stats']['max'] = max(all_confidences)
                stats['confidence_stats']['avg'] = sum(all_confidences) / len(all_confidences)
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_sample_records(self, violation_type: str = None, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–ø–∏—Å–µ–π –∏–∑ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑—ã"""
        try:
            samples = []
            
            for key, data in self.reference_data.items():
                if violation_type and violation_type not in key:
                    continue
                
                if 'results' in data:
                    for record in data['results'][:limit]:
                        issues = record.get('issues', [])
                        if issues:
                            issue = issues[0]
                            sample = {
                                'id': record.get('id'),
                                'violation_type': issue.get('label'),
                                'violation_name': self.violation_types.get(issue.get('label'), 'Unknown'),
                                'confidence': issue.get('score', 0),
                                'latitude': record.get('latitude'),
                                'longitude': record.get('longitude'),
                                'image_url': record.get('image'),
                                'bbox': issue.get('bbox', {}),
                                'timestamp': record.get('create_timestamp')
                            }
                            samples.append(sample)
                        
                        if len(samples) >= limit:
                            break
                
                if len(samples) >= limit:
                    break
            
            return samples
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
            return []
