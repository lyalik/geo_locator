"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
"""

import os
import json
import logging
from typing import List, Dict, Optional, Any, Tuple
from pathlib import Path
import cv2
import numpy as np
from PIL import Image, ImageStat
import hashlib

logger = logging.getLogger(__name__)

class ArchivePhotoService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º —Ñ–æ—Ç–æ –∑–¥–∞–Ω–∏–π."""
    
    def __init__(self, archive_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ.
        
        Args:
            archive_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ —Ñ–æ—Ç–æ
        """
        if archive_path is None:
            # –ü—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            current_dir = Path(__file__).parent.parent
            archive_path = current_dir / "data" / "archive_photos"
        
        self.archive_path = Path(archive_path)
        self.buildings_path = self.archive_path / "buildings"
        self.landmarks_path = self.archive_path / "landmarks"
        self.streets_path = self.archive_path / "streets"
        self.metadata_path = self.archive_path / "metadata"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for path in [self.buildings_path, self.landmarks_path, self.streets_path, self.metadata_path]:
            path.mkdir(parents=True, exist_ok=True)
        
        # –ö—ç—à –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        self._metadata_cache = {}
        self._load_metadata_cache()
        
        logger.info(f"üèõÔ∏è Archive Photo Service initialized with {len(self._metadata_cache)} photos")
    
    def _load_metadata_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞."""
        try:
            for metadata_file in self.metadata_path.glob("*.json"):
                try:
                    with open(metadata_file, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                        filename = metadata.get('filename')
                        if filename:
                            self._metadata_cache[filename] = metadata
                except Exception as e:
                    logger.warning(f"Failed to load metadata from {metadata_file}: {e}")
        except Exception as e:
            logger.error(f"Failed to load metadata cache: {e}")
    
    def find_similar_buildings(self, image_path: str, threshold: float = 0.7) -> List[Dict[str, Any]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –∑–¥–∞–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞
            threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.0-1.0)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ü–µ–Ω–∫–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏
        """
        try:
            if not os.path.exists(image_path):
                logger.warning(f"Image not found: {image_path}")
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            query_features = self._extract_image_features(image_path)
            if query_features is None:
                return []
            
            similar_buildings = []
            
            # –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            for category_path in [self.buildings_path, self.landmarks_path, self.streets_path]:
                if not category_path.exists():
                    continue
                    
                for image_file in category_path.glob("*.{jpg,jpeg,png,bmp}"):
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        archive_features = self._extract_image_features(str(image_file))
                        if archive_features is None:
                            continue
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
                        similarity = self._calculate_similarity(query_features, archive_features)
                        
                        if similarity >= threshold:
                            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            metadata = self.get_building_metadata(image_file.name)
                            
                            similar_buildings.append({
                                'filename': image_file.name,
                                'similarity_score': similarity,
                                'category': category_path.name,
                                'image_path': str(image_file),
                                'metadata': metadata
                            })
                    
                    except Exception as e:
                        logger.debug(f"Error processing {image_file}: {e}")
                        continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
            similar_buildings.sort(key=lambda x: x['similarity_score'], reverse=True)
            
            logger.info(f"üîç Found {len(similar_buildings)} similar buildings (threshold: {threshold})")
            return similar_buildings[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-10
            
        except Exception as e:
            logger.error(f"Error finding similar buildings: {e}")
            return []
    
    def get_building_metadata(self, filename: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è.
        
        Args:
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None
        """
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if filename in self._metadata_cache:
                return self._metadata_cache[filename]
            
            # –ò—â–µ–º JSON —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            metadata_file = self.metadata_path / f"{Path(filename).stem}.json"
            
            if metadata_file.exists():
                with open(metadata_file, 'r', encoding='utf-8') as f:
                    metadata = json.load(f)
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
                    self._metadata_cache[filename] = metadata
                    return metadata
            
            logger.debug(f"No metadata found for {filename}")
            return None
            
        except Exception as e:
            logger.error(f"Error getting metadata for {filename}: {e}")
            return None
    
    def search_by_architectural_features(self, features: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –∑–¥–∞–Ω–∏–π –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º.
        
        Args:
            features: –°–ª–æ–≤–∞—Ä—å —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–¥–∞–Ω–∏–π
        """
        try:
            matching_buildings = []
            
            for filename, metadata in self._metadata_cache.items():
                match_score = 0.0
                total_features = 0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π —Å—Ç–∏–ª—å
                if 'architectural_style' in features and 'architectural_style' in metadata:
                    if features['architectural_style'].lower() in metadata['architectural_style'].lower():
                        match_score += 0.3
                    total_features += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–¥–∞–Ω–∏—è
                if 'building_type' in features and 'building_type' in metadata:
                    if features['building_type'].lower() in metadata['building_type'].lower():
                        match_score += 0.3
                    total_features += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–≥–∏
                if 'tags' in features and 'tags' in metadata:
                    feature_tags = set(tag.lower() for tag in features['tags'])
                    metadata_tags = set(tag.lower() for tag in metadata['tags'])
                    
                    if feature_tags & metadata_tags:  # –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                        match_score += 0.4
                    total_features += 1
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if total_features > 0 and match_score > 0:
                    final_score = match_score / total_features if total_features > 0 else 0
                    
                    matching_buildings.append({
                        'filename': filename,
                        'match_score': final_score,
                        'metadata': metadata
                    })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            matching_buildings.sort(key=lambda x: x['match_score'], reverse=True)
            
            logger.info(f"üèóÔ∏è Found {len(matching_buildings)} buildings matching architectural features")
            return matching_buildings
            
        except Exception as e:
            logger.error(f"Error searching by architectural features: {e}")
            return []
    
    def get_coordinates_from_similar_buildings(self, image_path: str, threshold: float = 0.8) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π –∏–∑ –∞—Ä—Ö–∏–≤–∞.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            similar_buildings = self.find_similar_buildings(image_path, threshold)
            
            if not similar_buildings:
                return None
            
            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –ø–æ—Ö–æ–∂–µ–µ –∑–¥–∞–Ω–∏–µ
            best_match = similar_buildings[0]
            metadata = best_match.get('metadata', {})
            
            if 'coordinates' in metadata:
                return {
                    'latitude': metadata['coordinates']['latitude'],
                    'longitude': metadata['coordinates']['longitude'],
                    'source': 'archive_photo_match',
                    'confidence': best_match['similarity_score'],
                    'matched_building': {
                        'filename': best_match['filename'],
                        'category': best_match['category'],
                        'description': metadata.get('description', ''),
                        'address': metadata.get('address', '')
                    }
                }
            
            return None
            
        except Exception as e:
            logger.error(f"Error getting coordinates from similar buildings: {e}")
            return None
    
    def _extract_image_features(self, image_path: str) -> Optional[np.ndarray]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            –ú–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–ª–∏ None
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = cv2.imread(image_path)
            if image is None:
                return None
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
            image = cv2.resize(image, (256, 256))
            
            features = []
            
            # 1. –¶–≤–µ—Ç–æ–≤—ã–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            for i in range(3):  # BGR –∫–∞–Ω–∞–ª—ã
                hist = cv2.calcHist([image], [i], None, [32], [0, 256])
                features.extend(hist.flatten())
            
            # 2. –¢–µ–∫—Å—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–ø—Ä–æ—Å—Ç—ã–µ)
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã
            grad_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
            grad_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
            
            features.extend([
                np.mean(grad_x),
                np.std(grad_x),
                np.mean(grad_y),
                np.std(grad_y)
            ])
            
            # 3. –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features.extend([
                np.mean(gray),
                np.std(gray),
                np.median(gray)
            ])
            
            return np.array(features, dtype=np.float32)
            
        except Exception as e:
            logger.debug(f"Error extracting features from {image_path}: {e}")
            return None
    
    def _calculate_similarity(self, features1: np.ndarray, features2: np.ndarray) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–±–æ—Ä–∞–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
        
        Args:
            features1: –ü–µ—Ä–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features2: –í—Ç–æ—Ä–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            
        Returns:
            –û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –æ—Ç 0.0 –¥–æ 1.0
        """
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            norm1 = np.linalg.norm(features1)
            norm2 = np.linalg.norm(features2)
            
            if norm1 == 0 or norm2 == 0:
                return 0.0
            
            # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
            similarity = np.dot(features1, features2) / (norm1 * norm2)
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 1]
            similarity = (similarity + 1) / 2
            
            return max(0.0, min(1.0, similarity))
            
        except Exception as e:
            logger.debug(f"Error calculating similarity: {e}")
            return 0.0
    
    def add_building_to_archive(self, image_path: str, metadata: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–¥–∞–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤.
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
        """
        try:
            if not os.path.exists(image_path):
                logger.error(f"Image file not found: {image_path}")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            building_type = metadata.get('building_type', 'buildings')
            if building_type in ['landmark', 'monument']:
                category_path = self.landmarks_path
            elif building_type in ['street', 'intersection']:
                category_path = self.streets_path
            else:
                category_path = self.buildings_path
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            original_name = Path(image_path).name
            filename = f"{hashlib.md5(original_name.encode()).hexdigest()[:8]}_{original_name}"
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            target_image_path = category_path / filename
            import shutil
            shutil.copy2(image_path, target_image_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata['filename'] = filename
            metadata_file = self.metadata_path / f"{Path(filename).stem}.json"
            
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self._metadata_cache[filename] = metadata
            
            logger.info(f"‚úÖ Added building to archive: {filename}")
            return True
            
        except Exception as e:
            logger.error(f"Error adding building to archive: {e}")
            return False
    
    def get_archive_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—Ä—Ö–∏–≤–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            stats = {
                'total_photos': len(self._metadata_cache),
                'categories': {
                    'buildings': len(list(self.buildings_path.glob("*.{jpg,jpeg,png,bmp}"))),
                    'landmarks': len(list(self.landmarks_path.glob("*.{jpg,jpeg,png,bmp}"))),
                    'streets': len(list(self.streets_path.glob("*.{jpg,jpeg,png,bmp}")))
                },
                'architectural_styles': {},
                'building_types': {}
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            for metadata in self._metadata_cache.values():
                # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏
                style = metadata.get('architectural_style', 'unknown')
                stats['architectural_styles'][style] = stats['architectural_styles'].get(style, 0) + 1
                
                # –¢–∏–ø—ã –∑–¥–∞–Ω–∏–π
                building_type = metadata.get('building_type', 'unknown')
                stats['building_types'][building_type] = stats['building_types'].get(building_type, 0) + 1
            
            return stats
            
        except Exception as e:
            logger.error(f"Error getting archive statistics: {e}")
            return {}
