import React, { useState, useEffect } from 'react';
import {
  Box, Grid, Card, CardContent, Typography, Button, Tab, Tabs,
  Chip, CircularProgress, Paper, Dialog, DialogTitle, DialogContent, DialogActions
} from '@mui/material';
import {
  Map as MapIcon, Upload as UploadIcon, Analytics as AnalyticsIcon,
  Warning as WarningIcon, CheckCircle as CheckIcon, Schedule as ScheduleIcon,
  GetApp as DownloadIcon, Refresh as RefreshIcon,
  Home as PropertyIcon, LocationCity as UrbanIcon, Satellite as SatelliteIcon,
  TextFields as OCRIcon
} from '@mui/icons-material';
import InteractiveMap from './InteractiveMap';
import ViolationUploader from './ViolationUploader';
import AnalyticsDashboard from './AnalyticsDashboard';
import PropertyAnalyzer from './PropertyAnalyzer';
import UrbanAnalyzer from './UrbanAnalyzer';
import SatelliteAnalyzer from './SatelliteAnalyzer';
import OCRAnalyzer from './OCRAnalyzer';
import { violations } from '../services/api';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [violationsData, setViolationsData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedViolation, setSelectedViolation] = useState(null);
  const [showViolationDialog, setShowViolationDialog] = useState(false);
  const [stats, setStats] = useState({
    total: 0,
    pending: 0,
    processed: 0,
    errors: 0,
    withCoordinates: 0,
    withoutCoordinates: 0
  });
  const [selectedCoordinates, setSelectedCoordinates] = useState(null);

  useEffect(() => {
    loadViolations();
  }, []);

  const loadViolations = async () => {
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
      console.log('üîÑ Loading violations from database...');
      const response = await violations.getList();
      
      let dbViolations = [];
      let allDbViolations = [];
      
      if (response.data) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ response.data
        const rawViolations = Array.isArray(response.data) ? response.data : (response.data.data || []);
        console.log('‚úÖ Loaded violations from database:', rawViolations.length);
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        allDbViolations = rawViolations.map(result => ({
          id: result.violation_id || Math.random().toString(),
          category: result.violations?.[0]?.category || 'unknown',
          confidence: result.violations?.[0]?.confidence || 0,
          lat: result.location?.coordinates?.latitude,
          lon: result.location?.coordinates?.longitude,
          address: result.location?.address?.formatted || result.location?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
          created_at: result.metadata?.timestamp || new Date().toISOString(),
          status: 'processed',
          image_path: result.image_path,
          source: result.violations?.[0]?.source || 'google_vision',
          description: result.violations?.[0]?.category || '',
          severity: 'medium',
          bbox: result.violations?.[0]?.bbox,
          has_coordinates: !!(result.location?.coordinates?.latitude && result.location?.coordinates?.longitude)
        }));
        
        // –î–ª—è –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        dbViolations = allDbViolations.filter(v => v.has_coordinates);
        
        console.log('üìç Violations with coordinates:', dbViolations.length);
        console.log('üìä Total violations:', allDbViolations.length);
      } else {
        console.warn('‚ö†Ô∏è Failed to load violations from database:', response.data);
      }
      
      setViolationsData(dbViolations);
      
      // Calculate stats from ALL violations (not just those with coordinates)
      const withCoordinates = allDbViolations.filter(v => v.has_coordinates).length;
      const withoutCoordinates = allDbViolations.length - withCoordinates;
      
      const newStats = {
        total: allDbViolations.length,
        pending: allDbViolations.filter(v => v.status === 'pending').length,
        processed: allDbViolations.filter(v => v.status === 'processed').length,
        errors: allDbViolations.filter(v => v.status === 'error').length,
        withCoordinates: withCoordinates,
        withoutCoordinates: withoutCoordinates
      };
      setStats(newStats);
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π:', {
        '–í—Å–µ–≥–æ': newStats.total,
        '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ': newStats.processed,
        '–í –æ–∂–∏–¥–∞–Ω–∏–∏': newStats.pending,
        '–û—à–∏–±–∫–∏': newStats.errors,
        '–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏': newStats.withCoordinates,
        '–ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç': newStats.withoutCoordinates
      });
      
    } catch (error) {
      console.error('Error loading violations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleViolationClick = (violation) => {
    setSelectedViolation(violation);
    setShowViolationDialog(true);
  };

  const handleUploadComplete = (results) => {
    console.log('Dashboard handleUploadComplete called with:', results);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!window.GLOBAL_SINGLE_RESULTS) {
      window.GLOBAL_SINGLE_RESULTS = [];
    }
    if (!window.GLOBAL_BATCH_RESULTS) {
      window.GLOBAL_BATCH_RESULTS = [];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    try {
      const globalData = {
        single: window.GLOBAL_SINGLE_RESULTS,
        batch: window.GLOBAL_BATCH_RESULTS,
        timestamp: Date.now()
      };
      localStorage.setItem('geo_locator_violations', JSON.stringify(globalData));
    } catch (error) {
      console.warn('Failed to save violations to localStorage:', error);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ç–∞–∫ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultsArray = Array.isArray(results) ? results : [results];
    
    resultsArray.forEach(result => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const resultViolations = result.violations || [];
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
      if (resultViolations.length > 0) {
        resultViolations.forEach(violation => {
          const normalizedResult = {
            id: `${result.violation_id || result.id || Date.now()}_${violation.category || 'unknown'}`,
            category: violation.category || violation.type || 'unknown',
            confidence: violation.confidence || 0,
            lat: result.location?.coordinates?.latitude || result.lat,
            lon: result.location?.coordinates?.longitude || result.lon,
            address: result.location?.address?.formatted || result.location?.address || result.address,
            created_at: result.uploadTime || new Date().toISOString(),
            status: 'processed',
            image_path: result.image || result.annotated_image_path || result.image_path,
            source: violation.source || result.source || 'upload',
            description: violation.description || result.description || '',
            severity: violation.severity || result.severity || 'medium',
            violations: [violation],
            metadata: result.metadata || {},
            fileName: result.fileName
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          window.GLOBAL_SINGLE_RESULTS.push(normalizedResult);
          window.GLOBAL_BATCH_RESULTS.push(normalizedResult);
          
          console.log('Added violation to global storage:', normalizedResult);
        });
      }
      // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    });

    console.log('Global storage now has:', window.GLOBAL_SINGLE_RESULTS.length, 'results');
    
    // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    console.log('üíæ New violation automatically saved to database via API');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      loadViolations();
    }, 1000);
  };

  const formatCategory = (category) => {
    const categories = {
      illegal_construction: '–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
      unauthorized_signage: '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      blocked_entrance: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ö–æ–¥',
      improper_waste_disposal: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤',
      unauthorized_modification: '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
    };
    return categories[category] || category;
  };

  const tabs = [
    { label: '–ö–∞—Ä—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π', icon: <MapIcon />, component: <InteractiveMap violations={violationsData} onViolationClick={handleViolationClick} onCoordinateSelect={setSelectedCoordinates} height={600} /> },
    { label: '–ê–Ω–∞–ª–∏–∑ —Å –ò–ò', icon: <UploadIcon />, component: <ViolationUploader onUploadComplete={handleUploadComplete} /> },
    { label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: <AnalyticsIcon />, component: <AnalyticsDashboard violations={violationsData} /> },
    { label: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', icon: <PropertyIcon />, component: <PropertyAnalyzer coordinates={selectedCoordinates} onPropertySelect={(property) => { if (property.coordinates) setSelectedCoordinates({lat: property.coordinates[0], lon: property.coordinates[1]}); }} /> },
    { label: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç', icon: <UrbanIcon />, component: <UrbanAnalyzer coordinates={selectedCoordinates} /> },
    { label: '–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', icon: <SatelliteIcon />, component: <SatelliteAnalyzer coordinates={selectedCoordinates} /> },
    { label: 'OCR –∞–Ω–∞–ª–∏–∑', icon: <OCRIcon />, component: <OCRAnalyzer /> }
  ];

  const getStatusIcon = (status) => {
    switch (status) {
      case 'processed': return <CheckIcon color="success" />;
      case 'error': return <WarningIcon color="error" />;
      case 'pending': return <ScheduleIcon color="action" />;
      default: return <ScheduleIcon color="action" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'processed': return 'success';
      case 'error': return 'error';
      case 'pending': return 'warning';
      default: return 'default';
    }
  };

  const TabPanel = ({ children, value, index }) => (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4">
          –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        </Typography>
        <Button
          startIcon={<RefreshIcon />}
          onClick={loadViolations}
          variant="outlined"
        >
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </Box>

      {/* Stats Cards */}
      <Grid container spacing={3} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
              </Typography>
              <Typography variant="h4">
                {stats.total}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
              </Typography>
              <Typography variant="h4" color="success.main">
                {stats.processed}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –í –æ–∂–∏–¥–∞–Ω–∏–∏
              </Typography>
              <Typography variant="h4" color="warning.main">
                {stats.pending}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –û—à–∏–±–∫–∏
              </Typography>
              <Typography variant="h4" color="error.main">
                {stats.errors}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Tabs */}
      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={activeTab}
          onChange={(e, newValue) => setActiveTab(newValue)}
          variant="fullWidth"
        >
          {tabs.map((tab, index) => (
            <Tab key={index} icon={tab.icon} label={tab.label} />
          ))}
        </Tabs>
      </Paper>

      {/* Tab Panels */}
      {tabs.map((tab, index) => (
        <TabPanel key={index} value={activeTab} index={index}>
          <Box sx={{ height: '600px', width: '100%' }}>
            {tab.component}
          </Box>
        </TabPanel>
      ))}

      {/* Violation Detail Dialog */}
      <Dialog
        open={showViolationDialog}
        onClose={() => setShowViolationDialog(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          –î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è
          {selectedViolation && (
            <Chip
              label={getStatusColor(selectedViolation.status)}
              color={getStatusColor(selectedViolation.status)}
              sx={{ ml: 2 }}
            />
          )}
        </DialogTitle>
        <DialogContent>
          {selectedViolation && (
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                {selectedViolation.image_path && (
                  <img
                    src={selectedViolation.image_path}
                    alt="–ù–∞—Ä—É—à–µ–Ω–∏–µ"
                    style={{ width: '100%', maxHeight: 300, objectFit: 'cover' }}
                  />
                )}
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="h6" gutterBottom>
                  {formatCategory(selectedViolation.category)}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–ê–¥—Ä–µ—Å:</strong> {typeof selectedViolation.address === 'object' ? 
                    selectedViolation.address.formatted || JSON.stringify(selectedViolation.address) : 
                    selectedViolation.address}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> {selectedViolation.lat}, {selectedViolation.lon}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {(selectedViolation.confidence * 100).toFixed(1)}%
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–î–∞—Ç–∞:</strong> {new Date(selectedViolation.created_at).toLocaleString('ru-RU')}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–°—Ç–∞—Ç—É—Å:</strong> 
                  <Chip
                    label={selectedViolation.status}
                    color={getStatusColor(selectedViolation.status)}
                    size="small"
                    sx={{ ml: 1 }}
                  />
                </Typography>
              </Grid>
            </Grid>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowViolationDialog(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          <Button startIcon={<DownloadIcon />} variant="outlined">
            –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Dashboard;
