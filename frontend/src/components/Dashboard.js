import React, { useState, useEffect } from 'react';
import {
  Box, Grid, Card, CardContent, Typography, Button, Tab, Tabs,
  CircularProgress, Paper, Alert, Dialog, DialogTitle, DialogContent, 
  DialogActions, Chip, Snackbar
} from '@mui/material';
import {
  Map as MapIcon, Upload as UploadIcon, Analytics as AnalyticsIcon,
  Schedule as ScheduleIcon, GetApp as DownloadIcon, Refresh as RefreshIcon,
  Home as PropertyIcon, LocationCity as UrbanIcon, BatchPrediction as BatchPredictionIcon,
  AdminPanelSettings as AdminIcon,
  School as SchoolIcon,
  TextFields as OCRIcon, PhotoLibrary as MultiPhotoIcon,
  Satellite as SatelliteIcon
} from '@mui/icons-material';
import InteractiveMap from './InteractiveMap';
import ViolationUploader from './ViolationUploader';
import AnalyticsDashboard from './AnalyticsDashboard';
import PropertyAnalyzer from './PropertyAnalyzer';
import UrbanAnalyzer from './UrbanAnalyzer';
import SatelliteAnalyzer from './SatelliteAnalyzer';
import OCRAnalyzer from './OCRAnalyzer';
import VideoAnalyzer from './VideoAnalyzer';
import BatchAnalyzer from './BatchAnalyzer';
import ModelTraining from './ModelTraining';
import MultiPhotoAnalyzer from './MultiPhotoAnalyzer';
import ViolationEditDialog from './ViolationEditDialog';
import AdminPanel from './AdminPanel';
import { violations } from '../services/api';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState(0);
  const [violationsData, setViolationsData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedViolation, setSelectedViolation] = useState(null);
  const [showViolationDialog, setShowViolationDialog] = useState(false);
  const [stats, setStats] = useState({
    total: 0,
    pending: 0,
    processed: 0,
    errors: 0,
    withCoordinates: 0,
    withoutCoordinates: 0
  });
  const [selectedCoordinates, setSelectedCoordinates] = useState(null);
  const [showEditDialog, setShowEditDialog] = useState(false);
  const [editingViolation, setEditingViolation] = useState(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  useEffect(() => {
    loadViolations();
  }, []);

  const loadViolations = async () => {
    setLoading(true);
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏–∑ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ API
      // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      console.log('üîÑ Loading violations from database...');
      const response = await violations.getList();
      
      let dbViolations = [];
      let allDbViolations = [];
      
      if (response.data) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ response.data
        const rawViolations = Array.isArray(response.data) ? response.data : (response.data.data || []);
        console.log('‚úÖ Loaded violations from database:', rawViolations.length);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ (–Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        const realViolations = rawViolations.filter(result => 
          result.violations && 
          result.violations.length > 0 && 
          result.violations.some(v => v.category && v.category !== 'unknown')
        );
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        allDbViolations = realViolations.map(result => ({
          id: result.violation_id || Math.random().toString(),
          category: result.violations?.[0]?.category || 'unknown',
          confidence: result.violations?.[0]?.confidence || 0,
          lat: result.location?.coordinates?.latitude,
          lon: result.location?.coordinates?.longitude,
          address: result.location?.address?.formatted || result.location?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω',
          created_at: result.metadata?.timestamp || new Date().toISOString(),
          status: 'processed',
          image_path: result.image_path,
          source: result.violations?.[0]?.source || 'google_vision',
          description: result.violations?.[0]?.category || '',
          severity: 'medium',
          bbox: result.violations?.[0]?.bbox,
          has_coordinates: !!(result.location?.coordinates?.latitude && result.location?.coordinates?.longitude)
        }));
        
        // –î–ª—è –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        dbViolations = allDbViolations.filter(v => v.has_coordinates);
        
        console.log('üìç Real violations with coordinates:', dbViolations.length);
        console.log('üìä Total real violations:', allDbViolations.length);
      } else {
        console.warn('‚ö†Ô∏è Failed to load violations from database:', response.data);
      }
      
      setViolationsData(dbViolations);
      
      // Calculate stats from ALL violations (not just those with coordinates)
      const withCoordinates = allDbViolations.filter(v => v.has_coordinates).length;
      const withoutCoordinates = allDbViolations.length - withCoordinates;
      
      const newStats = {
        total: allDbViolations.length,
        pending: allDbViolations.filter(v => v.status === 'pending').length,
        processed: allDbViolations.filter(v => v.status === 'processed').length,
        errors: allDbViolations.filter(v => v.status === 'error').length,
        withCoordinates: withCoordinates,
        withoutCoordinates: withoutCoordinates
      };
      setStats(newStats);
      
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π:', {
        '–í—Å–µ–≥–æ': newStats.total,
        '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ': newStats.processed,
        '–í –æ–∂–∏–¥–∞–Ω–∏–∏': newStats.pending,
        '–û—à–∏–±–∫–∏': newStats.errors,
        '–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏': newStats.withCoordinates,
        '–ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç': newStats.withoutCoordinates
      });
      
    } catch (error) {
      console.error('Error loading violations:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleViolationClick = (violation) => {
    setSelectedViolation(violation);
    setShowViolationDialog(true);
  };

  const handleEditViolation = (violation) => {
    setEditingViolation(violation);
    setShowEditDialog(true);
    setShowViolationDialog(false);
  };

  const handleUpdateViolation = async (violationId, updateData) => {
    try {
      const response = await violations.update(violationId, updateData);
      if (response.data.success) {
        setSnackbar({ open: true, message: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', severity: 'success' });
        loadViolations(); // Reload data
      }
    } catch (error) {
      setSnackbar({ open: true, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è', severity: 'error' });
      throw error;
    }
  };

  const handleDeleteViolation = async (violationId) => {
    try {
      const response = await violations.delete(violationId);
      if (response.data.success) {
        setSnackbar({ open: true, message: '–ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ', severity: 'success' });
        loadViolations(); // Reload data
      }
    } catch (error) {
      setSnackbar({ open: true, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è', severity: 'error' });
      throw error;
    }
  };

  const handleUploadComplete = (results) => {
    console.log('Dashboard handleUploadComplete called with:', results);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!window.GLOBAL_SINGLE_RESULTS) {
      window.GLOBAL_SINGLE_RESULTS = [];
    }
    if (!window.GLOBAL_BATCH_RESULTS) {
      window.GLOBAL_BATCH_RESULTS = [];
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    try {
      const globalData = {
        single: window.GLOBAL_SINGLE_RESULTS,
        batch: window.GLOBAL_BATCH_RESULTS,
        timestamp: Date.now()
      };
      localStorage.setItem('geo_locator_violations', JSON.stringify(globalData));
    } catch (error) {
      console.warn('Failed to save violations to localStorage:', error);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ç–∞–∫ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultsArray = Array.isArray(results) ? results : [results];
    
    resultsArray.forEach(result => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const resultViolations = result.violations || [];
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
      if (resultViolations.length > 0) {
        resultViolations.forEach(violation => {
          const normalizedResult = {
            id: `${result.violation_id || result.id || Date.now()}_${violation.category || 'unknown'}`,
            category: violation.category || violation.type || 'unknown',
            confidence: violation.confidence || 0,
            lat: result.location?.coordinates?.latitude || result.lat,
            lon: result.location?.coordinates?.longitude || result.lon,
            address: result.location?.address?.formatted || result.location?.address || result.address,
            created_at: result.uploadTime || new Date().toISOString(),
            status: 'processed',
            image_path: result.image || result.annotated_image_path || result.image_path,
            source: violation.source || result.source || 'upload',
            description: violation.description || result.description || '',
            severity: violation.severity || result.severity || 'medium',
            violations: [violation],
            metadata: result.metadata || {},
            fileName: result.fileName
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          window.GLOBAL_SINGLE_RESULTS.push(normalizedResult);
          window.GLOBAL_BATCH_RESULTS.push(normalizedResult);
          
          console.log('Added violation to global storage:', normalizedResult);
        });
      }
      // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    });

    console.log('Global storage now has:', window.GLOBAL_SINGLE_RESULTS.length, 'results');
    
    // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    console.log('üíæ New violation automatically saved to database via API');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    setTimeout(() => {
      loadViolations();
    }, 1000);
  };

  const formatCategory = (category) => {
    const categories = {
      illegal_construction: '–ù–µ–∑–∞–∫–æ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
      unauthorized_signage: '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      blocked_entrance: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—Ö–æ–¥',
      improper_waste_disposal: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Ö–æ–¥–æ–≤',
      unauthorized_modification: '–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
    };
    return categories[category] || category;
  };

  const tabs = [
    { 
      label: '–ö–∞—Ä—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π', 
      icon: <MapIcon />, 
      description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≤—Å–µ—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É',
      component: <InteractiveMap violations={violationsData} onViolationClick={handleViolationClick} onCoordinateSelect={setSelectedCoordinates} height={600} /> 
    },
    { 
      label: '–ê–Ω–∞–ª–∏–∑ —Å –ò–ò', 
      icon: <UploadIcon />, 
      description: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò (AI API + YOLO) –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä–µ–∫—Ç–æ–≤',
      component: <ViolationUploader onUploadComplete={handleUploadComplete} /> 
    },
    { 
      label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 
      icon: <AnalyticsIcon />, 
      description: '–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º, —Ç—Ä–µ–Ω–¥–∞–º, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–∞–Ω–Ω—ã—Ö',
      component: <AnalyticsDashboard violations={violationsData} /> 
    },
    { 
      label: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', 
      icon: <PropertyIcon />, 
      description: '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö API (–†–æ—Å—Ä–µ–µ—Å—Ç—Ä, –î–æ–º–ö–ª–∏–∫) –∏ OpenStreetMap –¥–∞–Ω–Ω—ã—Ö',
      component: <PropertyAnalyzer coordinates={selectedCoordinates} onPropertySelect={(property) => { if (property.coordinates) setSelectedCoordinates({lat: property.coordinates[0], lon: property.coordinates[1]}); }} /> 
    },
    { 
      label: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç', 
      icon: <UrbanIcon />, 
      description: '–ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–æ–¥—Å–∫–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–æ—Å–µ—Ä–≤–∏—Å–æ–≤',
      component: <UrbanAnalyzer coordinates={selectedCoordinates} /> 
    },
    { 
      label: '–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑', 
      icon: <SatelliteIcon />, 
      description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –æ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–†–æ—Å–∫–æ—Å–º–æ—Å, –Ø–Ω–¥–µ–∫—Å –°–ø—É—Ç–Ω–∏–∫) —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π',
      component: <SatelliteAnalyzer coordinates={selectedCoordinates} /> 
    },
    { 
      label: 'OCR –∞–Ω–∞–ª–∏–∑', 
      icon: <OCRIcon />, 
      description: '–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑ –≤—ã–≤–µ—Å–æ–∫, —Ç–∞–±–ª–∏—á–µ–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
      component: <OCRAnalyzer /> 
    },
    { 
      label: '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç', 
      icon: <ScheduleIcon />, 
      description: '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–æ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      component: <VideoAnalyzer /> 
    },
    { 
      label: '–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑', 
      icon: <UploadIcon />, 
      description: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ',
      component: <BatchAnalyzer /> 
    },
    {
      label: '–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞',
      icon: <BatchPredictionIcon />,
      description: '–ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
      component: <BatchAnalyzer />
    },
    {
      label: '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π',
      icon: <SchoolIcon />,
      description: '–î–æ–æ–±—É—á–µ–Ω–∏–µ YOLO –∏ Mistral AI –Ω–∞ –≥–æ—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  (71,895 –∑–∞–ø–∏—Å–µ–π)',
      component: <ModelTraining />
    },
    { 
      label: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 
      icon: <AnalyticsIcon />, 
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º',
      component: <AdminPanel />
    }
  ];


  const getStatusColor = (status) => {
    switch (status) {
      case 'processed': return 'success';
      case 'error': return 'error';
      case 'pending': return 'warning';
      default: return 'default';
    }
  };

  const TabPanel = ({ children, value, index }) => (
    <div hidden={value !== index}>
      {value === index && <Box sx={{ py: 3 }}>{children}</Box>}
    </div>
  );

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4">
          –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        </Typography>
        <Button
          startIcon={<RefreshIcon />}
          onClick={loadViolations}
          variant="outlined"
        >
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </Box>

      {/* Stats Cards */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={6} md={2}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –í—Å–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
              </Typography>
              <Typography variant="h4">
                {stats.total}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={2}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ
              </Typography>
              <Typography variant="h4" color="success.main">
                {stats.processed}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={2}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –í –æ–∂–∏–¥–∞–Ω–∏–∏
              </Typography>
              <Typography variant="h4" color="warning.main">
                {stats.pending}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={2}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –û—à–∏–±–∫–∏
              </Typography>
              <Typography variant="h4" color="error.main">
                {stats.errors}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={2}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
              </Typography>
              <Typography variant="h4" color="primary.main">
                {stats.withCoordinates}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
        <Grid item xs={12} sm={6} md={2}>
          <Card>
            <CardContent>
              <Typography color="textSecondary" gutterBottom>
                –ë–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
              </Typography>
              <Typography variant="h4" color="text.secondary">
                {stats.withoutCoordinates}
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Tabs */}
      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={activeTab}
          onChange={(e, newValue) => setActiveTab(newValue)}
          variant="fullWidth"
        >
          {tabs.map((tab, index) => (
            <Tab key={index} label={tab.label} icon={tab.icon} />
          ))}
        </Tabs>
      </Paper>

      {/* Current Tab Description */}
      {tabs[activeTab] && (
        <Alert severity="info" sx={{ mb: 3 }}>
          <Typography variant="body2">
            <strong>{tabs[activeTab].label}:</strong> {tabs[activeTab].description}
          </Typography>
        </Alert>
      )}

      {/* Tab Panels */}
      {tabs.map((tab, index) => (
        <TabPanel key={index} value={activeTab} index={index}>
          <Box sx={{ height: '600px', width: '100%' }}>
            {tab.component}
          </Box>
        </TabPanel>
      ))}

      {/* Violation Detail Dialog */}
      <Dialog
        open={showViolationDialog}
        onClose={() => setShowViolationDialog(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          <Box display="flex" alignItems="center" gap={2}>
            –î–µ—Ç–∞–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è
            {selectedViolation && (
              <Chip
                label={getStatusColor(selectedViolation.status)}
                color={getStatusColor(selectedViolation.status)}
              />
            )}
          </Box>
        </DialogTitle>
        <DialogContent>
          {selectedViolation && (
            <Grid container spacing={2}>
              <Grid item xs={12} md={6}>
                {selectedViolation.image_path && (
                  <img
                    src={selectedViolation.image_path}
                    alt="–ù–∞—Ä—É—à–µ–Ω–∏–µ"
                    style={{ width: '100%', maxHeight: 300, objectFit: 'cover' }}
                  />
                )}
              </Grid>
              <Grid item xs={12} md={6}>
                <Typography variant="h6" gutterBottom>
                  {formatCategory(selectedViolation.category)}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–ê–¥—Ä–µ—Å:</strong> {typeof selectedViolation.address === 'object' ? 
                    selectedViolation.address.formatted || JSON.stringify(selectedViolation.address) : 
                    selectedViolation.address}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> {selectedViolation.lat}, {selectedViolation.lon}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> {(selectedViolation.confidence * 100).toFixed(1)}%
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–î–∞—Ç–∞:</strong> {new Date(selectedViolation.created_at).toLocaleString('ru-RU')}
                </Typography>
                <Typography variant="body1" paragraph>
                  <strong>–°—Ç–∞—Ç—É—Å:</strong> 
                  <Chip
                    label={selectedViolation.status}
                    color={getStatusColor(selectedViolation.status)}
                    size="small"
                    sx={{ ml: 1 }}
                  />
                </Typography>
              </Grid>
            </Grid>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowViolationDialog(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
          <Button 
            onClick={() => handleEditViolation(selectedViolation)}
            variant="outlined"
            color="primary"
          >
            –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
          </Button>
          <Button startIcon={<DownloadIcon />} variant="outlined">
            –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
          </Button>
        </DialogActions>
      </Dialog>

      {/* Edit Violation Dialog */}
      <ViolationEditDialog
        open={showEditDialog}
        onClose={() => {
          setShowEditDialog(false);
          setEditingViolation(null);
        }}
        violation={editingViolation}
        onUpdate={handleUpdateViolation}
        onDelete={handleDeleteViolation}
      />

      {/* Snackbar for notifications */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert
          onClose={() => setSnackbar({ ...snackbar, open: false })}
          severity={snackbar.severity}
          sx={{ width: '100%' }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Dashboard;
