import React, { useState, useCallback } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  LinearProgress,
  Alert,
  Grid,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  Tooltip,
  Divider,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper
} from '@mui/material';
import {
  CloudUpload as UploadIcon,
  VideoFile as VideoIcon,
  Image as ImageIcon,
  Delete as DeleteIcon,
  PlayArrow as PlayIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  Analytics as AnalyticsIcon,
  ExpandMore as ExpandMoreIcon,
  Download as DownloadIcon,
  Map as MapIcon
} from '@mui/icons-material';
import { useDropzone } from 'react-dropzone';
import { useSnackbar } from 'notistack';
import { videoAnalysis, imageAnalysis } from '../services/api';
import InteractiveResultsMap from './InteractiveResultsMap';

const BatchAnalyzer = () => {
  const { enqueueSnackbar } = useSnackbar();
  const [files, setFiles] = useState([]);
  const [locationHint, setLocationHint] = useState('');
  const [frameInterval, setFrameInterval] = useState(30);
  const [maxFrames, setMaxFrames] = useState(10);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState([]);
  const [currentAnalyzing, setCurrentAnalyzing] = useState(null);
  const [overallProgress, setOverallProgress] = useState(0);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  const onDrop = useCallback((acceptedFiles) => {
    const newFiles = acceptedFiles.map((file, index) => ({
      id: Date.now() + index,
      file,
      name: file.name,
      size: file.size,
      type: file.type.startsWith('video/') ? 'video' : 'image',
      status: 'pending', // pending, analyzing, completed, error
      progress: 0,
      result: null,
      error: null
    }));
    
    setFiles(prev => [...prev, ...newFiles]);
    enqueueSnackbar(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`, { variant: 'success' });
  }, [enqueueSnackbar]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'video/*': ['.mp4', '.avi', '.mov', '.mkv'],
      'image/*': ['.jpg', '.jpeg', '.png', '.bmp', '.tiff']
    },
    multiple: true
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
  const removeFile = (fileId) => {
    setFiles(prev => prev.filter(f => f.id !== fileId));
  };

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  const clearAllFiles = () => {
    setFiles([]);
    setAnalysisResults([]);
    setOverallProgress(0);
  };

  // –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const analyzeFile = async (fileData) => {
    try {
      setCurrentAnalyzing(fileData.id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞
      setFiles(prev => prev.map(f => 
        f.id === fileData.id 
          ? { ...f, status: 'analyzing', progress: 0 }
          : f
      ));

      const formData = new FormData();
      formData.append('file', fileData.file);
      if (locationHint) formData.append('location_hint', locationHint);
      
      let result;
      if (fileData.type === 'video') {
        formData.append('frame_interval', frameInterval.toString());
        formData.append('max_frames', maxFrames.toString());
        result = await videoAnalysis(formData);
      } else {
        result = await imageAnalysis(formData);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      setFiles(prev => prev.map(f => 
        f.id === fileData.id 
          ? { ...f, status: 'completed', progress: 100, result }
          : f
      ));

      return { fileId: fileData.id, success: true, result };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞ ${fileData.name}:`, error);
      
      setFiles(prev => prev.map(f => 
        f.id === fileData.id 
          ? { ...f, status: 'error', error: error.message }
          : f
      ));

      return { fileId: fileData.id, success: false, error: error.message };
    }
  };

  // –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  const startBatchAnalysis = async () => {
    if (files.length === 0) {
      enqueueSnackbar('–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', { variant: 'warning' });
      return;
    }

    setIsAnalyzing(true);
    setAnalysisResults([]);
    setOverallProgress(0);

    const pendingFiles = files.filter(f => f.status === 'pending');
    const results = [];

    for (let i = 0; i < pendingFiles.length; i++) {
      const fileData = pendingFiles[i];
      const result = await analyzeFile(fileData);
      results.push(result);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
      const progress = ((i + 1) / pendingFiles.length) * 100;
      setOverallProgress(progress);
    }

    setAnalysisResults(results);
    setIsAnalyzing(false);
    setCurrentAnalyzing(null);

    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;

    enqueueSnackbar(
      `–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`, 
      { variant: successful > 0 ? 'success' : 'error' }
    );
  };

  // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
  const exportResults = () => {
    const successfulResults = files
      .filter(f => f.status === 'completed' && f.result)
      .map(f => ({
        filename: f.name,
        type: f.type,
        coordinates: f.result.coordinates,
        confidence: f.result.confidence,
        processing_time: f.result.processing_time,
        timestamp: new Date().toISOString()
      }));

    const dataStr = JSON.stringify(successfulResults, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `batch_analysis_results_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    URL.revokeObjectURL(url);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const getStatistics = () => {
    const total = files.length;
    const completed = files.filter(f => f.status === 'completed').length;
    const errors = files.filter(f => f.status === 'error').length;
    const pending = files.filter(f => f.status === 'pending').length;
    const withCoordinates = files.filter(f => f.result?.coordinates).length;
    
    return { total, completed, errors, pending, withCoordinates };
  };

  const stats = getStatistics();
  const hasResults = files.some(f => f.status === 'completed');

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        üìÅ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤
      </Typography>
      
      <Typography variant="body1" color="textSecondary" sx={{ mb: 3 }}>
        –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      </Typography>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Typography variant="h6" gutterBottom>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞</Typography>
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <TextField
                fullWidth
                label="–ü–æ–¥—Å–∫–∞–∑–∫–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"
                value={locationHint}
                onChange={(e) => setLocationHint(e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, –†–æ—Å—Å–∏—è"
                helperText="–ü–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
              />
            </Grid>
            <Grid item xs={12} md={3}>
              <FormControl fullWidth>
                <InputLabel>–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–¥—Ä–æ–≤</InputLabel>
                <Select
                  value={frameInterval}
                  onChange={(e) => setFrameInterval(e.target.value)}
                  label="–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–∞–¥—Ä–æ–≤"
                >
                  <MenuItem value={15}>–ö–∞–∂–¥—ã–π 15-–π –∫–∞–¥—Ä</MenuItem>
                  <MenuItem value={30}>–ö–∞–∂–¥—ã–π 30-–π –∫–∞–¥—Ä</MenuItem>
                  <MenuItem value={60}>–ö–∞–∂–¥—ã–π 60-–π –∫–∞–¥—Ä</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            <Grid item xs={12} md={3}>
              <FormControl fullWidth>
                <InputLabel>–ú–∞–∫—Å. –∫–∞–¥—Ä–æ–≤</InputLabel>
                <Select
                  value={maxFrames}
                  onChange={(e) => setMaxFrames(e.target.value)}
                  label="–ú–∞–∫—Å. –∫–∞–¥—Ä–æ–≤"
                >
                  <MenuItem value={5}>5 –∫–∞–¥—Ä–æ–≤</MenuItem>
                  <MenuItem value={10}>10 –∫–∞–¥—Ä–æ–≤</MenuItem>
                  <MenuItem value={20}>20 –∫–∞–¥—Ä–æ–≤</MenuItem>
                </Select>
              </FormControl>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box
            {...getRootProps()}
            sx={{
              border: '2px dashed',
              borderColor: isDragActive ? 'primary.main' : 'grey.300',
              borderRadius: 2,
              p: 4,
              textAlign: 'center',
              cursor: 'pointer',
              backgroundColor: isDragActive ? 'action.hover' : 'transparent',
              transition: 'all 0.2s ease'
            }}
          >
            <input {...getInputProps()} />
            <UploadIcon sx={{ fontSize: 48, color: 'primary.main', mb: 2 }} />
            <Typography variant="h6" gutterBottom>
              {isDragActive ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å' : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞'}
            </Typography>
            <Typography variant="body2" color="textSecondary">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤–∏–¥–µ–æ (MP4, AVI, MOV) –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, BMP, TIFF)
            </Typography>
          </Box>
        </CardContent>
      </Card>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      {files.length > 0 && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
              <Typography variant="h6">–§–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ({files.length})</Typography>
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Button
                  variant="contained"
                  startIcon={<PlayIcon />}
                  onClick={startBatchAnalysis}
                  disabled={isAnalyzing || stats.pending === 0}
                >
                  {isAnalyzing ? '–ê–Ω–∞–ª–∏–∑...' : '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑'}
                </Button>
                {hasResults && (
                  <Button
                    variant="outlined"
                    startIcon={<DownloadIcon />}
                    onClick={exportResults}
                  >
                    –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                  </Button>
                )}
                <Button
                  variant="outlined"
                  color="error"
                  onClick={clearAllFiles}
                  disabled={isAnalyzing}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                </Button>
              </Box>
            </Box>

            {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
            {isAnalyzing && (
              <Box sx={{ mb: 2 }}>
                <Typography variant="body2" gutterBottom>
                  –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {Math.round(overallProgress)}%
                </Typography>
                <LinearProgress variant="determinate" value={overallProgress} />
              </Box>
            )}

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Grid container spacing={2} sx={{ mb: 2 }}>
              <Grid item>
                <Chip label={`–í—Å–µ–≥–æ: ${stats.total}`} />
              </Grid>
              <Grid item>
                <Chip label={`–û–∂–∏–¥–∞—é—Ç: ${stats.pending}`} color="default" />
              </Grid>
              <Grid item>
                <Chip label={`–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${stats.completed}`} color="success" />
              </Grid>
              <Grid item>
                <Chip label={`–û—à–∏–±–∫–∏: ${stats.errors}`} color="error" />
              </Grid>
              <Grid item>
                <Chip label={`–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: ${stats.withCoordinates}`} color="primary" />
              </Grid>
            </Grid>
          </CardContent>
        </Card>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ */}
      {files.length > 0 && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <List>
              {files.map((fileData, index) => (
                <React.Fragment key={fileData.id}>
                  <ListItem>
                    <ListItemIcon>
                      {fileData.type === 'video' ? <VideoIcon /> : <ImageIcon />}
                    </ListItemIcon>
                    <ListItemText
                      primary={
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Typography variant="body1">{fileData.name}</Typography>
                          {fileData.status === 'completed' && <CheckIcon color="success" />}
                          {fileData.status === 'error' && <ErrorIcon color="error" />}
                          {currentAnalyzing === fileData.id && (
                            <Chip size="small" label="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è..." color="primary" />
                          )}
                        </Box>
                      }
                      secondary={
                        <Box>
                          <Typography variant="body2" color="textSecondary">
                            {(fileData.size / 1024 / 1024).toFixed(1)} MB ‚Ä¢ {fileData.type}
                          </Typography>
                          {fileData.status === 'analyzing' && (
                            <LinearProgress sx={{ mt: 1 }} />
                          )}
                          {fileData.status === 'error' && (
                            <Alert severity="error" sx={{ mt: 1 }}>
                              {fileData.error}
                            </Alert>
                          )}
                          {fileData.result?.coordinates && (
                            <Typography variant="body2" color="success.main" sx={{ mt: 1 }}>
                              üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {fileData.result.coordinates.latitude.toFixed(4)}, {fileData.result.coordinates.longitude.toFixed(4)}
                            </Typography>
                          )}
                        </Box>
                      }
                    />
                    <IconButton
                      onClick={() => removeFile(fileData.id)}
                      disabled={isAnalyzing}
                    >
                      <DeleteIcon />
                    </IconButton>
                  </ListItem>
                  {index < files.length - 1 && <Divider />}
                </React.Fragment>
              ))}
            </List>
          </CardContent>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ */}
      {hasResults && (
        <Accordion sx={{ mb: 3 }}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="h6">
              <MapIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            {files
              .filter(f => f.result?.coordinates)
              .map(fileData => (
                <Box key={fileData.id} sx={{ mb: 3 }}>
                  <Typography variant="subtitle1" gutterBottom>
                    {fileData.name}
                  </Typography>
                  <InteractiveResultsMap
                    coordinates={fileData.result.coordinates}
                    satelliteData={fileData.result.satellite_data}
                    locationInfo={fileData.result.location_info}
                    height={300}
                  />
                </Box>
              ))
            }
          </AccordionDetails>
        </Accordion>
      )}

      {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {hasResults && (
        <Accordion>
          <AccordionSummary expandIcon={<ExpandMoreIcon />}>
            <Typography variant="h6">
              <AnalyticsIcon sx={{ mr: 1, verticalAlign: 'middle' }} />
              –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Typography>
          </AccordionSummary>
          <AccordionDetails>
            <TableContainer component={Paper}>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>–§–∞–π–ª</TableCell>
                    <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                    <TableCell>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</TableCell>
                    <TableCell>–¢–æ—á–Ω–æ—Å—Ç—å</TableCell>
                    <TableCell>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {files.map(fileData => (
                    <TableRow key={fileData.id}>
                      <TableCell>{fileData.name}</TableCell>
                      <TableCell>
                        {fileData.status === 'completed' && <Chip label="–ó–∞–≤–µ—Ä—à–µ–Ω–æ" color="success" size="small" />}
                        {fileData.status === 'error' && <Chip label="–û—à–∏–±–∫–∞" color="error" size="small" />}
                        {fileData.status === 'pending' && <Chip label="–û–∂–∏–¥–∞–µ—Ç" color="default" size="small" />}
                        {fileData.status === 'analyzing' && <Chip label="–ê–Ω–∞–ª–∏–∑" color="primary" size="small" />}
                      </TableCell>
                      <TableCell>
                        {fileData.result?.coordinates ? (
                          `${fileData.result.coordinates.latitude.toFixed(4)}, ${fileData.result.coordinates.longitude.toFixed(4)}`
                        ) : (
                          '‚Äî'
                        )}
                      </TableCell>
                      <TableCell>
                        {fileData.result?.coordinates ? 
                          `${Math.round(fileData.result.coordinates.confidence * 100)}%` : 
                          '‚Äî'
                        }
                      </TableCell>
                      <TableCell>
                        {fileData.result?.processing_time ? 
                          `${fileData.result.processing_time.toFixed(1)}—Å` : 
                          '‚Äî'
                        }
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </AccordionDetails>
        </Accordion>
      )}
    </Box>
  );
};

export default BatchAnalyzer;
