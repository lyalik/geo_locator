#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–¥–µ–ª–∞ "–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
"""
import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

BASE_URL = "http://localhost:5001"

def test_property_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    print("üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É
    print("\n1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
    test_address = "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, 1"
    
    try:
        response = requests.get(f"{BASE_URL}/api/geo/locate", 
                              params={"address": test_address},
                              timeout=30)
        
        print(f"   –ó–∞–ø—Ä–æ—Å: {test_address}")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Yandex
            if data.get('yandex'):
                yandex_success = data['yandex'].get('success', False)
                print(f"   üìç Yandex Maps: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if yandex_success else '‚ùå –û—à–∏–±–∫–∞'}")
                if not yandex_success:
                    error = data['yandex'].get('error', 'Unknown error')
                    print(f"      –û—à–∏–±–∫–∞: {error}")
                    if data['yandex'].get('error_code') == 403:
                        print(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {data['yandex'].get('recommendation', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 2GIS
            if data.get('dgis'):
                dgis_success = data['dgis'].get('success', False)
                print(f"   üó∫Ô∏è  2GIS: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dgis_success else '‚ùå –û—à–∏–±–∫–∞'}")
                if not dgis_success:
                    error = data['dgis'].get('error', 'Unknown error')
                    print(f"      –û—à–∏–±–∫–∞: {error}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    print("\n2. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:")
    test_lat, test_lon = 55.753215, 37.622504  # –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
    
    try:
        response = requests.get(f"{BASE_URL}/api/geo/locate/coordinates", 
                              params={"lat": test_lat, "lon": test_lon},
                              timeout=30)
        
        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {test_lat}, {test_lon}")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if data.get('yandex'):
                yandex_success = data['yandex'].get('success', False)
                print(f"   üìç Yandex Maps: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if yandex_success else '‚ùå –û—à–∏–±–∫–∞'}")
            
            if data.get('dgis'):
                dgis_success = data['dgis'].get('success', False)
                print(f"   üó∫Ô∏è  2GIS: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dgis_success else '‚ùå –û—à–∏–±–∫–∞'}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    # –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    print("\n3. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É:")
    test_cadastral = "77:01:0001001:1234"
    
    try:
        response = requests.get(f"{BASE_URL}/api/geo/locate", 
                              params={"query": test_cadastral, "search_type": "cadastral"},
                              timeout=30)
        
        print(f"   –ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {test_cadastral}")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if data.get('yandex'):
                yandex_success = data['yandex'].get('success', False)
                print(f"   üìç Yandex Maps: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if yandex_success else '‚ùå –û—à–∏–±–∫–∞'}")
            
            if data.get('dgis'):
                dgis_success = data['dgis'].get('success', False)
                print(f"   üó∫Ô∏è  2GIS: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dgis_success else '‚ùå –û—à–∏–±–∫–∞'}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_api_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π:")
    print("=" * 30)
    
    yandex_key = os.getenv('YANDEX_API_KEY')
    dgis_key = os.getenv('DGIS_API_KEY')
    
    print(f"YANDEX_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if yandex_key else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    if yandex_key:
        print(f"   –î–ª–∏–Ω–∞: {len(yandex_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–∞—á–∞–ª–æ: {yandex_key[:10]}...")
    
    print(f"DGIS_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if dgis_key else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    if dgis_key:
        print(f"   –î–ª–∏–Ω–∞: {len(dgis_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–∞—á–∞–ª–æ: {dgis_key[:10]}...")

def test_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤:")
    print("=" * 35)
    
    try:
        response = requests.get(f"{BASE_URL}/api/geo/health", timeout=10)
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
            services = data.get('services', {})
            for service_name, service_data in services.items():
                status = service_data.get('status', 'unknown')
                print(f"   {service_name}: {status}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –û–ë–™–ï–ö–¢–û–í –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò")
    print("=" * 60)
    
    test_api_keys()
    test_health_check()
    test_property_analysis()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
