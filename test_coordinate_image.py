#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª "–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
"""
import requests
import os

BASE_URL = "http://localhost:5001"

def test_coordinate_detection_with_real_image():
    """–¢–µ—Å—Ç coordinate detection —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("üñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    test_image_path = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg"
    
    if not os.path.exists(test_image_path):
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(test_image_path)}")
    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(test_image_path)} –±–∞–π—Ç")
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        with open(test_image_path, 'rb') as f:
            files = {'image': ('test_image.jpg', f, 'image/jpeg')}
            data = {
                'location_hint': '',
                'user_description': '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'
            }
            
            print("\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/coordinates/detect...")
            
            response = requests.post(
                f"{BASE_URL}/api/coordinates/detect",
                files=files,
                data=data,
                timeout=60
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print(f"\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
                print(f"   Success: {result.get('success', 'unknown')}")
                print(f"   Message: {result.get('message', 'no message')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                coordinates = result.get('coordinates')
                if coordinates:
                    print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {coordinates}")
                else:
                    print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤
                objects = result.get('detected_objects', [])
                print(f"   üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                sources = result.get('sources_used', [])
                print(f"   üì° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(sources) if sources else '–Ω–µ—Ç'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = result.get('recommendations', [])
                if recommendations:
                    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for i, rec in enumerate(recommendations, 1):
                        print(f"   {i}. {rec}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                satellite_data = result.get('satellite_data')
                if satellite_data:
                    print(f"\nüõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {satellite_data.get('source', 'unknown')}")
                    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–Ω–∞–π–¥–µ–Ω–æ' if satellite_data.get('image_url') else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_coordinate_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ coordinate API"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ coordinate API:")
    
    try:
        response = requests.options(f"{BASE_URL}/api/coordinates/detect", timeout=10)
        print(f"   OPTIONS –∑–∞–ø—Ä–æ—Å: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("   ‚ùå API endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_coordinate_api_health()
    test_coordinate_detection_with_real_image()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
