#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
"""
import os
import sys
import json
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')

from services.archive_photo_service import ArchivePhotoService
from services.coordinate_detector import CoordinateDetector
from services.google_vision_service import GoogleVisionService

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_archive_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ArchivePhotoService"""
    print("üèõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ArchivePhotoService...")
    
    try:
        service = ArchivePhotoService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = service.get_archive_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞: {stats}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        test_image = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/buildings/sample_building_001.jpg'
        
        if os.path.exists(test_image):
            similar = service.find_similar_buildings(test_image, threshold=0.3)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π: {len(similar)}")
            
            for building in similar[:2]:
                print(f"  - {building['metadata']['description']} (—Å—Ö–æ–∂–µ—Å—Ç—å: {building['similarity']:.3f})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ArchivePhotoService: {e}")
        return False

def test_coordinate_detector_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ coordinate_detector"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ CoordinateDetector...")
    
    try:
        detector = CoordinateDetector()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        test_image = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/buildings/sample_building_001.jpg'
        
        if os.path.exists(test_image):
            result = detector.detect_coordinates_from_image(test_image)
            
            print(f"üìç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
            print(f"  - –£—Å–ø–µ—Ö: {result.get('success', False)}")
            
            if result.get('coordinates'):
                coords = result['coordinates']
                print(f"  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords.get('latitude')}, {coords.get('longitude')}")
                print(f"  - –ò—Å—Ç–æ—á–Ω–∏–∫: {coords.get('source', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            sources = result.get('coordinate_sources', {})
            print(f"  - –ê—Ä—Ö–∏–≤–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {sources.get('archive_photo_match', False)}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ CoordinateDetector: {e}")
        return False

def test_google_vision_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ GoogleVisionService"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ GoogleVisionService...")
    
    try:
        service = GoogleVisionService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        has_archive = hasattr(service, 'archive_service') and service.archive_service is not None
        print(f"üèõÔ∏è –ê—Ä—Ö–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {has_archive}")
        
        if has_archive:
            test_image = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/buildings/sample_building_001.jpg'
            
            if os.path.exists(test_image):
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                result = service.analyze_violations_with_archive_context(test_image)
                
                print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –∞—Ä—Ö–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:")
                print(f"  - –£—Å–ø–µ—Ö: {result.get('success', False)}")
                print(f"  - –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π: {len(result.get('similar_buildings', []))}")
                
                if result.get('archive_context'):
                    context = result['archive_context']
                    print(f"  - –¢–∏–ø—ã –∑–¥–∞–Ω–∏–π: {context.get('building_types', [])}")
                    print(f"  - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏: {context.get('architectural_styles', [])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ GoogleVisionService: {e}")
        return False

def test_metadata_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    metadata_path = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/metadata'
    
    try:
        metadata_files = [f for f in os.listdir(metadata_path) if f.endswith('.json')]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {len(metadata_files)}")
        
        for file in metadata_files:
            file_path = os.path.join(metadata_path, file)
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"  - {file}: {data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ê–†–•–ò–í–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 50)
    
    tests = [
        ("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ", test_metadata_loading),
        ("ArchivePhotoService", test_archive_service),
        ("CoordinateDetector", test_coordinate_detector_integration),
        ("GoogleVisionService", test_google_vision_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
