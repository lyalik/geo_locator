#!/usr/bin/env python3
"""
–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–û–õ–û–ö–ê–¶–ò–û–ù–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø
–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Mistral AI, YOLO, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""
import os
import sys
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

class GeoSystemTester:
    def __init__(self):
        self.base_url = "http://localhost:5001"
        self.test_images = [
            '/home/denis/Documents/Hackathon_2025/geo_locator/test_image.jpg',
            '/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/i_annotated_yolo.jpg',
            '/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/test_image_annotated_yolo.jpg'
        ]
        self.results = []
    
    def test_backend_health(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ backend"""
        print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò BACKEND")
        print("=" * 60)
        
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('status')}")
                print(f"üìã –í–µ—Ä—Å–∏—è: {data.get('version')}")
                print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if data.get('database') else '‚ùå'}")
                return True
            else:
                print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
            return False
    
    def test_mistral_ai_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Mistral AI"""
        print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MISTRAL AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 60)
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
            sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')
            
            from services.mistral_ai_service import MistralAIService
            
            service = MistralAIService()
            print(f"üîß –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"üìã –ú–æ–¥–µ–ª—å: {service.model}")
            print(f"üîë API –∫–ª—é—á: {'‚úÖ' if service.api_key else '‚ùå'}")
            print(f"üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º: {'‚ùå' if service.demo_mode else '‚úÖ'}")
            
            if service.demo_mode:
                print("‚ö†Ô∏è Mistral AI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")
                return False
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            test_image = self.test_images[0] if os.path.exists(self.test_images[0]) else None
            if test_image:
                print(f"üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑: {os.path.basename(test_image)}")
                
                result = service.analyze_image(
                    test_image, 
                    "–ù–∞–π–¥–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç —Å –∞–¥—Ä–µ—Å–∞–º–∏, –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —É–ª–∏—Ü, –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–º–æ–≤ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ GPS"
                )
                
                if result.get('success'):
                    print(f"‚úÖ Mistral AI –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
                    print(f"üìù –ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {result.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')[:100]}...")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ Mistral AI: {result.get('error')}")
                    return False
            else:
                print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Mistral AI: {e}")
            return False
    
    def test_yolo_object_detection(self):
        """–¢–µ—Å—Ç YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï YOLO –î–ï–¢–ï–ö–¶–ò–ò –û–ë–™–ï–ö–¢–û–í")
        print("=" * 60)
        
        try:
            sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')
            
            from services.yolo_violation_detector import YOLOObjectDetector
            
            service = YOLOObjectDetector()
            print(f"üîß YOLO —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"üìã –ú–æ–¥–µ–ª—å: {service.model_path}")
            print(f"üéØ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {'‚úÖ' if service.model else '‚ùå'}")
            
            if not service.model:
                print("‚ùå YOLO –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return False
            
            # –¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            test_image = self.test_images[0] if os.path.exists(self.test_images[0]) else None
            if test_image:
                print(f"üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é: {os.path.basename(test_image)}")
                
                result = service.detect_objects(test_image)
                
                if result.get('success'):
                    objects = result.get('objects', [])
                    print(f"‚úÖ YOLO –¥–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    print(f"üì¶ –û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(objects)}")
                    
                    for i, obj in enumerate(objects[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"   {i+1}. {obj.get('class', 'unknown')}: {obj.get('confidence', 0):.2f}")
                    
                    return len(objects) > 0
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ YOLO: {result.get('error')}")
                    return False
            else:
                print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ YOLO: {e}")
            return False
    
    def test_coordinate_detection_api(self):
        """–¢–µ—Å—Ç API –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        print("\nüìç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–û–û–†–î–ò–ù–ê–¢–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        results = []
        
        for i, test_image in enumerate(self.test_images):
            if not os.path.exists(test_image):
                print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
                continue
            
            print(f"\nüì∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {os.path.basename(test_image)}")
            
            try:
                with open(test_image, 'rb') as f:
                    files = {'file': f}
                    data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}  # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    
                    start_time = time.time()
                    response = requests.post(
                        f"{self.base_url}/api/coordinates/detect",
                        files=files,
                        data=data,
                        timeout=120  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    )
                    processing_time = time.time() - start_time
                
                print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    coordinates = result.get('coordinates')
                    confidence = result.get('confidence', 0)
                    objects = result.get('objects', [])
                    source = result.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                    enhanced = result.get('enhanced_detection', False)
                    
                    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}")
                    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                    print(f"üì¶ YOLO –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                    print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    print(f"üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è: {'‚úÖ' if enhanced else '‚ùå'}")
                    
                    # –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤
                    if objects:
                        print(f"üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:")
                        for j, obj in enumerate(objects[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                            print(f"   {j+1}. {obj.get('class', 'unknown')}: {obj.get('confidence', 0):.2f}")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if 'address_data' in result:
                        addr = result['address_data']
                        print(f"üè† –ê–¥—Ä–µ—Å: {addr.get('formatted_address', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                    
                    if 'satellite_data' in result:
                        sat = result['satellite_data']
                        print(f"üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {sat.get('source', '–ù–µ—Ç')}")
                    
                    results.append({
                        'image': os.path.basename(test_image),
                        'success': True,
                        'coordinates': coordinates,
                        'confidence': confidence,
                        'objects_count': len(objects),
                        'processing_time': processing_time,
                        'source': source
                    })
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                    print(f"üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                    results.append({
                        'image': os.path.basename(test_image),
                        'success': False,
                        'error': f"HTTP {response.status_code}"
                    })
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                results.append({
                    'image': os.path.basename(test_image),
                    'success': False,
                    'error': str(e)
                })
        
        return results
    
    def test_panorama_analysis(self):
        """–¢–µ—Å—Ç –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ù–û–†–ê–ú–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 60)
        
        try:
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–≤–∫–ª—é—á–∞–µ—Ç –ø–∞–Ω–æ—Ä–∞–º—ã)
            response = requests.get(f"{self.base_url}/api/coordinates/statistics", timeout=30)
            
            if response.status_code == 200:
                stats = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                
                services = stats.get('services', {})
                for service_name, status in services.items():
                    if 'panorama' in service_name.lower() or 'yandex' in service_name.lower() or '2gis' in service_name.lower():
                        print(f"üåê {service_name}: {'‚úÖ' if status else '‚ùå'}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return False
    
    def test_batch_processing(self):
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
        print("=" * 60)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        available_images = [img for img in self.test_images if os.path.exists(img)]
        
        if len(available_images) < 2:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        try:
            files = []
            for img in available_images[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                files.append(('files', open(img, 'rb')))
            
            data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            start_time = time.time()
            response = requests.post(
                f"{self.base_url}/api/violations/batch_detect",
                files=files,
                data=data,
                timeout=180  # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            )
            processing_time = time.time() - start_time
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            for _, file_obj in files:
                file_obj.close()
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                results = result.get('results', [])
                
                print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(results)}")
                
                for i, res in enumerate(results):
                    success = res.get('success', False)
                    coords = res.get('coordinates')
                    objects_count = len(res.get('objects', []))
                    
                    print(f"   {i+1}. {'‚úÖ' if success else '‚ùå'} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}, –û–±—ä–µ–∫—Ç–æ–≤: {objects_count}")
                
                return len(results) > 0
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return False
    
    def generate_report(self, test_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        total_tests = len(test_results)
        passed_tests = sum(1 for result in test_results if result[1])
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nüìù –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø:")
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {test_name}: {status}")
        
        if passed_tests == total_tests:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
        elif passed_tests >= total_tests * 0.8:
            print("\n‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞.")
        else:
            print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        return passed_tests / total_tests

def main():
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–û–õ–û–ö–ê–¶–ò–û–ù–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
    print("=" * 80)
    print("ü§ñ Mistral AI + üéØ YOLO + üåê –ü–∞–Ω–æ—Ä–∞–º—ã + üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    print("=" * 80)
    
    tester = GeoSystemTester()
    test_results = []
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Backend Health", tester.test_backend_health),
        ("Mistral AI Integration", tester.test_mistral_ai_integration),
        ("YOLO Object Detection", tester.test_yolo_object_detection),
        ("Panorama Analysis", tester.test_panorama_analysis),
        ("Coordinate Detection API", lambda: len(tester.test_coordinate_detection_api()) > 0),
        ("Batch Processing", tester.test_batch_processing)
    ]
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            test_results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            test_results.append((test_name, False))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    success_rate = tester.generate_report(test_results)
    
    return success_rate >= 0.8

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
