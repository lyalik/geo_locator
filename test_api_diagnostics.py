#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Yandex –∏ 2GIS
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π, —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç—ã API
"""
import os
import sys
import requests
import json
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
    print("=" * 60)
    
    yandex_key = os.getenv('YANDEX_API_KEY')
    dgis_key = os.getenv('DGIS_API_KEY')
    
    print(f"YANDEX_API_KEY: {'‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if yandex_key else '‚úó –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    if yandex_key:
        print(f"  –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(yandex_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {yandex_key[:10]}...")
    
    print(f"DGIS_API_KEY: {'‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if dgis_key else '‚úó –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    if dgis_key:
        print(f"  –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(dgis_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"  –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {dgis_key[:10]}...")
    
    return yandex_key, dgis_key

def test_yandex_geocoding(api_key, address="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Geocoding API"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï YANDEX GEOCODING API")
    print("=" * 60)
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    url = 'https://geocode-maps.yandex.ru/1.x/'
    params = {
        'apikey': api_key,
        'geocode': address,
        'format': 'json',
        'results': 1,
        'lang': 'ru_RU'
    }
    
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2, ensure_ascii=False)}")
    
    try:
        print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.get(url, params=params, timeout=10)
        
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
            if geo_objects:
                geo_object = geo_objects[0]['GeoObject']
                coordinates = geo_object['Point']['pos'].split()
                print(f"\nüìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates[1]}, {coordinates[0]}")
                return True
            else:
                print("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_yandex_search(api_key, query="–∫–∞—Ñ–µ", lat=55.7558, lon=37.6176):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Search API"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï YANDEX SEARCH API")
    print("=" * 60)
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    url = 'https://api-maps.yandex.ru/search/v1/'
    params = {
        'apikey': api_key,
        'text': query,
        'lang': 'ru_RU',
        'results': 5,
        'format': 'json',
        'll': f"{lon},{lat}",
        'spn': '0.01,0.01'
    }
    
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2, ensure_ascii=False)}")
    
    try:
        print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.get(url, params=params, timeout=10)
        
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            
            features = data.get('features', [])
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(features)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_dgis_search(api_key, query="–ø–∏—Ü—Ü–µ—Ä–∏—è", lat=55.7558, lon=37.6176):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 2GIS Search API"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 2GIS SEARCH API")
    print("=" * 60)
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    url = 'https://catalog.api.2gis.com/3.0/items'
    params = {
        'key': api_key,
        'q': query,
        'point': f"{lon},{lat}",
        'radius': 1000,
        'region_id': 1,  # –ú–æ—Å–∫–≤–∞
        'page_size': 5,
        'fields': 'items.point,items.adm_div,items.address,items.contact_groups,items.rubrics'
    }
    
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2, ensure_ascii=False)}")
    
    try:
        print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.get(url, params=params, timeout=10)
        
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            
            items = data.get('result', {}).get('items', [])
            total = data.get('meta', {}).get('total', 0)
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(items)} –∏–∑ {total}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏
            if response.status_code == 401:
                print("üîë –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º")
            elif response.status_code == 403:
                print("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞")
            elif response.status_code == 429:
                print("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_dgis_geocoding(api_key, address="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ 2GIS Geocoding"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 2GIS GEOCODING")
    print("=" * 60)
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    url = 'https://catalog.api.2gis.com/3.0/items'
    params = {
        'key': api_key,
        'q': address,
        'region_id': 1,  # –ú–æ—Å–∫–≤–∞
        'type': 'adm_div.place,building.address',
        'fields': 'items.point,items.adm_div,items.address'
    }
    
    print(f"URL: {url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2, ensure_ascii=False)}")
    
    try:
        print("\nüîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.get(url, params=params, timeout=10)
        
        print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
            
            items = data.get('result', {}).get('items', [])
            if items:
                item = items[0]
                point = item.get('point', {})
                if point:
                    print(f"\nüìç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {point.get('lat')}, {point.get('lon')}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False
            
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_backend_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND –°–ï–†–í–ò–°–û–í")
    print("=" * 60)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
        sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')
        
        from services.yandex_maps_service import YandexMapsService
        from services.dgis_service import DGISService
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex —Å–µ—Ä–≤–∏—Å
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YandexMapsService...")
        yandex_service = YandexMapsService()
        yandex_result = yandex_service.geocode("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞")
        print(f"Yandex —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(yandex_result, indent=2, ensure_ascii=False)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º 2GIS —Å–µ—Ä–≤–∏—Å
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DGISService...")
        dgis_service = DGISService()
        dgis_result = dgis_service.geocode("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞")
        print(f"2GIS —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(dgis_result, indent=2, ensure_ascii=False)}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API YANDEX –ò 2GIS")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    yandex_key, dgis_key = check_environment_variables()
    
    results = {
        'yandex_geocoding': False,
        'yandex_search': False,
        'dgis_search': False,
        'dgis_geocoding': False,
        'backend_services': False
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex API
    if yandex_key:
        results['yandex_geocoding'] = test_yandex_geocoding(yandex_key)
        results['yandex_search'] = test_yandex_search(yandex_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º 2GIS API
    if dgis_key:
        results['dgis_search'] = test_dgis_search(dgis_key)
        results['dgis_geocoding'] = test_dgis_geocoding(dgis_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend —Å–µ—Ä–≤–∏—Å—ã
    results['backend_services'] = test_backend_services()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == 0:
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ API —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–Ω—ã –∏ –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API –∑–∞–ø—Ä–æ—Å–æ–≤")
    elif passed_tests < total_tests:
        print(f"\n‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´: {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        print("–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
    else:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")

if __name__ == "__main__":
    main()
