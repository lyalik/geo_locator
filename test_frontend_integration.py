#!/usr/bin/env python3
"""
–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê –° BACKEND
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–∞–π—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –ò–ò –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
"""
import os
import sys
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

class FrontendIntegrationTester:
    def __init__(self):
        self.base_url = "http://localhost:5001"
        self.frontend_url = "http://localhost:3000"
        self.test_images = [
            '/home/denis/Documents/Hackathon_2025/geo_locator/test_image.jpg',
            '/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/i_annotated_yolo.jpg'
        ]
        self.results = {}
    
    def check_frontend_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        print("üåê –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –§–†–û–ù–¢–ï–ù–î–ê")
        print("=" * 50)
        
        try:
            response = requests.get(self.frontend_url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω: {self.frontend_url}")
                return True
            else:
                print(f"‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: {e}")
            return False
    
    def test_ai_analysis_api(self):
        """–¢–µ—Å—Ç API –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ê–Ω–∞–ª–∏–∑ —Å –ò–ò' (Violation Detection)"""
        print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê '–ê–ù–ê–õ–ò–ó –° –ò–ò'")
        print("=" * 50)
        
        test_image = self.test_images[0] if os.path.exists(self.test_images[0]) else None
        if not test_image:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        try:
            # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API endpoint –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            with open(test_image, 'rb') as f:
                files = {'file': f}
                data = {
                    'user_id': 'test_user',
                    'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
                    'location_notes': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞'
                }
                
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/violations/detect")
                start_time = time.time()
                response = requests.post(
                    f"{self.base_url}/api/violations/detect",
                    files=files,
                    data=data,
                    timeout=60
                )
                processing_time = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {success: true, data: {...}}
                if result.get('success') and 'data' in result:
                    data = result['data']
                    violations = data.get('violations', [])
                    location = data.get('location', {})
                    
                    print(f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(violations)}")
                    print(f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {'‚úÖ' if location.get('success') else '‚ùå'}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                    required_fields = ['violation_id', 'image_path', 'violations', 'location', 'metadata']
                    missing_fields = [field for field in required_fields if field not in data]
                else:
                    print(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—Ö, –Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                    violations = []
                    location = {}
                    missing_fields = []
                
                if missing_fields:
                    print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {missing_fields}")
                else:
                    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
                self.results['ai_analysis'] = {
                    'status': 'success',
                    'violations_count': len(violations),
                    'processing_time': processing_time,
                    'has_location': location.get('success', False)
                }
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                self.results['ai_analysis'] = {'status': 'failed', 'error': f"HTTP {response.status_code}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            self.results['ai_analysis'] = {'status': 'failed', 'error': str(e)}
            return False
    
    def test_ocr_analysis_api(self):
        """–¢–µ—Å—Ç API –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ 'OCR –ê–Ω–∞–ª–∏–∑'"""
        print("\nüìù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê 'OCR –ê–ù–ê–õ–ò–ó'")
        print("=" * 50)
        
        test_image = self.test_images[0] if os.path.exists(self.test_images[0]) else None
        if not test_image:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Mistral AI OCR —á–µ—Ä–µ–∑ coordinate detection
            with open(test_image, 'rb') as f:
                files = {'file': f}
                data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}
                
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/coordinates/detect (–≤–∫–ª—é—á–∞–µ—Ç OCR)")
                start_time = time.time()
                response = requests.post(
                    f"{self.base_url}/api/coordinates/detect",
                    files=files,
                    data=data,
                    timeout=60
                )
                processing_time = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                print(f"‚úÖ OCR API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('coordinates', '–ù–µ –Ω–∞–π–¥–µ–Ω—ã')}")
                print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ OCR –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ
                has_ocr_data = 'source' in result and result.get('source') != '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
                
                self.results['ocr_analysis'] = {
                    'status': 'success',
                    'processing_time': processing_time,
                    'has_coordinates': result.get('coordinates') is not None,
                    'has_ocr_data': has_ocr_data
                }
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                self.results['ocr_analysis'] = {'status': 'failed', 'error': f"HTTP {response.status_code}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            self.results['ocr_analysis'] = {'status': 'failed', 'error': str(e)}
            return False
    
    def test_coordinate_analysis_api(self):
        """–¢–µ—Å—Ç API –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'"""
        print("\nüìç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê '–ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢'")
        print("=" * 50)
        
        success_count = 0
        total_tests = 0
        
        for i, test_image in enumerate(self.test_images):
            if not os.path.exists(test_image):
                continue
                
            total_tests += 1
            image_name = os.path.basename(test_image)
            print(f"\nüì∏ –¢–µ—Å—Ç {i+1}: {image_name}")
            
            try:
                with open(test_image, 'rb') as f:
                    files = {'file': f}
                    data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}
                    
                    start_time = time.time()
                    response = requests.post(
                        f"{self.base_url}/api/coordinates/detect",
                        files=files,
                        data=data,
                        timeout=60
                    )
                    processing_time = time.time() - start_time
                
                print(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å")
                print(f"   üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    
                    coordinates = result.get('coordinates')
                    confidence = result.get('confidence', 0)
                    objects = result.get('objects', [])
                    source = result.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                    enhanced = result.get('enhanced_detection', False)
                    
                    print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}")
                    print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                    print(f"   üì¶ YOLO –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                    print(f"   üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    print(f"   üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è: {'‚úÖ' if enhanced else '‚ùå'}")
                    
                    success_count += 1
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        success_rate = success_count / total_tests if total_tests > 0 else 0
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate*100:.1f}%)")
        
        self.results['coordinate_analysis'] = {
            'status': 'success' if success_rate > 0.5 else 'failed',
            'success_rate': success_rate,
            'tests_passed': success_count,
            'total_tests': total_tests
        }
        
        return success_rate > 0.5
    
    def test_batch_analysis_api(self):
        """–¢–µ—Å—Ç API –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑'"""
        print("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê '–ü–ê–ö–ï–¢–ù–´–ô –ê–ù–ê–õ–ò–ó'")
        print("=" * 50)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        available_images = [img for img in self.test_images if os.path.exists(img)]
        
        if len(available_images) < 2:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            self.results['batch_analysis'] = {'status': 'skipped', 'reason': 'insufficient_images'}
            return False
        
        try:
            files = []
            for img in available_images[:2]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                files.append(('files', open(img, 'rb')))
            
            data = {
                'user_id': 'test_user',
                'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            start_time = time.time()
            response = requests.post(
                f"{self.base_url}/api/violations/batch_detect",
                files=files,
                data=data,
                timeout=180  # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            )
            processing_time = time.time() - start_time
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            for _, file_obj in files:
                file_obj.close()
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                print(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {success: true, data: {results: [...]}}
                if result.get('success') and 'data' in result:
                    data = result['data']
                    results = data.get('results', [])
                    
                    print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(results)}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    successful_results = 0
                    for i, res in enumerate(results):
                        success = res.get('detection', {}).get('success', False)
                        violations = res.get('detection', {}).get('violations', [])
                        location = res.get('location', {}).get('success', False)
                        
                        print(f"   {i+1}. {'‚úÖ' if success else '‚ùå'} –ù–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}, –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {'‚úÖ' if location else '‚ùå'}")
                        if success:
                            successful_results += 1
                else:
                    print(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—Ö, –Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                    results = []
                    successful_results = 0
                
                success_rate = successful_results / len(results) if results else 0
                
                self.results['batch_analysis'] = {
                    'status': 'success',
                    'processing_time': processing_time,
                    'images_processed': len(results),
                    'success_rate': success_rate
                }
                
                return len(results) > 0
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.status_code}")
                print(f"üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                self.results['batch_analysis'] = {'status': 'failed', 'error': f"HTTP {response.status_code}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            self.results['batch_analysis'] = {'status': 'failed', 'error': str(e)}
            return False
    
    def test_multi_photo_analysis_api(self):
        """–¢–µ—Å—Ç API –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ú—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑'"""
        print("\nüñºÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ê '–ú–£–õ–¨–¢–ò-–§–û–¢–û –ê–ù–ê–õ–ò–ó'")
        print("=" * 50)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        available_images = [img for img in self.test_images if os.path.exists(img)]
        
        if len(available_images) < 2:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –º—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞")
            self.results['multi_photo_analysis'] = {'status': 'skipped', 'reason': 'insufficient_images'}
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photo_groups = [
                {
                    'name': '–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞',
                    'photos': available_images[:2]
                }
            ]
            
            files = []
            group_data = []
            
            for group_idx, group in enumerate(photo_groups):
                for photo_idx, photo_path in enumerate(group['photos']):
                    files.append(('files', open(photo_path, 'rb')))
                    group_data.append({
                        'group_id': group_idx,
                        'group_name': group['name'],
                        'photo_index': photo_idx
                    })
            
            data = {
                'user_id': 'test_user',
                'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
                'groups': json.dumps(group_data)
            }
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ {len(photo_groups)} –≥—Ä—É–ø–ø–∞—Ö...")
            
            start_time = time.time()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π batch endpoint, —Ç–∞–∫ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ multi-photo endpoint –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            response = requests.post(
                f"{self.base_url}/api/violations/batch_detect",
                files=files,
                data=data,
                timeout=180
            )
            processing_time = time.time() - start_time
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            for _, file_obj in files:
                file_obj.close()
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                results = result.get('results', [])
                
                print(f"‚úÖ –ú—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω")
                print(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(results)}")
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                grouped_results = {}
                for i, res in enumerate(results):
                    group_id = i // 2  # –ü—Ä–æ—Å—Ç–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if group_id not in grouped_results:
                        grouped_results[group_id] = []
                    grouped_results[group_id].append(res)
                
                print(f"üìä –°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(grouped_results)}")
                
                for group_id, group_results in grouped_results.items():
                    total_violations = 0
                    successful_detections = 0
                    
                    for res in group_results:
                        detection = res.get('detection', {})
                        if detection.get('success'):
                            successful_detections += 1
                            total_violations += len(detection.get('violations', []))
                    
                    print(f"   –ì—Ä—É–ø–ø–∞ {group_id+1}: {successful_detections}/{len(group_results)} —É—Å–ø–µ—à–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ü–∏–π, {total_violations} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
                
                self.results['multi_photo_analysis'] = {
                    'status': 'success',
                    'processing_time': processing_time,
                    'groups_processed': len(grouped_results),
                    'total_images': len(results)
                }
                
                return len(results) > 0
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
                self.results['multi_photo_analysis'] = {'status': 'failed', 'error': f"HTTP {response.status_code}"}
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –º—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            self.results['multi_photo_analysis'] = {'status': 'failed', 'error': str(e)}
            return False
    
    def test_system_endpoints(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö endpoints"""
        print("\n‚öôÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• ENDPOINTS")
        print("=" * 50)
        
        endpoints_to_test = [
            ('/health', 'Health Check'),
            ('/api/coordinates/statistics', 'System Statistics'),
            ('/api/violations/list', 'Violations List')
        ]
        
        working_endpoints = 0
        
        for endpoint, name in endpoints_to_test:
            try:
                response = requests.get(f"{self.base_url}{endpoint}", timeout=30)
                
                if response.status_code == 200:
                    print(f"‚úÖ {name}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    working_endpoints += 1
                else:
                    print(f"‚ùå {name}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå {name}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
        
        success_rate = working_endpoints / len(endpoints_to_test)
        print(f"\nüìä –°–∏—Å—Ç–µ–º–Ω—ã–µ endpoints: {working_endpoints}/{len(endpoints_to_test)} —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        return success_rate > 0.8
    
    def generate_integration_report(self, test_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüìã –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê –° BACKEND")
        print("=" * 70)
        
        total_tests = len(test_results)
        passed_tests = sum(1 for result in test_results if result[1])
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nüìù –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –†–ê–ó–î–ï–õ–ê–ú:")
        for test_name, result in test_results:
            status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            print(f"   {test_name}: {status}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        
        if 'ai_analysis' in self.results:
            ai_data = self.results['ai_analysis']
            if ai_data['status'] == 'success':
                print(f"   ü§ñ –ê–Ω–∞–ª–∏–∑ —Å –ò–ò: {ai_data['violations_count']} –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ {ai_data['processing_time']:.2f}—Å")
        
        if 'coordinate_analysis' in self.results:
            coord_data = self.results['coordinate_analysis']
            if coord_data['status'] == 'success':
                print(f"   üìç –ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coord_data['success_rate']*100:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
        
        if 'batch_analysis' in self.results:
            batch_data = self.results['batch_analysis']
            if batch_data['status'] == 'success':
                print(f"   üì¶ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {batch_data['images_processed']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {batch_data['processing_time']:.2f}—Å")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if passed_tests == total_tests:
            print("üéâ –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        elif passed_tests >= total_tests * 0.8:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã")
        else:
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
            print("üõ†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints –∏ frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        
        return passed_tests / total_tests

def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –§–†–û–ù–¢–ï–ù–î–ê –° BACKEND")
    print("=" * 80)
    print("ü§ñ –ò–ò –ê–Ω–∞–ª–∏–∑ + üìù OCR + üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã + üì¶ –ü–∞–∫–µ—Ç–Ω—ã–π + üñºÔ∏è –ú—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ")
    print("=" * 80)
    
    tester = FrontendIntegrationTester()
    test_results = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    if not tester.check_frontend_availability():
        print("\n‚ö†Ô∏è Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ backend API")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
    tests = [
        ("–ê–Ω–∞–ª–∏–∑ —Å –ò–ò", tester.test_ai_analysis_api),
        ("OCR –ê–Ω–∞–ª–∏–∑", tester.test_ocr_analysis_api),
        ("–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", tester.test_coordinate_analysis_api),
        ("–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑", tester.test_batch_analysis_api),
        ("–ú—É–ª—å—Ç–∏-—Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑", tester.test_multi_photo_analysis_api),
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ endpoints", tester.test_system_endpoints)
    ]
    
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {test_name}")
        try:
            result = test_func()
            test_results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ {test_name}: {e}")
            test_results.append((test_name, False))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    success_rate = tester.generate_integration_report(test_results)
    
    return success_rate >= 0.8

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
