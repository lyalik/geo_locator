#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Mistral AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import os
import sys
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

def test_mistral_api_direct():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Mistral API"""
    print("üîë –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MISTRAL AI API")
    print("=" * 50)
    
    api_key = os.getenv('MISTRAL_API_KEY')
    model = os.getenv('MISTRAL_MODEL', 'pixtral-12b-2409')
    
    if not api_key:
        print("‚ùå MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model}")
    print(f"üîë API –∫–ª—é—á: {api_key[:8]}...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    data = {
        "model": model,
        "messages": [
            {
                "role": "user", 
                "content": "–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?"
            }
        ],
        "max_tokens": 100
    }
    
    try:
        print("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = requests.post(
            'https://api.mistral.ai/v1/chat/completions',
            headers=headers,
            json=data,
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            message = result['choices'][0]['message']['content']
            print(f"‚úÖ –û—Ç–≤–µ—Ç Mistral AI: {message}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_mistral_service():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å"""
    print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MISTRAL SERVICE")
    print("=" * 50)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
        sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')
        
        from services.mistral_ai_service import MistralAIService
        
        service = MistralAIService()
        print(f"ü§ñ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìã –ú–æ–¥–µ–ª—å: {service.model}")
        print(f"üîë API –∫–ª—é—á: {'‚úÖ –ï—Å—Ç—å' if service.api_key else '‚ùå –ù–µ—Ç'}")
        print(f"üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º: {'‚úÖ –î–∞' if service.demo_mode else '‚ùå –ù–µ—Ç'}")
        
        if service.demo_mode:
            print("‚ö†Ô∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ - API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        test_image = '/home/denis/Documents/Hackathon_2025/geo_locator/test_image.jpg'
        if os.path.exists(test_image):
            print(f"üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {test_image}")
            
            result = service.analyze_image(
                test_image, 
                "–û–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ"
            )
            
            if result.get('success'):
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω:")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ: {e}")
        return False

def test_coordinate_detection_with_mistral():
    """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å Mistral AI"""
    print("\nüìç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ API
        test_image = '/home/denis/Documents/Hackathon_2025/geo_locator/test_image.jpg'
        if not os.path.exists(test_image):
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
            return False
        
        print(f"üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {test_image}")
        
        with open(test_image, 'rb') as f:
            files = {'file': f}
            response = requests.post(
                'http://localhost:5001/api/coordinates/detect',
                files=files,
                timeout=60
            )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {result.get('coordinates')}")
            print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0)}")
            print(f"üì¶ –û–±—ä–µ–∫—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(result.get('objects', []))}")
            print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {result.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MISTRAL AI")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π API
    results.append(("–ü—Ä—è–º–æ–π Mistral API", test_mistral_api_direct()))
    
    # –¢–µ—Å—Ç 2: –ù–∞—à —Å–µ—Ä–≤–∏—Å
    results.append(("Mistral Service", test_mistral_service()))
    
    # –¢–µ—Å—Ç 3: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
    results.append(("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ", test_coordinate_detection_with_mistral()))
    
    # –ò—Ç–æ–≥–∏
    print("\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 60)
    
    passed = 0
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Mistral AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Mistral AI")
