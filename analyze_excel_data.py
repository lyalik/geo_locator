#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–æ–≤ –∏ –∏—Ö —Å–≤—è–∑–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ
"""

import pandas as pd
import os
from pathlib import Path
import json

def analyze_excel_file(excel_path, images_dir):
    """–ê–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–∞ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    try:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {excel_path.name}")
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(excel_path)
        
        print(f"üìã –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üìù –°—Ç–æ–ª–±—Ü—ã: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        print("\nüîç –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:")
        print(df.head(3).to_string())
        
        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å UUID –∏–ª–∏ ID
        uuid_columns = []
        for col in df.columns:
            if any(keyword in col.lower() for keyword in ['id', 'uuid', 'guid', 'key']):
                uuid_columns.append(col)
        
        if uuid_columns:
            print(f"\nüîë –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å ID: {uuid_columns}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if images_dir.exists():
                image_files = list(images_dir.glob("*.jpg"))
                image_uuids = [f.stem for f in image_files]
                
                print(f"üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ: {len(image_files)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ UUID
                for col in uuid_columns:
                    excel_uuids = df[col].astype(str).tolist()
                    matches = set(excel_uuids) & set(image_uuids)
                    print(f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å—Ç–æ–ª–±—Ü—É '{col}': {len(matches)}")
        
        # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coord_columns = []
        for col in df.columns:
            if any(keyword in col.lower() for keyword in ['lat', 'lon', 'coord', 'x', 'y', '—à–∏—Ä–æ—Ç–∞', '–¥–æ–ª–≥–æ—Ç–∞']):
                coord_columns.append(col)
        
        if coord_columns:
            print(f"\nüó∫Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {coord_columns}")
        
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        violation_columns = []
        for col in df.columns:
            if any(keyword in col.lower() for keyword in ['violation', 'issue', '–Ω–∞—Ä—É—à–µ–Ω–∏–µ', '–ø—Ä–æ–±–ª–µ–º–∞', 'category', 'type']):
                violation_columns.append(col)
        
        if violation_columns:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏: {violation_columns}")
        
        return {
            'file': excel_path.name,
            'rows': df.shape[0],
            'columns': df.shape[1],
            'column_names': list(df.columns),
            'uuid_columns': uuid_columns,
            'coord_columns': coord_columns,
            'violation_columns': violation_columns,
            'sample_data': df.head(2).to_dict()
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {excel_path.name}: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    data_path = Path("backend/uploads/metadata/data")
    
    if not data_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {data_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    results = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π Excel —Ñ–∞–π–ª
    for excel_file in data_path.glob("*.xlsx"):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        base_name = excel_file.stem
        images_dir = data_path / base_name
        
        result = analyze_excel_file(excel_file, images_dir)
        if result:
            results.append(result)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    output_file = Path("backend/uploads/EXCEL_ANALYSIS.json")
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_rows = sum(r['rows'] for r in results)
    total_images = 0
    
    for item in data_path.iterdir():
        if item.is_dir():
            image_count = len(list(item.glob("*.jpg")))
            total_images += image_count
    
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üìä Excel —Ñ–∞–π–ª–æ–≤: {len(results)}")
    print(f"üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ Excel: {total_rows}")
    print(f"üìÅ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    print(f"üîó –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {total_rows/total_images:.2f}" if total_images > 0 else "")

if __name__ == "__main__":
    print("üîç –ê–Ω–∞–ª–∏–∑ Excel —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    main()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
