import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  Alert,
  TouchableOpacity,
  Modal,
  ScrollView,
  ActivityIndicator,
  Dimensions
} from 'react-native';
import * as Location from 'expo-location';
import { Ionicons } from '@expo/vector-icons';
import ApiService from '../services/ApiService';
import YandexMapView from '../components/YandexMapView';

const { width, height } = Dimensions.get('window');

export default function MapScreen() {
  const [location, setLocation] = useState(null);
  const [violations, setViolations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedViolation, setSelectedViolation] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [showOSMContext, setShowOSMContext] = useState(false);
  const [mapType, setMapType] = useState('standard'); // standard, satellite, hybrid
  const [showMapTypeSelector, setShowMapTypeSelector] = useState(false);
  const [osmBuildings, setOsmBuildings] = useState([]);
  const [loadingOSM, setLoadingOSM] = useState(false);
  const [mapRegion, setMapRegion] = useState({
    latitude: 45.0355, // –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    longitude: 38.9753,
    latitudeDelta: 0.0922,
    longitudeDelta: 0.0421,
  });

  useEffect(() => {
    initializeMap();
  }, []);

  const initializeMap = async () => {
    await getCurrentLocation();
    await loadViolations();
  };

  const getCurrentLocation = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
        return;
      }

      const currentLocation = await Location.getCurrentPositionAsync({});
      const userLocation = {
        latitude: currentLocation.coords.latitude,
        longitude: currentLocation.coords.longitude,
      };
      
      setLocation(userLocation);
      setMapRegion({
        ...userLocation,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    }
  };

  const centerOnUserLocation = async () => {
    try {
      console.log('üìç –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
      setLoading(true);
      
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
        return;
      }

      const currentLocation = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
      });
      
      const userLocation = {
        latitude: currentLocation.coords.latitude,
        longitude: currentLocation.coords.longitude,
      };
      
      console.log('üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userLocation);
      
      setLocation(userLocation);
      setMapRegion({
        ...userLocation,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
      
      Alert.alert('–£—Å–ø–µ—Ö', '–ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    } finally {
      setLoading(false);
    }
  };

  const searchLocation = async () => {
    Alert.prompt(
      '–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞',
      '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        { 
          text: '–ù–∞–π—Ç–∏', 
          onPress: async (searchText) => {
            if (!searchText) return;
            
            try {
              setLoading(true);
              const response = await ApiService.geocodeAddress(searchText);
              
              if (response.success && response.data && response.data.length > 0) {
                const result = response.data[0];
                const newRegion = {
                  latitude: result.latitude,
                  longitude: result.longitude,
                  latitudeDelta: 0.01,
                  longitudeDelta: 0.01,
                };
                setMapRegion(newRegion);
                Alert.alert('–ù–∞–π–¥–µ–Ω–æ', `–ú–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ: ${result.address || searchText}`);
              } else {
                Alert.alert('–ù–µ –Ω–∞–π–¥–µ–Ω–æ', '–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.');
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
              Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
            } finally {
              setLoading(false);
            }
          }
        }
      ],
      'plain-text'
    );
  };

  const loadViolations = async () => {
    try {
      setLoading(true);
      const response = await ApiService.getViolationsWithCoordinates();
      
      if (response.success && response.data) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π
        const violationsWithCoords = response.data.map(item => ({
          id: item.violation_id || item.id,
          category: item.category || '–ù–∞—Ä—É—à–µ–Ω–∏–µ',
          confidence: item.confidence || 0,
          latitude: parseFloat(item.latitude),
          longitude: parseFloat(item.longitude),
          created_at: item.created_at || item.timestamp,
          address: item.address || '',
          source: item.source || 'system'
        })).filter(item => 
          item.latitude && item.longitude && 
          !isNaN(item.latitude) && !isNaN(item.longitude)
        );
        
        console.log(`üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${violationsWithCoords.length} –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏`);
        console.log('–ü–µ—Ä–≤—ã–µ 3 –Ω–∞—Ä—É—à–µ–Ω–∏—è:', violationsWithCoords.slice(0, 3));
        setViolations(violationsWithCoords);
        
        // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω OSM –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º OSM –¥–∞–Ω–Ω—ã–µ
        if (showOSMContext) {
          await loadOSMBuildings();
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:', error);
      Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö');
    } finally {
      setLoading(false);
    }
  };

  const loadOSMBuildings = async () => {
    try {
      setLoadingOSM(true);
      console.log('üè¢ –ó–∞–≥—Ä—É–∂–∞–µ–º OSM –∑–¥–∞–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º OSM –∑–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã
      const bbox = `${mapRegion.longitude - mapRegion.longitudeDelta},${mapRegion.latitude - mapRegion.latitudeDelta},${mapRegion.longitude + mapRegion.longitudeDelta},${mapRegion.latitude + mapRegion.latitudeDelta}`;
      
      const response = await ApiService.getOSMBuildings(bbox, 50);
      
      if (response.success && response.data) {
        const buildings = response.data.map(building => ({
          id: building.osm_id || building.id,
          name: building.name || building.tags?.name || '–ó–¥–∞–Ω–∏–µ',
          latitude: parseFloat(building.lat || building.latitude),
          longitude: parseFloat(building.lon || building.longitude),
          levels: building.levels || building.tags?.['building:levels'],
          height: building.height || building.tags?.height,
          amenity: building.amenity || building.tags?.amenity,
          building_type: building.building_type || building.tags?.building
        })).filter(building => 
          building.latitude && building.longitude && 
          !isNaN(building.latitude) && !isNaN(building.longitude)
        );
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${buildings.length} OSM –∑–¥–∞–Ω–∏–π`);
        setOsmBuildings(buildings);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OSM –∑–¥–∞–Ω–∏–π:', error);
      // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ
      const mockBuildings = [
        { id: 1, name: '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å', latitude: 55.7558, longitude: 37.6176, levels: 1, amenity: 'historic' },
        { id: 2, name: '–ì–£–ú', latitude: 55.7520, longitude: 37.6156, levels: 3, amenity: 'shop' },
        { id: 3, name: '–ë–æ–ª—å—à–æ–π —Ç–µ–∞—Ç—Ä', latitude: 55.7539, longitude: 37.6208, levels: 4, amenity: 'theatre' }
      ];
      setOsmBuildings(mockBuildings);
    } finally {
      setLoadingOSM(false);
    }
  };

  const toggleOSMContext = async () => {
    const newShowOSM = !showOSMContext;
    setShowOSMContext(newShowOSM);
    
    if (newShowOSM && osmBuildings.length === 0) {
      await loadOSMBuildings();
    }
  };

  const handleViolationPress = async (violation) => {
    console.log('üìç –ö–ª–∏–∫ –ø–æ –Ω–∞—Ä—É—à–µ–Ω–∏—é:', violation.id);
    
    // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω OSM –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (showOSMContext) {
      try {
        const osmContext = await ApiService.getOSMUrbanContext(
          violation.latitude, 
          violation.longitude
        );
        
        if (osmContext.success) {
          violation.osmContext = osmContext.data;
          console.log('‚úÖ OSM –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏—è');
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å OSM –∫–æ–Ω—Ç–µ–∫—Å—Ç:', error.message);
      }
    }
    
    setSelectedViolation(violation);
    setModalVisible(true);
  };


  const getMarkerColor = (category) => {
    const colorMap = {
      'illegal_parking': '#f44336', // –ö—Ä–∞—Å–Ω—ã–π
      'garbage': '#ff9800', // –û—Ä–∞–Ω–∂–µ–≤—ã–π
      'road_damage': '#9c27b0', // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
      'illegal_construction': '#e91e63', // –†–æ–∑–æ–≤—ã–π
      'broken_lighting': '#3f51b5', // –°–∏–Ω–∏–π
      'damaged_playground': '#009688', // –ë–∏—Ä—é–∑–æ–≤—ã–π
      'illegal_advertising': '#795548', // –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
      'broken_pavement': '#607d8b', // –°–µ—Ä—ã–π
    };
    return colorMap[category] || '#2196F3'; // –°–∏–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };

  const formatDate = (dateString) => {
    if (!dateString) return '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
    } catch {
      return '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    }
  };

  const getCategoryName = (category) => {
    const categoryMap = {
      'illegal_parking': '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞',
      'garbage': '–ú—É—Å–æ—Ä',
      'road_damage': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ—Ä–æ–≥–∏',
      'illegal_construction': '–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–π–∫–∞',
      'broken_lighting': '–°–ª–æ–º–∞–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ',
      'damaged_playground': '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞',
      'illegal_advertising': '–ù–µ–∑–∞–∫–æ–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞',
      'broken_pavement': '–†–∞–∑–±–∏—Ç—ã–π —Ç—Ä–æ—Ç—É–∞—Ä',
    };
    return categoryMap[category] || category || '–ù–∞—Ä—É—à–µ–Ω–∏–µ';
  };

  const showViolationDetails = (violation) => {
    setSelectedViolation(violation);
    setModalVisible(true);
  };

  return (
    <View style={styles.container}>
      {loading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#2196F3" />
          <Text style={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</Text>
        </View>
      ) : (
        <>
          {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <View style={styles.controlPanel}>
            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å OSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ */}
            <TouchableOpacity
              style={[styles.controlButton, showOSMContext && styles.controlButtonActive]}
              onPress={toggleOSMContext}
            >
              <Ionicons 
                name="map" 
                size={20} 
                color={showOSMContext ? "#4CAF50" : "#666"} 
              />
              <Text style={[styles.controlButtonText, showOSMContext && styles.controlButtonTextActive]}>
                OSM
              </Text>
              {loadingOSM && (
                <ActivityIndicator size="small" color="#4CAF50" style={{ marginLeft: 5 }} />
              )}
            </TouchableOpacity>
            
            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç */}
            <TouchableOpacity
              style={styles.controlButton}
              onPress={() => setShowMapTypeSelector(!showMapTypeSelector)}
            >
              <Ionicons name="layers" size={20} color="#666" />
              <Text style={styles.controlButtonText}>–ö–∞—Ä—Ç–∞</Text>
            </TouchableOpacity>
            
            {/* –°—á–µ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π */}
            <View style={styles.violationCounter}>
              <Ionicons name="warning" size={16} color="#f44336" />
              <Text style={styles.violationCounterText}>{violations.length}</Text>
            </View>
          </View>
          
          {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–∞—Ä—Ç */}
          {showMapTypeSelector && (
            <View style={styles.mapTypeSelector}>
              <TouchableOpacity
                style={[
                  styles.mapTypeButton,
                  mapType === 'standard' && styles.mapTypeButtonActive
                ]}
                onPress={() => setMapType('standard')}
              >
                <Text style={styles.mapTypeButtonText}>OpenStreetMap</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.mapTypeButton,
                  mapType === 'yandex' && styles.mapTypeButtonActive
                ]}
                onPress={() => setMapType('yandex')}
              >
                <Text style={styles.mapTypeButtonText}>–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.mapTypeButton,
                  mapType === '2gis' && styles.mapTypeButtonActive
                ]}
                onPress={() => setMapType('2gis')}
              >
                <Text style={styles.mapTypeButtonText}>2–ì–ò–°</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.mapTypeButton,
                  mapType === 'satellite' && styles.mapTypeButtonActive
                ]}
                onPress={() => setMapType('satellite')}
              >
                <Text style={styles.mapTypeButtonText}>–°–ø—É—Ç–Ω–∏–∫</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.mapTypeButton,
                  mapType === 'hybrid' && styles.mapTypeButtonActive
                ]}
                onPress={() => setMapType('hybrid')}
              >
                <Text style={styles.mapTypeButtonText}>–ì–∏–±—Ä–∏–¥</Text>
              </TouchableOpacity>
            </View>
          )}
          
          <YandexMapView
            region={mapRegion}
            violations={violations}
            osmBuildings={showOSMContext ? osmBuildings : []}
            userLocation={location}
            mapType={mapType}
            onViolationPress={handleViolationPress}
            onRegionChange={setMapRegion}
          />
          
          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ */}
          <TouchableOpacity
            style={styles.searchButton}
            onPress={searchLocation}
          >
            <Ionicons name="search" size={24} color="white" />
          </TouchableOpacity>

          {/* –ö–Ω–æ–ø–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
          <TouchableOpacity
            style={styles.centerButton}
            onPress={centerOnUserLocation}
          >
            <Ionicons name="locate" size={24} color="white" />
          </TouchableOpacity>

          {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
          <TouchableOpacity
            style={styles.refreshButton}
            onPress={loadViolations}
          >
            <Ionicons name="refresh" size={24} color="white" />
          </TouchableOpacity>

          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
          <TouchableOpacity
            style={styles.fullscreenButton}
            onPress={() => Alert.alert('–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º', '–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏')}
          >
            <Ionicons name="expand" size={24} color="white" />
          </TouchableOpacity>
        </>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <View style={styles.statsContainer}>
        <Text style={styles.statsText}>
          üìç –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ: {violations.length}
        </Text>
        {showOSMContext && (
          <Text style={styles.statsText}>
            üè¢ OSM –∑–¥–∞–Ω–∏–π: {osmBuildings.length}
          </Text>
        )}
      </View>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <ScrollView>
              {selectedViolation && (
                <>
                  <View style={styles.modalHeader}>
                    <Text style={styles.modalTitle}>
                      {getCategoryName(selectedViolation.category)}
                    </Text>
                    <TouchableOpacity
                      style={styles.closeButton}
                      onPress={() => setModalVisible(false)}
                    >
                      <Ionicons name="close" size={24} color="#666" />
                    </TouchableOpacity>
                  </View>

                  <View style={styles.detailItem}>
                    <Text style={styles.detailLabel}>üìÖ –î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:</Text>
                    <Text style={styles.detailValue}>
                      {formatDate(selectedViolation.created_at)}
                    </Text>
                  </View>

                  <View style={styles.detailItem}>
                    <Text style={styles.detailLabel}>üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</Text>
                    <Text style={styles.detailValue}>
                      {parseFloat(selectedViolation.latitude).toFixed(6)}, {parseFloat(selectedViolation.longitude).toFixed(6)}
                    </Text>
                  </View>

                  {selectedViolation.confidence && (
                    <View style={styles.detailItem}>
                      <Text style={styles.detailLabel}>üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</Text>
                      <Text style={styles.detailValue}>
                        {Math.round(selectedViolation.confidence * 100)}%
                      </Text>
                    </View>
                  )}

                  {selectedViolation.source && (
                    <View style={styles.detailItem}>
                      <Text style={styles.detailLabel}>ü§ñ –ò—Å—Ç–æ—á–Ω–∏–∫:</Text>
                      <Text style={styles.detailValue}>
                        {selectedViolation.source}
                      </Text>
                    </View>
                  )}

                  {selectedViolation.address && (
                    <View style={styles.detailItem}>
                      <Text style={styles.detailLabel}>üè† –ê–¥—Ä–µ—Å:</Text>
                      <Text style={styles.detailValue}>
                        {selectedViolation.address}
                      </Text>
                    </View>
                  )}

                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => {
                      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                      Alert.alert('–§—É–Ω–∫—Ü–∏—è', '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ');
                    }}
                  >
                    <Ionicons name="document-text" size={20} color="white" />
                    <Text style={styles.actionButtonText}>–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç</Text>
                  </TouchableOpacity>
                </>
              )}
            </ScrollView>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f5f5f5',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  controlPanel: {
    position: 'absolute',
    top: 50,
    left: 20,
    right: 20,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    zIndex: 1000,
  },
  controlButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  controlButtonActive: {
    backgroundColor: '#e8f5e8',
    borderColor: '#4CAF50',
    borderWidth: 1,
  },
  controlButtonText: {
    fontSize: 12,
    color: '#666',
    marginLeft: 5,
    fontWeight: '500',
  },
  controlButtonTextActive: {
    color: '#4CAF50',
  },
  violationCounter: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(244, 67, 54, 0.1)',
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 15,
    borderColor: '#f44336',
    borderWidth: 1,
  },
  violationCounterText: {
    fontSize: 12,
    color: '#f44336',
    marginLeft: 4,
    fontWeight: 'bold',
  },
  mapTypeSelector: {
    position: 'absolute',
    top: 100,
    right: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 8,
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    zIndex: 1000,
  },
  mapTypeButton: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  mapTypeButtonActive: {
    backgroundColor: '#e3f2fd',
  },
  mapTypeButtonText: {
    fontSize: 14,
    color: '#333',
    fontWeight: '500',
  },
  searchButton: {
    position: 'absolute',
    bottom: 280,
    right: 20,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#FF9800',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  centerButton: {
    position: 'absolute',
    bottom: 220,
    right: 20,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#2196F3',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  refreshButton: {
    position: 'absolute',
    bottom: 160,
    right: 20,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#4CAF50',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  fullscreenButton: {
    position: 'absolute',
    bottom: 100,
    right: 20,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: '#9C27B0',
    justifyContent: 'center',
    alignItems: 'center',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  statsContainer: {
    position: 'absolute',
    bottom: 20,
    left: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    padding: 10,
    borderRadius: 8,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
  },
  statsText: {
    fontSize: 14,
    color: '#333',
    fontWeight: '500',
  },
  calloutContainer: {
    width: 200,
    padding: 10,
  },
  calloutTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  calloutDate: {
    fontSize: 12,
    color: '#666',
    marginBottom: 5,
  },
  calloutTap: {
    fontSize: 11,
    color: '#2196F3',
    fontStyle: 'italic',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: 'white',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: height * 0.7,
    padding: 20,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    flex: 1,
  },
  closeButton: {
    padding: 5,
  },
  detailItem: {
    marginBottom: 15,
  },
  detailLabel: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#666',
    marginBottom: 5,
  },
  detailValue: {
    fontSize: 14,
    color: '#333',
  },
  actionButton: {
    backgroundColor: '#2196F3',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 15,
    borderRadius: 10,
    marginTop: 20,
  },
  actionButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 10,
  },
});
