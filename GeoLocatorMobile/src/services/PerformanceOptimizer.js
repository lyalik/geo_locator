import * as ImageManipulator from 'expo-image-manipulator';
import AsyncStorage from '@react-native-async-storage/async-storage';

class PerformanceOptimizer {
  constructor() {
    this.CACHE_KEY = 'performance_cache';
    this.MAX_IMAGE_SIZE = 1920; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    this.COMPRESSION_QUALITY = 0.8; // –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
    this.CACHE_SIZE_LIMIT = 50 * 1024 * 1024; // 50MB –ª–∏–º–∏—Ç –∫—ç—à–∞
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async optimizeImage(imageUri, options = {}) {
    try {
      const {
        maxSize = this.MAX_IMAGE_SIZE,
        quality = this.COMPRESSION_QUALITY,
        format = ImageManipulator.SaveFormat.JPEG
      } = options;

      console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
        originalUri: imageUri,
        maxSize,
        quality,
        format
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
      const imageInfo = await this.getImageInfo(imageUri);
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:', imageInfo);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
      const needsResize = imageInfo.width > maxSize || imageInfo.height > maxSize;
      
      if (!needsResize && quality >= 1.0) {
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏');
        return {
          uri: imageUri,
          optimized: false,
          originalSize: imageInfo,
          finalSize: imageInfo
        };
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
      let newWidth = imageInfo.width;
      let newHeight = imageInfo.height;

      if (needsResize) {
        const aspectRatio = imageInfo.width / imageInfo.height;
        
        if (imageInfo.width > imageInfo.height) {
          newWidth = Math.min(maxSize, imageInfo.width);
          newHeight = newWidth / aspectRatio;
        } else {
          newHeight = Math.min(maxSize, imageInfo.height);
          newWidth = newHeight * aspectRatio;
        }

        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
        newWidth = Math.round(newWidth);
        newHeight = Math.round(newHeight);
      }

      console.log('üéØ –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã:', { newWidth, newHeight });

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
      const manipulatorActions = [];

      if (needsResize) {
        manipulatorActions.push({
          resize: { width: newWidth, height: newHeight }
        });
      }

      const result = await ImageManipulator.manipulateAsync(
        imageUri,
        manipulatorActions,
        {
          compress: quality,
          format: format,
          base64: false
        }
      );

      const finalInfo = await this.getImageInfo(result.uri);

      console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        originalSize: `${imageInfo.width}x${imageInfo.height}`,
        finalSize: `${finalInfo.width}x${finalInfo.height}`,
        compressionRatio: ((imageInfo.fileSize - finalInfo.fileSize) / imageInfo.fileSize * 100).toFixed(1) + '%'
      });

      return {
        uri: result.uri,
        optimized: true,
        originalSize: imageInfo,
        finalSize: finalInfo,
        compressionRatio: (imageInfo.fileSize - finalInfo.fileSize) / imageInfo.fileSize
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return {
        uri: imageUri,
        optimized: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
  async getImageInfo(imageUri) {
    try {
      // –î–ª—è Expo –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
      const response = await fetch(imageUri);
      const blob = await response.blob();
      
      return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => {
          resolve({
            width: img.width,
            height: img.height,
            fileSize: blob.size,
            type: blob.type
          });
        };
        img.onerror = reject;
        img.src = imageUri;
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:', error);
      return {
        width: 0,
        height: 0,
        fileSize: 0,
        type: 'unknown'
      };
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  async createThumbnail(imageUri, size = 200) {
    try {
      console.log('üñºÔ∏è –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é:', { imageUri, size });

      const result = await ImageManipulator.manipulateAsync(
        imageUri,
        [{ resize: { width: size, height: size } }],
        {
          compress: 0.7,
          format: ImageManipulator.SaveFormat.JPEG,
          base64: true
        }
      );

      return {
        uri: result.uri,
        base64: result.base64,
        size: size
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é:', error);
      return null;
    }
  }

  // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async batchOptimizeImages(imageUris, options = {}) {
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é ${imageUris.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    
    const results = [];
    let totalOriginalSize = 0;
    let totalFinalSize = 0;

    for (let i = 0; i < imageUris.length; i++) {
      const imageUri = imageUris[i];
      console.log(`üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/${imageUris.length}`);
      
      try {
        const result = await this.optimizeImage(imageUri, options);
        results.push(result);
        
        if (result.originalSize && result.finalSize) {
          totalOriginalSize += result.originalSize.fileSize || 0;
          totalFinalSize += result.finalSize.fileSize || 0;
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, error);
        results.push({
          uri: imageUri,
          optimized: false,
          error: error.message
        });
      }
    }

    const totalCompressionRatio = totalOriginalSize > 0 
      ? (totalOriginalSize - totalFinalSize) / totalOriginalSize 
      : 0;

    console.log('‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      processed: results.length,
      totalCompressionRatio: (totalCompressionRatio * 100).toFixed(1) + '%',
      savedBytes: totalOriginalSize - totalFinalSize
    });

    return {
      results,
      stats: {
        processed: results.length,
        optimized: results.filter(r => r.optimized).length,
        totalOriginalSize,
        totalFinalSize,
        totalCompressionRatio,
        savedBytes: totalOriginalSize - totalFinalSize
      }
    };
  }

  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  async cacheAnalysisResult(imageUri, analysisResult) {
    try {
      const cacheKey = this.generateCacheKey(imageUri);
      const cacheData = {
        timestamp: Date.now(),
        imageUri,
        result: analysisResult
      };

      const existingCache = await this.getCache();
      existingCache[cacheKey] = cacheData;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await this.cleanupCache(existingCache);
      
      await AsyncStorage.setItem(this.CACHE_KEY, JSON.stringify(existingCache));
      console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω:', cacheKey);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  async getCachedAnalysisResult(imageUri) {
    try {
      const cacheKey = this.generateCacheKey(imageUri);
      const cache = await this.getCache();
      
      const cachedData = cache[cacheKey];
      if (cachedData) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞ (24 —á–∞—Å–∞)
        const maxAge = 24 * 60 * 60 * 1000;
        if (Date.now() - cachedData.timestamp < maxAge) {
          console.log('üéØ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', cacheKey);
          return cachedData.result;
        } else {
          console.log('‚è∞ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞—Ä–µ–ª:', cacheKey);
          delete cache[cacheKey];
          await AsyncStorage.setItem(this.CACHE_KEY, JSON.stringify(cache));
        }
      }
      
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∫—ç—à–∞
  async getCache() {
    try {
      const cacheJson = await AsyncStorage.getItem(this.CACHE_KEY);
      return cacheJson ? JSON.parse(cacheJson) : {};
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞:', error);
      return {};
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  async cleanupCache(cache = null) {
    try {
      if (!cache) {
        cache = await this.getCache();
      }

      const entries = Object.entries(cache);
      let totalSize = JSON.stringify(cache).length;

      if (totalSize > this.CACHE_SIZE_LIMIT) {
        console.log('üßπ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫—ç—à–∞, –Ω–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        entries.sort((a, b) => a[1].timestamp - b[1].timestamp);
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–µ–º –ª–∏–º–∏—Ç–∞
        while (totalSize > this.CACHE_SIZE_LIMIT * 0.8 && entries.length > 0) {
          const [key] = entries.shift();
          delete cache[key];
          totalSize = JSON.stringify(cache).length;
        }

        await AsyncStorage.setItem(this.CACHE_KEY, JSON.stringify(cache));
        console.log('‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:', totalSize);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
  generateCacheKey(imageUri) {
    // –ü—Ä–æ—Å—Ç–æ–π —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ URI
    let hash = 0;
    for (let i = 0; i < imageUri.length; i++) {
      const char = imageUri.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
    }
    return `cache_${Math.abs(hash)}`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async getPerformanceStats() {
    try {
      const cache = await this.getCache();
      const cacheSize = JSON.stringify(cache).length;
      const cacheEntries = Object.keys(cache).length;

      return {
        cacheSize: cacheSize,
        cacheSizeMB: (cacheSize / (1024 * 1024)).toFixed(2),
        cacheEntries: cacheEntries,
        cacheSizeLimit: this.CACHE_SIZE_LIMIT,
        cacheLimitMB: (this.CACHE_SIZE_LIMIT / (1024 * 1024)).toFixed(2),
        cacheUsagePercent: ((cacheSize / this.CACHE_SIZE_LIMIT) * 100).toFixed(1)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        cacheSize: 0,
        cacheSizeMB: '0.00',
        cacheEntries: 0,
        cacheSizeLimit: this.CACHE_SIZE_LIMIT,
        cacheLimitMB: (this.CACHE_SIZE_LIMIT / (1024 * 1024)).toFixed(2),
        cacheUsagePercent: '0.0'
      };
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞
  async clearAllCache() {
    try {
      await AsyncStorage.removeItem(this.CACHE_KEY);
      console.log('üóëÔ∏è –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
      return false;
    }
  }
}

export default new PerformanceOptimizer();
