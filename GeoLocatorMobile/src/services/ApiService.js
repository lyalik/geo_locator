import axios from 'axios';
import { Platform } from 'react-native';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = Platform.OS === 'web' && typeof window !== 'undefined' && window.location?.hostname === 'localhost'
  ? 'http://localhost:5001'  // –í–µ–±-–≤–µ—Ä—Å–∏—è
  : 'http://192.168.1.67:5001'; // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è

class ApiService {
  constructor() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ApiService...');
    console.log('üåê Platform.OS:', Platform.OS);
    console.log('üîó API_BASE_URL:', API_BASE_URL);
    console.log('üåç Window location:', typeof window !== 'undefined' ? window.location?.hostname : 'undefined');
    
    this.api = axios.create({
      baseURL: API_BASE_URL,
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    
    console.log('‚úÖ ApiService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å baseURL:', this.api.defaults.baseURL);

    // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.api.interceptors.request.use(
      async (config) => {
        try {
          const AsyncStorage = (await import('@react-native-async-storage/async-storage')).default;
          const userData = await AsyncStorage.getItem('user');
          if (userData) {
            const user = JSON.parse(userData);
            const token = await AsyncStorage.getItem('authToken') || `session_${user.id}_${Date.now()}`;
            config.headers.Authorization = `Bearer ${token}`;
          }
        } catch (error) {
          console.log('Error getting auth token:', error);
        }
        return config;
      },
      (error) => {
        return Promise.reject(error);
      }
    );

    // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    this.api.interceptors.response.use(
      (response) => response,
      (error) => {
        console.error('API Error:', error);
        if (error.code === 'ECONNABORTED') {
          throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.');
        }
        if (error.response?.status === 500) {
          throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        if (error.response?.status === 404) {
          throw new Error('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
        }
        if (error.response?.status === 401) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        }
        throw error;
      }
    );
  }

  /**
   * –î–µ—Ç–µ–∫—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
   * @param {FormData} formData - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
   * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  async detectViolation(formData) {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞—Ä—É—à–µ–Ω–∏–π...');
      console.log('üì° API Base URL:', this.api.defaults.baseURL);
      console.log('üìù FormData —Å–æ–¥–µ—Ä–∂–∏—Ç:', Array.from(formData.keys()));
      
      const response = await this.api.post('/api/violations/detect', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
      });
      
      console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', response.status);
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:');
      console.error('üîó URL:', error.config?.url);
      console.error('üì° Base URL:', error.config?.baseURL);
      console.error('üåê Network Error:', error.message);
      console.error('üì± Error Code:', error.code);
      console.error('üîç Full Error:', error);
      
      if (error.response) {
        console.error('üì§ Response Status:', error.response.status);
        console.error('üì• Response Data:', error.response.data);
      } else if (error.request) {
        console.error('üì° No Response Received:', error.request);
      }
      
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏
   * @param {number} latitude - –®–∏—Ä–æ—Ç–∞
   * @param {number} longitude - –î–æ–ª–≥–æ—Ç–∞  
   * @param {number} radius - –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000–º)
   * @returns {Promise} –°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
   */
  async getNearbyViolations(latitude, longitude, radius = 1000) {
    try {
      const response = await this.api.get('/api/violations/list', {
        params: {
          latitude,
          longitude,
          radius,
        },
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è –∫–∞—Ä—Ç—ã
   * @returns {Promise} –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
   */
  async getAllViolations() {
    try {
      const response = await this.api.get('/api/violations/list');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * @returns {Promise} –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  async getAnalytics() {
    try {
      const response = await this.api.get('/api/violations/analytics');
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∑–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Promise} –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫
   */
  async getUserHistory(userId = null) {
    try {
      const params = userId ? { user_id: userId } : {};
      const response = await this.api.get('/api/violations/history', { params });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
   * @param {string} address - –ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
   * @returns {Promise} –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞
   */
  async geocodeAddress(address) {
    try {
      const response = await this.api.get('/api/geo/geocode', {
        params: { address },
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
   * @param {number} latitude - –®–∏—Ä–æ—Ç–∞
   * @param {number} longitude - –î–æ–ª–≥–æ—Ç–∞
   * @returns {Promise} –ê–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
   */
  async reverseGeocode(latitude, longitude) {
    try {
      const response = await this.api.get('/api/geo/reverse', {
        params: { latitude, longitude },
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
   * @returns {Promise} –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
   */
  async checkServerStatus() {
    try {
      const response = await this.api.get('/health');
      return {
        online: true,
        message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
        ...response.data
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
      return {
        online: false,
        message: '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
   * @param {string} violationId - ID –Ω–∞—Ä—É—à–µ–Ω–∏—è
   * @returns {Promise} –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
   */
  async getViolationDetails(violationId) {
    try {
      const response = await this.api.get(`/api/violations/details/${violationId}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –Ω–∞—Ä—É—à–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
   * @param {string} violationId - ID –Ω–∞—Ä—É—à–µ–Ω–∏—è
   * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (notes, status)
   * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  async updateViolation(violationId, updateData) {
    try {
      const response = await this.api.put(`/api/violations/details/${violationId}`, updateData);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
   * @param {string} violationId - ID –Ω–∞—Ä—É—à–µ–Ω–∏—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteViolation(violationId, userId) {
    try {
      const response = await this.api.delete(`/api/violations/details/${violationId}`, {
        data: { user_id: userId }
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserStats(userId) {
    try {
      const response = await this.api.get(`/api/violations/user/${userId}/stats`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  async login(email, password) {
    try {
      const response = await this.api.post('/auth/login', {
        email,
        password
      }, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      const token = response.data.token || `session_${response.data.user?.id}_${Date.now()}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ AsyncStorage
      const AsyncStorage = (await import('@react-native-async-storage/async-storage')).default;
      await AsyncStorage.setItem('authToken', token);
      
      return {
        success: true,
        user: response.data.user,
        token: token
      };
    } catch (error) {
      console.error('Login failed:', error);
      return {
        success: false,
        message: error.response?.data?.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      };
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} username - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} email - Email
   * @param {string} password - –ü–∞—Ä–æ–ª—å
   * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  async register(username, email, password) {
    try {
      const response = await this.api.post('/auth/register', {
        username,
        email,
        password
      }, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      const token = response.data.token || `session_${response.data.user?.id}_${Date.now()}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ AsyncStorage
      const AsyncStorage = (await import('@react-native-async-storage/async-storage')).default;
      await AsyncStorage.setItem('authToken', token);
      
      return {
        success: true,
        user: response.data.user,
        token: token
      };
    } catch (error) {
      console.error('Registration failed:', error);
      return {
        success: false,
        message: error.response?.data?.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      };
    }
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   * @param {Array} files - –ú–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @param {Object} location - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {latitude, longitude}
   * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
   */
  async batchDetectViolations(files, location = null) {
    try {
      const formData = new FormData();
      
      files.forEach((file, index) => {
        formData.append('files', file);
      });

      if (location) {
        formData.append('latitude', location.latitude.toString());
        formData.append('longitude', location.longitude.toString());
      }

      const response = await this.api.post('/api/violations/batch_detect', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      });
      
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏:', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export default new ApiService();
