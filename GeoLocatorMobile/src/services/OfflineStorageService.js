import AsyncStorage from '@react-native-async-storage/async-storage';
import * as FileSystem from 'expo-file-system/legacy';
import * as Network from 'expo-network';

class OfflineStorageService {
  constructor() {
    this.OFFLINE_PHOTOS_KEY = 'offline_photos';
    this.PHOTOS_DIR = FileSystem.documentDirectory + 'offline_photos/';
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ
  async initializeOfflineStorage() {
    try {
      const dirInfo = await FileSystem.getInfoAsync(this.PHOTOS_DIR);
      if (!dirInfo.exists) {
        await FileSystem.makeDirectoryAsync(this.PHOTOS_DIR, { intermediates: true });
        console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ:', this.PHOTOS_DIR);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
  async isOnline() {
    try {
      const networkState = await Network.getNetworkStateAsync();
      return networkState.isConnected && networkState.isInternetReachable;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏:', error);
      return false;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
  async savePhotoOffline(photoUri, location, metadata = {}) {
    try {
      const timestamp = Date.now();
      const fileName = `photo_${timestamp}.jpg`;
      const offlinePhotoPath = this.PHOTOS_DIR + fileName;

      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      await FileSystem.copyAsync({
        from: photoUri,
        to: offlinePhotoPath
      });

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
      const offlinePhoto = {
        id: timestamp.toString(),
        localPath: offlinePhotoPath,
        originalUri: photoUri,
        location: location,
        timestamp: timestamp,
        uploaded: false,
        metadata: {
          ...metadata,
          savedOffline: true,
          deviceInfo: {
            platform: 'mobile',
            timestamp: new Date().toISOString()
          }
        }
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ
      await this.addToOfflineList(offlinePhoto);

      console.log('üíæ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ñ–ª–∞–π–Ω:', fileName);
      return offlinePhoto;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –æ—Ñ–ª–∞–π–Ω:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ
  async addToOfflineList(photo) {
    try {
      const existingPhotos = await this.getOfflinePhotos();
      const updatedPhotos = [...existingPhotos, photo];
      await AsyncStorage.setItem(this.OFFLINE_PHOTOS_KEY, JSON.stringify(updatedPhotos));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ñ–ª–∞–π–Ω —Å–ø–∏—Å–æ–∫:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ
  async getOfflinePhotos() {
    try {
      const photosJson = await AsyncStorage.getItem(this.OFFLINE_PHOTOS_KEY);
      return photosJson ? JSON.parse(photosJson) : [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
  async getPendingPhotosCount() {
    try {
      const photos = await this.getOfflinePhotos();
      return photos.filter(photo => !photo.uploaded).length;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:', error);
      return 0;
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  async syncOfflinePhotos(uploadFunction) {
    try {
      const isConnected = await this.isOnline();
      if (!isConnected) {
        console.log('üì° –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return { success: false, message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É' };
      }

      const offlinePhotos = await this.getOfflinePhotos();
      const pendingPhotos = offlinePhotos.filter(photo => !photo.uploaded);

      if (pendingPhotos.length === 0) {
        console.log('‚úÖ –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        return { success: true, message: '–í—Å–µ —Ñ–æ—Ç–æ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', uploaded: 0 };
      }

      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é ${pendingPhotos.length} —Ñ–æ—Ç–æ...`);

      let uploadedCount = 0;
      const errors = [];

      for (const photo of pendingPhotos) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          const fileInfo = await FileSystem.getInfoAsync(photo.localPath);
          if (!fileInfo.exists) {
            console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${photo.localPath}`);
            await this.markPhotoAsUploaded(photo.id);
            continue;
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          const result = await uploadFunction(photo);
          
          if (result.success) {
            await this.markPhotoAsUploaded(photo.id);
            uploadedCount++;
            console.log(`‚úÖ –§–æ—Ç–æ ${photo.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
          } else {
            errors.push(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${photo.id}: ${result.error}`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ${photo.id}:`, error);
          errors.push(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${photo.id}: ${error.message}`);
        }
      }

      const result = {
        success: uploadedCount > 0,
        uploaded: uploadedCount,
        total: pendingPhotos.length,
        errors: errors
      };

      if (uploadedCount > 0) {
        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${uploadedCount}/${pendingPhotos.length} —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ`);
      }

      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω —Ñ–æ—Ç–æ:', error);
      return { success: false, message: error.message };
    }
  }

  // –û—Ç–º–µ—Ç–∏—Ç—å —Ñ–æ—Ç–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ
  async markPhotoAsUploaded(photoId) {
    try {
      const photos = await this.getOfflinePhotos();
      const updatedPhotos = photos.map(photo => 
        photo.id === photoId ? { ...photo, uploaded: true, uploadedAt: Date.now() } : photo
      );
      await AsyncStorage.setItem(this.OFFLINE_PHOTOS_KEY, JSON.stringify(updatedPhotos));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ:', error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
  async cleanupUploadedPhotos(maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 –¥–Ω–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try {
      const photos = await this.getOfflinePhotos();
      const now = Date.now();
      const photosToKeep = [];
      const photosToDelete = [];

      for (const photo of photos) {
        if (photo.uploaded && photo.uploadedAt && (now - photo.uploadedAt) > maxAge) {
          photosToDelete.push(photo);
        } else {
          photosToKeep.push(photo);
        }
      }

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
      for (const photo of photosToDelete) {
        try {
          const fileInfo = await FileSystem.getInfoAsync(photo.localPath);
          if (fileInfo.exists) {
            await FileSystem.deleteAsync(photo.localPath);
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: ${photo.localPath}`);
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ${photo.localPath}:`, error);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      await AsyncStorage.setItem(this.OFFLINE_PHOTOS_KEY, JSON.stringify(photosToKeep));

      console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ ${photosToDelete.length} —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ`);
      return { deleted: photosToDelete.length, kept: photosToKeep.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ:', error);
      return { deleted: 0, kept: 0 };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ñ–ª–∞–π–Ω —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  async getStorageStats() {
    try {
      const photos = await this.getOfflinePhotos();
      const pending = photos.filter(photo => !photo.uploaded);
      const uploaded = photos.filter(photo => photo.uploaded);

      // –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      let totalSize = 0;
      try {
        const dirInfo = await FileSystem.readDirectoryAsync(this.PHOTOS_DIR);
        for (const fileName of dirInfo) {
          const filePath = this.PHOTOS_DIR + fileName;
          const fileInfo = await FileSystem.getInfoAsync(filePath);
          if (fileInfo.exists) {
            totalSize += fileInfo.size || 0;
          }
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
      }

      return {
        totalPhotos: photos.length,
        pendingPhotos: pending.length,
        uploadedPhotos: uploaded.length,
        totalSizeBytes: totalSize,
        totalSizeMB: (totalSize / (1024 * 1024)).toFixed(2),
        storageDir: this.PHOTOS_DIR
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalPhotos: 0,
        pendingPhotos: 0,
        uploadedPhotos: 0,
        totalSizeBytes: 0,
        totalSizeMB: '0.00',
        storageDir: this.PHOTOS_DIR
      };
    }
  }
}

export default new OfflineStorageService();
