#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –∫–ª—é—á–∞–º–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
export YANDEX_API_KEY="–≤–∞—à_–∫–ª—é—á"
export DGIS_API_KEY="–≤–∞—à_–∫–ª—é—á"
python3 test_with_env_keys.py
"""
import os
import sys
import requests
import json

def test_yandex_api():
    """–¢–µ—Å—Ç Yandex API"""
    api_key = os.getenv('YANDEX_API_KEY')
    if not api_key:
        print("‚ùå YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï YANDEX GEOCODING")
    print("=" * 40)
    
    url = 'https://geocode-maps.yandex.ru/1.x/'
    params = {
        'apikey': api_key,
        'geocode': '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞',
        'format': 'json',
        'results': 1,
        'lang': 'ru_RU'
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
            
            if geo_objects:
                geo_object = geo_objects[0]['GeoObject']
                coordinates = geo_object['Point']['pos'].split()
                formatted_address = geo_object.get('metaDataProperty', {}).get('GeocoderMetaData', {}).get('text', '')
                
                print(f"‚úÖ –ê–¥—Ä–µ—Å: {formatted_address}")
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates[1]}, {coordinates[0]}")
                return True
            else:
                print("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_dgis_api():
    """–¢–µ—Å—Ç 2GIS API"""
    api_key = os.getenv('DGIS_API_KEY')
    if not api_key:
        print("‚ùå DGIS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 2GIS SEARCH")
    print("=" * 40)
    
    url = 'https://catalog.api.2gis.com/3.0/items'
    params = {
        'key': api_key,
        'q': '–∫–∞—Ñ–µ',
        'point': '37.6176,55.7558',
        'radius': 1000,
        'region_id': 1,
        'page_size': 3,
        'fields': 'items.point,items.address,items.rubrics'
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            if 'error' in data.get('meta', {}):
                error_info = data['meta']['error']
                print(f"‚ùå API –û—à–∏–±–∫–∞: {error_info.get('message', 'Unknown error')}")
                return False
            
            items = data.get('result', {}).get('items', [])
            total = data.get('meta', {}).get('total', 0)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(items)} –∏–∑ {total} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            for i, item in enumerate(items[:2], 1):
                name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                address = item.get('address_name', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                print(f"{i}. {name} - {address}")
            
            return True
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_geo_api_endpoint():
    """–¢–µ—Å—Ç –Ω–∞—à–µ–≥–æ geo API endpoint"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GEO API ENDPOINT")
    print("=" * 40)
    
    try:
        response = requests.get('http://localhost:5000/api/geo/locate?address=–ö—Ä–∞—Å–Ω–∞—è%20–ø–ª–æ—â–∞–¥—å,%20–ú–æ—Å–∫–≤–∞', timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                results = data.get('results', [])
                if results:
                    result = results[0]
                    print(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source')}")
                    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('latitude')}, {result.get('longitude')}")
                    print(f"üìç –ê–¥—Ä–µ—Å: {result.get('formatted_address', '')[:100]}...")
                    return True
            
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª: {data}")
            return False
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–õ–Æ–ß–ï–ô")
    print("=" * 50)
    
    results = {
        'yandex': test_yandex_api(),
        'dgis': test_dgis_api(),
        'geo_endpoint': test_geo_api_endpoint()
    }
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 50)
    
    for test_name, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
    
    passed = sum(results.values())
    total = len(results)
    print(f"\n–ò—Ç–æ–≥: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("\nüéâ –í–°–ï API –†–ê–ë–û–¢–ê–Æ–¢!")
    elif passed > 0:
        print(f"\n‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç ({passed}/{total})")
    else:
        print("\n‚ùå –í–°–ï API –ù–ï –†–ê–ë–û–¢–ê–Æ–¢")

if __name__ == "__main__":
    main()
