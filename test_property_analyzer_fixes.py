#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π PropertyAnalyzer
"""
import requests
import json

def test_address_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É...")
    
    test_addresses = [
        "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
        "–ú–æ—Å–∫–≤–∞", 
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞"
    ]
    
    for address in test_addresses:
        try:
            response = requests.get(
                "http://localhost:5000/api/geo/locate",
                params={"address": address},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"‚úÖ {address}: –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ {data.get('source', 'unknown')}")
                    if 'coordinates' in data:
                        coords = data['coordinates']
                        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords.get('latitude')}, {coords.get('longitude')}")
                    elif 'results' in data and data['results']:
                        result = data['results'][0]
                        print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('latitude')}, {result.get('longitude')}")
                else:
                    print(f"‚ùå {address}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå {address}: –æ—à–∏–±–∫–∞ HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {address}: –æ—à–∏–±–∫–∞ {e}")
    
    print()

def test_coordinates_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...")
    
    test_coords = [
        (55.7539, 37.6208),  # –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
        (59.9311, 30.3609),  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
        (55.7558, 37.6176),  # –ú–æ—Å–∫–≤–∞ —Ü–µ–Ω—Ç—Ä
    ]
    
    for lat, lon in test_coords:
        try:
            response = requests.get(
                "http://localhost:5000/api/osm/buildings",
                params={"lat": lat, "lon": lon, "radius": 200},
                timeout=15
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success') and data.get('buildings'):
                    buildings = data['buildings']
                    print(f"‚úÖ {lat}, {lon}: –Ω–∞–π–¥–µ–Ω–æ {len(buildings)} –∑–¥–∞–Ω–∏–π")
                    if buildings:
                        building = buildings[0]
                        print(f"   –ü—Ä–∏–º–µ—Ä: {building.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')}")
                else:
                    print(f"‚ö†Ô∏è {lat}, {lon}: –∑–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå {lat}, {lon}: –æ—à–∏–±–∫–∞ HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {lat}, {lon}: –æ—à–∏–±–∫–∞ {e}")
    
    print()

def test_api_services():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
    endpoints = [
        "/api/geo/locate?address=test",
        "/api/osm/buildings?lat=55.7539&lon=37.6208&radius=100"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"http://localhost:5000{endpoint}", timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {endpoint}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ö†Ô∏è {endpoint}: HTTP {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint}: –æ—à–∏–±–∫–∞ {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π PropertyAnalyzer\n")
    
    test_api_services()
    print()
    test_address_search()
    test_coordinates_search()
    
    print("‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("1. ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω")
    print("2. ‚úÖ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ") 
    print("3. ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ API –æ—Ç–≤–µ—Ç–æ–≤")
    print("4. ‚úÖ Fallback –Ω–∞ OpenStreetMap –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö API")
    print("5. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
