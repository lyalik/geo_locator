#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–¥–µ–ª–∞ "–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
"""
import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

BASE_URL = "http://localhost:5001"

def test_coordinate_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Yandex search_places —á–µ—Ä–µ–∑ geo_aggregator
    print("\n1. –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Yandex API:")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ coordinate detection
        test_data = {
            'location_hint': '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
            'user_description': None
        }
        
        response = requests.post(f"{BASE_URL}/api/geo/search/places", 
                               json=test_data,
                               timeout=30)
        
        print(f"   –ó–∞–ø—Ä–æ—Å: {test_data['location_hint']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Yandex
            if data.get('yandex'):
                yandex_success = data['yandex'].get('success', False)
                total_found = data['yandex'].get('total_found', 0)
                print(f"   üìç Yandex Maps: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if yandex_success else '‚ùå –û—à–∏–±–∫–∞'}")
                print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {total_found}")
                
                if not yandex_success:
                    error = data['yandex'].get('error', 'Unknown error')
                    print(f"      –û—à–∏–±–∫–∞: {error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã 2GIS
            if data.get('dgis'):
                dgis_success = data['dgis'].get('success', False)
                print(f"   üó∫Ô∏è  2GIS: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if dgis_success else '‚ùå –û—à–∏–±–∫–∞'}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_coordinate_detection_with_image():
    """–¢–µ—Å—Ç coordinate detection —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("\n2. –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_image_path = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg"
    
    if not os.path.exists(test_image_path):
        print("   ‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º mock –∑–∞–ø—Ä–æ—Å")
        
        # Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_data = {
            'location_hint': None,
            'user_description': '—Ç–µ—Å—Ç'
        }
        
        try:
            response = requests.post(f"{BASE_URL}/api/coordinates/detect",
                                   json=mock_data,
                                   timeout=30)
            
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ API endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('success', 'unknown')}")
                print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message', 'no message')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    else:
        print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")

def test_yandex_service_directly():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Yandex —Å–µ—Ä–≤–∏—Å–∞"""
    print("\n3. –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç Yandex Maps —Å–µ—Ä–≤–∏—Å–∞:")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ search_places
        from backend.services.yandex_maps_service import YandexMapsService
        
        yandex_service = YandexMapsService()
        result = yandex_service.search_places("–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üìç –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result.get('success') else '‚ùå –û—à–∏–±–∫–∞'}")
        
        if result.get('success'):
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {result.get('total_found', 0)}")
            places = result.get('places', [])
            if places:
                print(f"   üèõÔ∏è  –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ: {places[0].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –ö–û–û–†–î–ò–ù–ê–¢")
    print("=" * 50)
    
    test_yandex_service_directly()
    test_coordinate_detection()
    test_coordinate_detection_with_image()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
