#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –∫—Ä–∞–∫–æ–∑—è–±—Ä–∞–º–∏
–≤ —á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
"""

import os
import json
import shutil
from pathlib import Path

def rename_json_files():
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    json_path = Path("backend/uploads/metadata/json")
    
    if not json_path.exists():
        print(f"–ü–∞–ø–∫–∞ {json_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤
    json_files = list(json_path.glob("*.json"))
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤")
    
    for i, json_file in enumerate(json_files):
        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(json_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
            count = data.get('count', 0)
            provider = data.get('provider', 'unknown')
            
            # –ò—â–µ–º –∫–æ–¥—ã –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ results
            violation_codes = set()
            for result in data.get('results', []):
                for issue in result.get('issues', []):
                    label = issue.get('label', '')
                    if label:
                        violation_codes.add(label)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
            codes_str = '_'.join(sorted(violation_codes)) if violation_codes else 'unknown'
            new_name = f"metadata_{provider}_{codes_str}_{count}items.json"
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
            new_path = json_path / new_name
            if not new_path.exists():
                shutil.move(str(json_file), str(new_path))
                print(f"‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {json_file.name} ‚Üí {new_name}")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_name}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {json_file.name}: {e}")

def analyze_data_structure():
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ data"""
    data_path = Path("backend/uploads/metadata/data")
    
    if not data_path.exists():
        print(f"–ü–∞–ø–∫–∞ {data_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã data:")
    
    for item in data_path.iterdir():
        if item.is_dir():
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
            image_count = len(list(item.glob("*.jpg"))) + len(list(item.glob("*.jpeg")))
            print(f"üìÅ {item.name}: {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
            examples = list(item.glob("*.jpg"))[:3]
            for example in examples:
                print(f"   üìÑ {example.name}")
                
        elif item.suffix == '.xlsx':
            size_mb = item.stat().st_size / (1024 * 1024)
            print(f"üìä {item.name}: {size_mb:.1f} MB")

def create_mapping_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–≤—è–∑–µ–π"""
    mapping = {
        "violation_codes": {
            "00-022": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è (–∏–∑ JSON)",
            "18-001": "–ù–∞—Ä—É—à–µ–Ω–∏—è –≤ –∑–¥–∞–Ω–∏—è—Ö (gin_building)",
            "19-001": "–ú—É—Å–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è (gin_garbage)"
        },
        "data_structure": {
            "bpla/": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ë–ü–õ–ê —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤",
            "metadata/json/": "JSON —Ñ–∞–π–ª—ã —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏ –∏ bounding boxes",
            "metadata/data/": "Excel —Ñ–∞–π–ª—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "objekt/": "–ü—Ä–∏–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏"
        },
        "file_naming": {
            "bpla": "{UUID}_{latitude}_{longitude}.jpeg",
            "metadata_images": "{UUID}.jpg",
            "json_files": "metadata_{provider}_{codes}_{count}items.json"
        }
    }
    
    mapping_file = Path("backend/uploads/DATASET_MAPPING.json")
    with open(mapping_file, 'w', encoding='utf-8') as f:
        json.dump(mapping, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {mapping_file}")

if __name__ == "__main__":
    print("üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º JSON —Ñ–∞–π–ª—ã
    rename_json_files()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    analyze_data_structure()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    create_mapping_file()
    
    print("\n‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
