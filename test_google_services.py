#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Google —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""
import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from services.coordinate_detector import CoordinateDetector
from services.google_vision_service import GoogleVisionService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_google_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GOOGLE –°–ï–†–í–ò–°–û–í")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    google_service = GoogleVisionService()
    coordinate_detector = CoordinateDetector()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Vision
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Vision API:")
    if google_service.vision_client:
        print("   ‚úÖ Google Vision –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        print("   ‚ùå Google Vision –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_APPLICATION_CREDENTIALS")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Gemini
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Gemini API:")
    if google_service.gemini_model:
        print("   ‚úÖ Google Gemini –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print(f"   üìã –ú–æ–¥–µ–ª—å: {os.getenv('GEMINI_MODEL', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
    else:
        print("   ‚ùå Google Gemini –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_API_KEY –∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
    
    return google_service, coordinate_detector

def test_coordinate_detection_with_image():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("\nüó∫Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–û–û–†–î–ò–ù–ê–¢")
    print("=" * 50)
    
    # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_image_paths = [
        "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg",
        "/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/red_square_1.jpg",
        "/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/red_square_2.jpg"
    ]
    
    test_image = None
    for path in test_image_paths:
        if os.path.exists(path):
            test_image = path
            break
    
    if not test_image:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    coordinate_detector = CoordinateDetector()
    
    # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    print("\n1. –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:")
    result_no_hint = coordinate_detector.detect_coordinates_from_image(test_image)
    
    if result_no_hint['success']:
        coords = result_no_hint.get('coordinates')
        if coords:
            print(f"   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {coords['latitude']:.6f}, {coords['longitude']:.6f}")
            print(f"   üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {coords.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {coords.get('confidence', 0):.2f}")
        else:
            print("   ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result_no_hint.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π "–ú–æ—Å–∫–≤–∞"
    print("\n2. –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π '–ú–æ—Å–∫–≤–∞':")
    result_moscow = coordinate_detector.detect_coordinates_from_image(test_image, "–ú–æ—Å–∫–≤–∞")
    
    if result_moscow['success']:
        coords = result_moscow.get('coordinates')
        if coords:
            print(f"   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {coords['latitude']:.6f}, {coords['longitude']:.6f}")
            print(f"   üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {coords.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {coords.get('confidence', 0):.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤–∞
            lat, lon = coords['latitude'], coords['longitude']
            if 55.5 <= lat <= 56.0 and 37.0 <= lon <= 38.0:
                print("   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ú–æ—Å–∫–≤–µ")
            else:
                print("   ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ú–æ—Å–∫–≤–µ")
        else:
            print("   ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result_moscow.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
    print("\n3. –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å':")
    result_red_square = coordinate_detector.detect_coordinates_from_image(test_image, "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
    
    if result_red_square['success']:
        coords = result_red_square.get('coordinates')
        if coords:
            print(f"   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {coords['latitude']:.6f}, {coords['longitude']:.6f}")
            print(f"   üìç –ò—Å—Ç–æ—á–Ω–∏–∫: {coords.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {coords.get('confidence', 0):.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
            lat, lon = coords['latitude'], coords['longitude']
            if 55.752 <= lat <= 55.756 and 37.617 <= lon <= 37.625:
                print("   ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏")
            else:
                print("   ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏")
        else:
            print("   ‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result_red_square.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

def test_gemini_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini"""
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GEMINI –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    # –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_image_paths = [
        "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg",
        "/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/red_square_1.jpg"
    ]
    
    test_image = None
    for path in test_image_paths:
        if os.path.exists(path):
            test_image = path
            break
    
    if not test_image:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    google_service = GoogleVisionService()
    
    if not google_service.gemini_model:
        print("‚ùå Gemini –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:

1. –ß—Ç–æ –∑–∞ –∑–¥–∞–Ω–∏–µ –∏–ª–∏ –º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ?
2. –ï—Å—Ç—å –ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∫—É–ø–æ–ª–∞, –±–∞—à–Ω–∏, –∫–æ–ª–æ–Ω–Ω—ã)?
3. –í–∏–¥–Ω—ã –ª–∏ –Ω–∞–¥–ø–∏—Å–∏, –≤—ã–≤–µ—Å–∫–∏, –Ω–∞–∑–≤–∞–Ω–∏—è?
4. –≠—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?
5. –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è?

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞–∑–æ–≤–∏ –º–µ—Å—Ç–æ –µ—Å–ª–∏ —É–∑–Ω–∞–µ—à—å –µ–≥–æ."""
    
    try:
        result = google_service.analyze_image_with_gemini(test_image, prompt)
        
        if result.get('success'):
            analysis = result.get('analysis', '')
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ Gemini:")
            print(f"   {analysis}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∏–ª–∏ –ö—Ä–µ–º–ª—å
            analysis_lower = analysis.lower()
            if any(keyword in analysis_lower for keyword in ['–∫—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å', '–∫—Ä–µ–º–ª—å', '—Å–ø–∞—Å—Å–∫–∞—è –±–∞—à–Ω—è']):
                print("   ‚úÖ Gemini –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            else:
                print("   ‚ö†Ô∏è Gemini –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")

if __name__ == "__main__":
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–û–û–†–î–ò–ù–ê–¢")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    google_api_key = os.getenv('GOOGLE_API_KEY')
    google_creds = os.getenv('GOOGLE_APPLICATION_CREDENTIALS')
    gemini_model = os.getenv('GEMINI_MODEL')
    
    print(f"   GOOGLE_API_KEY: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if google_api_key else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   GOOGLE_APPLICATION_CREDENTIALS: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if google_creds else '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   GEMINI_MODEL: {gemini_model or '‚ùå –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_google_services()
    test_coordinate_detection_with_image()
    test_gemini_analysis()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
