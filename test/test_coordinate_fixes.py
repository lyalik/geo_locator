#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

import requests
import json
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = "http://localhost:5001"
TEST_IMAGE_PATH = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos"

def test_coordinate_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    # –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_images = []
    if os.path.exists(TEST_IMAGE_PATH):
        for ext in ['*.jpg', '*.jpeg', '*.png']:
            test_images.extend(Path(TEST_IMAGE_PATH).glob(ext))
    
    if not test_images:
        print("‚ùå –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ")
        return False
    
    test_image = str(test_images[0])
    print(f"üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {os.path.basename(test_image)}")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    url = f"{BASE_URL}/api/coordinates/detect"
    
    try:
        with open(test_image, 'rb') as f:
            files = {'image': f}
            data = {
                'location_hint': '',  # –ü—É—Å—Ç–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
                'user_description': '–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è'
            }
            
            print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
            response = requests.post(url, files=files, data=data, timeout=30)
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                print(f"üéØ –£—Å–ø–µ—Ö: {result.get('success', False)}")
                print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                
                if result.get('coordinates'):
                    coords = result['coordinates']
                    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords.get('latitude', 'N/A')}, {coords.get('longitude', 'N/A')}")
                    print(f"üéØ –ò—Å—Ç–æ—á–Ω–∏–∫: {coords.get('source', 'N/A')}")
                    print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {coords.get('confidence', 'N/A')}")
                else:
                    print("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if result.get('satellite_data'):
                    sat_data = result['satellite_data']
                    print(f"üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {sat_data.get('source', 'N/A')}")
                    if sat_data.get('image_url'):
                        print(f"üñºÔ∏è URL —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞: {sat_data['image_url'][:50]}...")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
                if result.get('location_info'):
                    loc_info = result['location_info']
                    print("üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:")
                    
                    if loc_info.get('yandex_address'):
                        ya_addr = loc_info['yandex_address']
                        print(f"  üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å: {ya_addr.get('formatted_address', 'N/A')}")
                    
                    if loc_info.get('dgis_places'):
                        dgis_places = loc_info['dgis_places']
                        print(f"  üè¢ 2GIS: {len(dgis_places)} –º–µ—Å—Ç –Ω–∞–π–¥–µ–Ω–æ")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                if result.get('recommendations'):
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in result['recommendations'][:3]:
                        print(f"  - {rec}")
                
                return True
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
                except:
                    print(f"üìù –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
                return False
                
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –ö–û–û–†–î–ò–ù–ê–¢")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    if not test_api_health():
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print()
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    success = test_coordinate_detection()
    
    print()
    print("=" * 50)
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")

if __name__ == "__main__":
    main()
