#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ YOLO –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

def test_yolo_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç YOLO –¥–µ—Ç–µ–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï YOLO –î–ï–¢–ï–ö–¶–ò–ò")
    print("=" * 40)
    
    try:
        from services.yolo_violation_detector import YOLOObjectDetector
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
        yolo_detector = YOLOObjectDetector()
        print("‚úÖ YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image_path = None
        upload_dirs = [
            "backend/uploads/coordinates",
            "backend/data/archive_photos",
            "test_image.jpg"
        ]
        
        for upload_dir in upload_dirs:
            if os.path.exists(upload_dir):
                if os.path.isfile(upload_dir):
                    test_image_path = upload_dir
                    break
                else:
                    for file in os.listdir(upload_dir):
                        if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                            test_image_path = os.path.join(upload_dir, file)
                            break
            if test_image_path:
                break
        
        if not test_image_path:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é
        print("üîç –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤...")
        result = yolo_detector.detect_objects(test_image_path)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {result.get('success', False)}")
        print(f"   –û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result.get('total_objects', 0)}")
        
        if result.get('success'):
            objects = result.get('objects', [])
            print(f"\nüì¶ –î–ï–¢–ê–õ–ò –û–ë–™–ï–ö–¢–û–í:")
            
            if objects:
                for i, obj in enumerate(objects[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    print(f"   {i+1}. {obj.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {obj.get('confidence', 0):.3f}")
                    print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {obj.get('bbox', {})}")
            else:
                print("   ‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                model_info = result.get('model_info', {})
                print(f"\nüîß –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ú–û–î–ï–õ–ò:")
                print(f"   –¢–∏–ø –º–æ–¥–µ–ª–∏: {model_info.get('model_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {model_info.get('confidence_threshold', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {model_info.get('device', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                print("   2. –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (—Å–µ–π—á–∞—Å 0.25)")
                print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ YOLOv8")
                print("   4. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            annotated_path = result.get('annotated_image_path')
            if annotated_path and os.path.exists(annotated_path):
                print(f"\nüñºÔ∏è –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {annotated_path}")
            
            return len(objects) > 0
        else:
            error = result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {error}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_yolo_model_info():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ YOLO –º–æ–¥–µ–ª–∏"""
    print("\nüîß –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û YOLO –ú–û–î–ï–õ–ò")
    print("=" * 35)
    
    try:
        from services.yolo_violation_detector import YOLOObjectDetector
        import torch
        from ultralytics import YOLO
        
        print(f"üêç Python: {sys.version}")
        print(f"üî• PyTorch: {torch.__version__}")
        print(f"üéØ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {torch.cuda.is_available()}")
        
        if torch.cuda.is_available():
            print(f"   GPU: {torch.cuda.get_device_name(0)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å YOLO
        model_path = "yolov8n.pt"
        if os.path.exists(model_path):
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            
            # –ó–∞–≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            model = YOLO(model_path)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ö–ª–∞—Å—Å—ã: {len(model.names)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            print(f"   –ü–µ—Ä–≤—ã–µ 10 –∫–ª–∞—Å—Å–æ–≤: {list(model.names.values())[:10]}")
        else:
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            print("   –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

def test_yolo_with_lower_threshold():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç YOLO —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
    print("\nüîª –¢–ï–°–¢ –° –ü–û–ù–ò–ñ–ï–ù–ù–´–ú –ü–û–†–û–ì–û–ú –£–í–ï–†–ï–ù–ù–û–°–¢–ò")
    print("=" * 50)
    
    try:
        from services.yolo_violation_detector import YOLOObjectDetector
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º
        yolo_detector = YOLOObjectDetector()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥
        original_threshold = yolo_detector.CONFIDENCE_THRESHOLD
        yolo_detector.CONFIDENCE_THRESHOLD = 0.1  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
        
        print(f"üîß –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–Ω–∏–∂–µ–Ω —Å {original_threshold} –¥–æ {yolo_detector.CONFIDENCE_THRESHOLD}")
        
        # –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image_path = None
        upload_dirs = ["backend/uploads/coordinates", "backend/data/archive_photos"]
        
        for upload_dir in upload_dirs:
            if os.path.exists(upload_dir):
                for file in os.listdir(upload_dir):
                    if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                        test_image_path = os.path.join(upload_dir, file)
                        break
            if test_image_path:
                break
        
        if not test_image_path:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {os.path.basename(test_image_path)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º
        result = yolo_detector.detect_objects(test_image_path)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä–æ–≥
        yolo_detector.CONFIDENCE_THRESHOLD = original_threshold
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º:")
        print(f"   –û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result.get('total_objects', 0)}")
        
        if result.get('success') and result.get('objects'):
            objects = result.get('objects', [])
            print(f"\nüì¶ –ù–ê–ô–î–ï–ù–ù–´–ï –û–ë–™–ï–ö–¢–´:")
            for i, obj in enumerate(objects[:10]):
                print(f"   {i+1}. {obj.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {obj.get('confidence', 0):.3f}")
            
            return True
        else:
            print("   ‚ö†Ô∏è –î–∞–∂–µ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –æ–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üöÄ –û–¢–õ–ê–î–ö–ê YOLO –î–ï–¢–ï–ö–¶–ò–ò –û–ë–™–ï–ö–¢–û–í")
    print("=" * 50)
    
    tests = [
        ("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏", test_yolo_model_info),
        ("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è", test_yolo_detection),
        ("–î–µ—Ç–µ–∫—Ü–∏—è —Å –Ω–∏–∑–∫–∏–º –ø–æ—Ä–æ–≥–æ–º", test_yolo_with_lower_threshold)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìã –û–¢–ß–ï–¢ –ü–û –û–¢–õ–ê–î–ö–ï YOLO:")
    
    for test_name, result in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"   {test_name}: {status}")
    
    passed = sum(1 for _, result in results if result)
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed < len(results):
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª—å yolov8n.pt –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π ultralytics –∏ torch")

if __name__ == "__main__":
    main()
