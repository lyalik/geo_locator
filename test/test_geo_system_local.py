#!/usr/bin/env python3
"""
–õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–û–õ–û–ö–ê–¶–ò–û–ù–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API –≤—ã–∑–æ–≤–æ–≤
"""
import os
import sys
import requests
import json
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

class LocalGeoTester:
    def __init__(self):
        self.base_url = "http://localhost:5001"
        self.test_images = [
            '/home/denis/Documents/Hackathon_2025/geo_locator/test_image.jpg',
            '/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/i_annotated_yolo.jpg'
        ]
    
    def test_backend_health(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ backend"""
        print("üè• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND")
        print("=" * 50)
        
        try:
            response = requests.get(f"{self.base_url}/health", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Backend: {data.get('status')}")
                print(f"üìã –í–µ—Ä—Å–∏—è: {data.get('version')}")
                print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if data.get('database') else '‚ùå'}")
                return True
            else:
                print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_coordinate_detection(self):
        """–¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        print("\nüìç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        success_count = 0
        total_count = 0
        
        for test_image in self.test_images:
            if not os.path.exists(test_image):
                continue
                
            total_count += 1
            image_name = os.path.basename(test_image)
            print(f"\nüì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {image_name}")
            
            try:
                with open(test_image, 'rb') as f:
                    files = {'file': f}
                    data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}
                    
                    start_time = time.time()
                    response = requests.post(
                        f"{self.base_url}/api/coordinates/detect",
                        files=files,
                        data=data,
                        timeout=60
                    )
                    processing_time = time.time() - start_time
                
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å")
                print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
                
                if response.status_code == 200:
                    result = response.json()
                    
                    coordinates = result.get('coordinates')
                    confidence = result.get('confidence', 0)
                    objects = result.get('objects', [])
                    source = result.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                    
                    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}")
                    print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
                    print(f"üì¶ –û–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                    print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
                    
                    # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ API –æ—Ç–≤–µ—á–∞–µ—Ç
                    success_count += 1
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                    if objects:
                        print("üìã –û–±—ä–µ–∫—Ç—ã:")
                        for i, obj in enumerate(objects[:3]):
                            obj_class = obj.get('class', 'unknown')
                            obj_conf = obj.get('confidence', 0)
                            print(f"   {i+1}. {obj_class}: {obj_conf:.2f}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        return success_count > 0
    
    def test_system_statistics(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        try:
            response = requests.get(f"{self.base_url}/api/coordinates/statistics", timeout=30)
            
            if response.status_code == 200:
                stats = response.json()
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if 'system' in stats:
                    system = stats['system']
                    print(f"üîß –°–∏—Å—Ç–µ–º–∞: {system.get('name', 'Geo Locator')}")
                    print(f"üìã –í–µ—Ä—Å–∏—è: {system.get('version', '1.0')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
                if 'services' in stats:
                    services = stats['services']
                    active_services = sum(1 for status in services.values() if status)
                    total_services = len(services)
                    print(f"üîå –°–µ—Ä–≤–∏—Å—ã: {active_services}/{total_services} –∞–∫—Ç–∏–≤–Ω—ã")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                    key_services = ['yandex_maps', 'dgis', 'mistral_ai', 'yolo']
                    for service in key_services:
                        if service in services:
                            status = "‚úÖ" if services[service] else "‚ùå"
                            print(f"   {service}: {status}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã
                if 'database' in stats:
                    db = stats['database']
                    photos = db.get('photos', 0)
                    violations = db.get('violations', 0)
                    print(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
                    print(f"   üì∏ –§–æ—Ç–æ: {photos}")
                    print(f"   üö® –ù–∞—Ä—É—à–µ–Ω–∏—è: {violations}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    def test_violation_detection(self):
        """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        print("\nüö® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ï–¢–ï–ö–¶–ò–ò –ù–ê–†–£–®–ï–ù–ò–ô")
        print("=" * 50)
        
        test_image = self.test_images[0] if os.path.exists(self.test_images[0]) else None
        if not test_image:
            print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        try:
            with open(test_image, 'rb') as f:
                files = {'file': f}
                
                start_time = time.time()
                response = requests.post(
                    f"{self.base_url}/api/violations/detect",
                    files=files,
                    timeout=60
                )
                processing_time = time.time() - start_time
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f}—Å")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                violations = result.get('violations', [])
                print(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                print(f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(violations)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                for i, violation in enumerate(violations[:3]):
                    category = violation.get('category', 'unknown')
                    confidence = violation.get('confidence', 0)
                    source = violation.get('source', 'unknown')
                    print(f"   {i+1}. {category}: {confidence:.2f} ({source})")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    def test_mistral_config(self):
        """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Mistral AI"""
        print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò MISTRAL AI")
        print("=" * 50)
        
        api_key = os.getenv('MISTRAL_API_KEY')
        model = os.getenv('MISTRAL_MODEL', 'pixtral-12b-2409')
        
        print(f"üîë API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if api_key else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model}")
        
        if api_key:
            print(f"üîê –ö–ª—é—á: {api_key[:8]}...")
            return True
        else:
            print("‚ö†Ô∏è Mistral AI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
            return False
    
    def generate_report(self, test_results):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        total_tests = len(test_results)
        passed_tests = sum(1 for result in test_results if result[1])
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        print("\nüìù –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø:")
        for test_name, result in test_results:
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"   {test_name}: {status}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if passed_tests == total_tests:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        elif passed_tests >= total_tests * 0.8:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        elif passed_tests >= total_tests * 0.6:
            print("üîß –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω—É–∂–Ω—ã –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        
        return passed_tests / total_tests

def main():
    print("üöÄ –õ–û–ö–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–û–õ–û–ö–ê–¶–ò–ò")
    print("=" * 70)
    print("ü§ñ Mistral AI + üéØ YOLO + üåê –ü–∞–Ω–æ—Ä–∞–º—ã + üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    print("=" * 70)
    
    tester = LocalGeoTester()
    test_results = []
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("Backend Health", tester.test_backend_health),
        ("Mistral AI Config", tester.test_mistral_config),
        ("System Statistics", tester.test_system_statistics),
        ("Coordinate Detection", tester.test_coordinate_detection),
        ("Violation Detection", tester.test_violation_detection)
    ]
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            test_results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            test_results.append((test_name, False))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    success_rate = tester.generate_report(test_results)
    
    return success_rate >= 0.6

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
