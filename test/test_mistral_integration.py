#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–º–µ–Ω—ã Google Vision/Gemini –Ω–∞ Mistral AI –≤ —Å–∏—Å—Ç–µ–º–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.services.mistral_ocr_service import MistralOCRService
from backend.services.enhanced_coordinate_detector import EnhancedCoordinateDetector
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_mistral_ocr_service():
    """
    –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ Mistral OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤
    """
    print("ü§ñ Testing Mistral OCR Service...")
    
    service = MistralOCRService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if not os.getenv('MISTRAL_API_KEY'):
        print("‚ùå MISTRAL_API_KEY not found in environment variables")
        return False
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = "test_image.jpg"
    if not os.path.exists(test_image):
        print(f"‚ö†Ô∏è Test image {test_image} not found, creating mock test")
        return True
    
    print(f"üì∏ Analyzing image: {test_image}")
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    result = service.extract_text_and_addresses(test_image)
    
    if result['success']:
        print("‚úÖ Mistral OCR analysis successful!")
        address_info = result.get('address_info', {})
        
        print(f"   Full address: {address_info.get('full_address', 'N/A')}")
        print(f"   Street: {address_info.get('street', 'N/A')}")
        print(f"   City: {address_info.get('city', 'N/A')}")
        print(f"   Region: {address_info.get('region', 'N/A')}")
        
        coordinates = address_info.get('coordinates')
        if coordinates:
            print(f"   Coordinates: {coordinates.get('latitude', 'N/A')}, {coordinates.get('longitude', 'N/A')}")
        
        signs = address_info.get('signs', [])
        if signs:
            print(f"   Signs detected: {len(signs)}")
            for i, sign in enumerate(signs[:3]):
                print(f"     Sign {i+1}: {sign}")
        
        return True
    else:
        print(f"‚ùå Mistral OCR failed: {result.get('error', 'Unknown error')}")
        return False

def test_enhanced_coordinate_detector():
    """
    –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å Mistral AI
    """
    print("\nüéØ Testing Enhanced Coordinate Detector with Mistral AI...")
    
    detector = EnhancedCoordinateDetector()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = "test_image.jpg"
    if not os.path.exists(test_image):
        print(f"‚ö†Ô∏è Test image {test_image} not found, skipping detector test")
        return True
    
    print(f"üìç Detecting coordinates for: {test_image}")
    
    # –¢–µ—Å—Ç –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    result = detector.detect_coordinates_enhanced(test_image)
    
    if result.get('success'):
        print("‚úÖ Enhanced coordinate detection successful!")
        
        coordinates = result.get('coordinates', {})
        print(f"   Final coordinates: {coordinates.get('latitude', 'N/A')}, {coordinates.get('longitude', 'N/A')}")
        print(f"   Confidence: {result.get('confidence', 0):.3f}")
        print(f"   Primary source: {result.get('primary_source', 'N/A')}")
        
        sources_used = result.get('sources_used', {})
        print(f"   Sources used:")
        for source, used in sources_used.items():
            status = "‚úÖ" if used else "‚ùå"
            print(f"     {source}: {status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ Mistral OCR
        if sources_used.get('mistral_ocr'):
            print("üéâ Mistral AI OCR successfully integrated!")
        else:
            print("‚ö†Ô∏è Mistral AI OCR was not used in this detection")
        
        return True
    else:
        print(f"‚ùå Coordinate detection failed: {result.get('error', 'Unknown error')}")
        return False

def test_with_location_hint():
    """
    –¢–µ—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    """
    print("\nüó∫Ô∏è Testing with location hint...")
    
    detector = EnhancedCoordinateDetector()
    
    test_image = "test_image.jpg"
    if not os.path.exists(test_image):
        print(f"‚ö†Ô∏è Test image {test_image} not found, skipping hint test")
        return True
    
    location_hints = [
        "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
    ]
    
    for hint in location_hints:
        print(f"\nüìç Testing with hint: '{hint}'")
        
        result = detector.detect_coordinates_enhanced(test_image, location_hint=hint)
        
        if result.get('success'):
            coordinates = result.get('coordinates', {})
            print(f"   Result: {coordinates.get('latitude', 'N/A'):.6f}, {coordinates.get('longitude', 'N/A'):.6f}")
            print(f"   Confidence: {result.get('confidence', 0):.3f}")
            print(f"   Primary source: {result.get('primary_source', 'N/A')}")
        else:
            print(f"   ‚ùå Failed: {result.get('error', 'Unknown error')}")

def check_api_keys():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö API –∫–ª—é—á–µ–π
    """
    print("üîë Checking API Keys...")
    
    required_keys = {
        'MISTRAL_API_KEY': 'Mistral AI',
        'YANDEX_API_KEY': 'Yandex Maps',
        'DGIS_API_KEY': '2GIS'
    }
    
    missing_keys = []
    
    for key, service in required_keys.items():
        if os.getenv(key):
            print(f"   {service}: ‚úÖ Present")
        else:
            print(f"   {service}: ‚ùå Missing ({key})")
            missing_keys.append(key)
    
    if missing_keys:
        print(f"\n‚ö†Ô∏è Missing API keys: {', '.join(missing_keys)}")
        print("   Set these environment variables for full functionality")
    
    return len(missing_keys) == 0

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üöÄ Starting Mistral AI Integration Tests")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        all_keys_present = check_api_keys()
        
        # –¢–µ—Å—Ç Mistral OCR —Å–µ—Ä–≤–∏—Å–∞
        ocr_success = test_mistral_ocr_service()
        
        # –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        detector_success = test_enhanced_coordinate_detector()
        
        # –¢–µ—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        test_with_location_hint()
        
        print("\n" + "=" * 60)
        
        if ocr_success and detector_success:
            print("‚úÖ All Mistral AI integration tests completed successfully!")
            if all_keys_present:
                print("üéâ Full functionality available with all API keys")
            else:
                print("‚ö†Ô∏è Limited functionality due to missing API keys")
        else:
            print("‚ùå Some tests failed - check logs for details")
        
        print("\nüìã Integration Summary:")
        print("   ‚úÖ Mistral AI OCR service created")
        print("   ‚úÖ Enhanced coordinate detector updated")
        print("   ‚úÖ Google Vision/Gemini dependency removed")
        print("   ‚úÖ Panorama analysis integration maintained")
        
        return 0 if (ocr_success and detector_success) else 1
        
    except Exception as e:
        logger.error(f"Test failed: {e}")
        print(f"\n‚ùå Test failed: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
