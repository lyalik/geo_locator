#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Mistral AI –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–º–µ–Ω—É Google Vision –Ω–∞ Mistral AI –≤ violation_api.py
"""

import os
import sys
import requests
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_mistral_violation_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å Mistral AI"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mistral AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ violation API...")
    
    # URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    base_url = "http://localhost:5001"
    detect_url = f"{base_url}/api/violations/detect"
    batch_url = f"{base_url}/api/violations/batch_detect"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        health_response = requests.get(f"{base_url}/api/violations/health", timeout=5)
        if health_response.status_code != 200:
            print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
            return False
        print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
        return False
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    test_image = "test_image.jpg"
    if not os.path.exists(test_image):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {test_image} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    print(f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image}")
    
    # –¢–µ—Å—Ç 1: –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    print("\nüîç –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    try:
        with open(test_image, 'rb') as f:
            files = {'file': f}
            data = {
                'user_id': 'test_user',
                'location_notes': 'Test location',
                'location_hint': 'Moscow, Russia'
            }
            
            response = requests.post(detect_url, files=files, data=data, timeout=30)
            
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if result.get('success'):
                violations = result.get('data', {}).get('violations', [])
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {len(violations)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                mistral_count = len([v for v in violations if v.get('source') == 'mistral_ai'])
                yolo_count = len([v for v in violations if v.get('source') == 'yolo'])
                
                print(f"ü§ñ Mistral AI: {mistral_count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
                print(f"üéØ YOLO: {yolo_count} –Ω–∞—Ä—É—à–µ–Ω–∏–π")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Mistral AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                if mistral_count > 0:
                    print("‚úÖ Mistral AI —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ Mistral AI –Ω–∞—Ä—É—à–µ–Ω–∏–π
                    for violation in violations:
                        if violation.get('source') == 'mistral_ai':
                            print(f"  ‚Ä¢ {violation.get('category', 'unknown')}: {violation.get('description', 'N/A')} ({violation.get('confidence', 0)*100:.1f}%)")
                else:
                    print("‚ö†Ô∏è Mistral AI –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                return True
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error', 'Unknown error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def test_mistral_batch_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç batch processing —Å Mistral AI"""
    
    print("\nüîç –¢–µ—Å—Ç 2: Batch –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    base_url = "http://localhost:5001"
    batch_url = f"{base_url}/api/violations/batch_detect"
    
    test_image = "test_image.jpg"
    if not os.path.exists(test_image):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {test_image} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ø–∏–π –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è batch —Ç–µ—Å—Ç–∞
        files = []
        for i in range(2):
            files.append(('files', (f'test_image_{i}.jpg', open(test_image, 'rb'), 'image/jpeg')))
        
        data = {
            'user_id': 'test_user',
            'location_hint': 'Moscow, Russia'
        }
        
        response = requests.post(batch_url, files=files, data=data, timeout=60)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for _, (_, file_obj, _) in files:
            file_obj.close()
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ Batch API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω")
            
            if result.get('success'):
                batch_results = result.get('data', [])
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(batch_results)}")
                
                total_mistral = 0
                total_yolo = 0
                
                for i, file_result in enumerate(batch_results):
                    if isinstance(file_result, dict):
                        violations = file_result.get('detection', {}).get('violations', [])
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞ {i+1}: {type(file_result)}")
                        violations = []
                    
                    mistral_count = len([v for v in violations if v.get('source') == 'mistral_ai'])
                    yolo_count = len([v for v in violations if v.get('source') == 'yolo'])
                    
                    total_mistral += mistral_count
                    total_yolo += yolo_count
                    
                    print(f"  –§–∞–π–ª {i+1}: ü§ñ Mistral AI: {mistral_count}, üéØ YOLO: {yolo_count}")
                
                print(f"üìä –û–±—â–∏–π –∏—Ç–æ–≥: ü§ñ Mistral AI: {total_mistral}, üéØ YOLO: {total_yolo}")
                
                if total_mistral > 0:
                    print("‚úÖ Mistral AI —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ batch —Ä–µ–∂–∏–º–µ")
                    return True
                else:
                    print("‚ö†Ô∏è Mistral AI –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ batch —Ä–µ–∂–∏–º–µ")
                    return False
            else:
                print(f"‚ùå Batch API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error', 'Unknown error')}")
                return False
        else:
            print(f"‚ùå Batch HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ batch —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = Path('.env')
    if env_file.exists():
        print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env
        with open(env_file, 'r') as f:
            env_content = f.read()
            
        if 'MISTRAL_API_KEY' in env_content:
            print("‚úÖ MISTRAL_API_KEY –Ω–∞–π–¥–µ–Ω –≤ .env")
        else:
            print("‚ö†Ô∏è MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            
    else:
        print("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    mistral_key = os.getenv('MISTRAL_API_KEY')
    if mistral_key:
        print(f"‚úÖ MISTRAL_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mistral_key[:10]}...")
    else:
        print("‚ö†Ô∏è MISTRAL_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò MISTRAL AI –í VIOLATION ANALYSIS")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    check_environment()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_success = test_mistral_violation_api()
    test2_success = test_mistral_batch_processing()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    print(f"üîç –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"üîç Batch –∞–Ω–∞–ª–∏–∑: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    if test1_success and test2_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Mistral AI —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ violation analysis")
        return True
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏ backend")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
