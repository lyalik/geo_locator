#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å Beijing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

import logging
from services.enhanced_coordinate_detector import EnhancedCoordinateDetector
from services.coordinate_detector import CoordinateDetector
from services.video_coordinate_detector import VideoCoordinateDetector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_beijing_coordinates_detection():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ Beijing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BEIJING –ö–û–û–†–î–ò–ù–ê–¢")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        detector = EnhancedCoordinateDetector()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ Beijing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        beijing_coords = [
            {'latitude': 39.903573, 'longitude': 116.336536},  # –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            {'latitude': 39.9042, 'longitude': 116.4074},      # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –∫–æ–¥–∞
            {'latitude': 39.9, 'longitude': 116.3},            # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ
        ]
        
        print("1. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Beijing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
        for i, coords in enumerate(beijing_coords, 1):
            is_valid = detector._validate_coordinates(coords, "")
            print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {i}: {coords}")
            print(f"   –í–∞–ª–∏–¥–Ω—ã: {'‚ùå –ù–ï–¢' if not is_valid else '‚úÖ –î–ê'}")
            print()
        
        # –¢–µ—Å—Ç —É–º–Ω—ã—Ö fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        print("2. –¢–µ—Å—Ç —É–º–Ω—ã—Ö fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
        fallback_result = detector.get_smart_fallback_coordinates("–ú–æ—Å–∫–≤–∞")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è '–ú–æ—Å–∫–≤–∞': {fallback_result}")
        
        fallback_result_empty = detector.get_smart_fallback_coordinates("")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—É—Å—Ç–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏: {fallback_result_empty}")
        
        # –¢–µ—Å—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–µ—Ñ–æ–ª—Ç–æ–≤
        print("3. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã:")
        print(f"   –†–æ—Å—Å–∏—è: {detector.regional_defaults.get('russia', '–ù–ï –ù–ê–ô–î–ï–ù–û')}")
        print(f"   –ï–≤—Ä–æ–ø–∞: {detector.regional_defaults.get('europe', '–ù–ï –ù–ê–ô–î–ï–ù–û')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

def test_coordinate_sources():
    """–¢–µ—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("\nüó∫Ô∏è –¢–ï–°–¢ –ò–°–¢–û–ß–ù–ò–ö–û–í –ö–û–û–†–î–ò–ù–ê–¢")
    print("=" * 50)
    
    try:
        detector = CoordinateDetector()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:")
        if hasattr(detector, 'yandex_service'):
            print("   ‚úÖ Yandex Maps")
        if hasattr(detector, 'dgis_service'):
            print("   ‚úÖ 2GIS")
        if hasattr(detector, 'google_vision'):
            print("   ‚úÖ Google Vision")
        if hasattr(detector, 'geo_aggregator'):
            print("   ‚úÖ Geo Aggregator")
            
        # –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        test_image_path = "backend/uploads/coordinates/1krasn_pl2-3797155958.jpg"
        if os.path.exists(test_image_path):
            print(f"\nüì∏ –¢–µ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {test_image_path}")
            result = detector.detect_coordinates_from_image(test_image_path, location_hint="–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä")
            
            if result.get('success'):
                coords = result.get('coordinates', {})
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {coords}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ Beijing –ª–∏ —ç—Ç–æ
                if coords:
                    lat, lon = coords.get('latitude', 0), coords.get('longitude', 0)
                    is_beijing = abs(lat - 39.9042) < 0.1 and abs(lon - 116.4074) < 0.1
                    print(f"   Beijing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {'‚ùå –î–ê' if is_beijing else '‚úÖ –ù–ï–¢'}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    sources = result.get('coordinate_sources', {})
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        else:
            print(f"   ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image_path}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
        import traceback
        traceback.print_exc()

def test_video_analysis_timeout():
    """–¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –≤–∏–¥–µ–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüé¨ –¢–ï–°–¢ –í–ò–î–ï–û –ê–ù–ê–õ–ò–ó–ê")
    print("=" * 50)
    
    try:
        video_detector = VideoCoordinateDetector()
        print("‚úÖ VideoCoordinateDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if hasattr(video_detector, 'yolo_detector'):
            print("   ‚úÖ YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        if hasattr(video_detector, 'coordinate_detector'):
            print("   ‚úÖ Coordinate –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
        video_paths = [
            "backend/uploads/videos/test_video.mp4",
            "backend/data/test_video.mp4",
            "test_video.mp4"
        ]
        
        test_video = None
        for path in video_paths:
            if os.path.exists(path):
                test_video = path
                break
                
        if test_video:
            print(f"üìπ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ: {test_video}")
            print("   ‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
            
            # –ê–Ω–∞–ª–∏–∑ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
            result = video_detector.analyze_video(
                test_video, 
                location_hint="–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
                frame_interval=30,  # –ö–∞–∂–¥—ã–π 30-–π –∫–∞–¥—Ä
                max_frames=3       # –ú–∞–∫—Å–∏–º—É–º 3 –∫–∞–¥—Ä–∞
            )
            
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('success', False)}")
            if result.get('coordinates'):
                coords = result['coordinates']
                lat, lon = coords.get('latitude', 0), coords.get('longitude', 0)
                is_beijing = abs(lat - 39.9042) < 0.1 and abs(lon - 116.4074) < 0.1
                print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}")
                print(f"   Beijing –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {'‚ùå –î–ê' if is_beijing else '‚úÖ –ù–ï–¢'}")
        else:
            print("   ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–∏–¥–µ–æ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_beijing_coordinates_detection()
    test_coordinate_sources()
    test_video_analysis_timeout()
    
    print("\n" + "=" * 50)
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
