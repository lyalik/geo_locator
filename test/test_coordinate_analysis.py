#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–¥–µ–ª–∞ "–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç" —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
"""

import requests
import json
import os
from PIL import Image
from PIL.ExifTags import TAGS, GPSTAGS
import io

def create_test_image_with_gps():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (800, 600), color='blue')
    
    # –î–æ–±–∞–≤–ª—è–µ–º GPS –¥–∞–Ω–Ω—ã–µ –≤ EXIF (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã - –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å)
    exif_dict = {
        "0th": {},
        "Exif": {},
        "GPS": {
            1: 'N',  # GPS latitude ref
            2: ((55, 1), (45, 1), (2100, 100)),  # GPS latitude (55.7539)
            3: 'E',  # GPS longitude ref  
            4: ((37, 1), (37, 1), (1200, 100)),  # GPS longitude (37.6208)
        },
        "1st": {},
        "thumbnail": None
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image_path = '/tmp/test_gps_image.jpg'
    img.save(test_image_path, 'JPEG')
    
    return test_image_path

def test_coordinate_detection_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = create_test_image_with_gps()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    url = 'http://localhost:5001/api/coordinate/detect'
    
    with open(image_path, 'rb') as f:
        files = {'file': ('test_image.jpg', f, 'image/jpeg')}
        data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å'}
        
        try:
            response = requests.post(url, files=files, data=data, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ API –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('coordinates', '–ù–µ –Ω–∞–π–¥–µ–Ω—ã')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if 'satellite_data' in result:
                    sat_data = result['satellite_data']
                    print(f"üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {sat_data.get('success', False)}")
                    print(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {sat_data.get('primary_source', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                    print(f"üîó –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {sat_data.get('available_sources', 0)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
                if 'location_info' in result:
                    loc_info = result['location_info']
                    print("üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:")
                    
                    if 'reverse_geocoding' in loc_info:
                        geocoding = loc_info['reverse_geocoding']
                        print(f"   –ê–¥—Ä–µ—Å (–Ø–Ω–¥–µ–∫—Å): {geocoding.get('address', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {geocoding.get('confidence', 0)*100:.1f}%")
                    
                    if 'nearby_places' in loc_info and loc_info['nearby_places']:
                        print(f"   –ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç (2GIS): {len(loc_info['nearby_places'])}")
                        for place in loc_info['nearby_places'][:3]:
                            print(f"     - {place.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                
                print("\nüìä –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
                print(json.dumps(result, indent=2, ensure_ascii=False))
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"–û—Ç–≤–µ—Ç: {response.text}")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if os.path.exists(image_path):
        os.remove(image_path)

def check_api_keys():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    print("üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π...")
    
    keys = {
        'YANDEX_API_KEY': os.getenv('YANDEX_API_KEY'),
        'DGIS_API_KEY': os.getenv('DGIS_API_KEY'), 
        'ROSCOSMOS_API_KEY': os.getenv('ROSCOSMOS_API_KEY')
    }
    
    for key_name, key_value in keys.items():
        if key_value:
            print(f"‚úÖ {key_name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({key_value[:10]}...)")
        else:
            print(f"‚ùå {key_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return all(keys.values())

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
    if not check_api_keys():
        print("\n‚ö†Ô∏è –ù–µ –≤—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        exit(1)
    
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    test_coordinate_detection_api()
    
    print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'")
    print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å GPS –¥–∞–Ω–Ω—ã–º–∏")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏")
