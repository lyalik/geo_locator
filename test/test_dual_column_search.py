#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –∏ 2GIS
"""
import requests
import json

def test_address_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É"""
    print("üè† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É...")
    
    addresses = ["–ú–æ—Å–∫–≤–∞", "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"]
    
    for address in addresses:
        try:
            response = requests.get(
                "http://localhost:5000/api/geo/locate",
                params={"address": address},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"\nüìç {address}:")
                print(f"  –£—Å–ø–µ—Ö: {data.get('success')}")
                
                if data.get('yandex'):
                    yandex = data['yandex']
                    print(f"  üü° –Ø–Ω–¥–µ–∫—Å: {yandex.get('formatted_address', 'N/A')}")
                    if yandex.get('coordinates'):
                        coords = yandex['coordinates']
                        print(f"     –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords['latitude']}, {coords['longitude']}")
                else:
                    print("  üü° –Ø–Ω–¥–µ–∫—Å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
                
                if data.get('dgis'):
                    dgis = data['dgis']
                    print(f"  üîµ 2GIS: –Ω–∞–π–¥–µ–Ω–æ {len(dgis.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                else:
                    print("  üîµ 2GIS: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
            else:
                print(f"‚ùå {address}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {address}: –æ—à–∏–±–∫–∞ {e}")

def test_cadastral_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É...")
    
    cadastral_numbers = [
        "77:01:0001001:1234",
        "78:12:0123456:789",
        "50:21:0000001:1"
    ]
    
    for cadastral in cadastral_numbers:
        try:
            response = requests.get(
                "http://localhost:5000/api/geo/locate/cadastral",
                params={"cadastral_number": cadastral},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"\nüè∑Ô∏è {cadastral}:")
                print(f"  –£—Å–ø–µ—Ö: {data.get('success')}")
                
                yandex_count = len(data.get('yandex', {}).get('results', [])) if data.get('yandex') else 0
                dgis_count = len(data.get('dgis', {}).get('results', [])) if data.get('dgis') else 0
                
                print(f"  üü° –Ø–Ω–¥–µ–∫—Å: {yandex_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                print(f"  üîµ 2GIS: {dgis_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print(f"‚ùå {cadastral}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {cadastral}: –æ—à–∏–±–∫–∞ {e}")

def test_coordinates_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    print("\nüó∫Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...")
    
    coordinates = [
        (55.7539, 37.6208),  # –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å
        (59.9311, 30.3609),  # –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
        (55.7558, 37.6176),  # –ú–æ—Å–∫–≤–∞ —Ü–µ–Ω—Ç—Ä
    ]
    
    for lat, lon in coordinates:
        try:
            response = requests.get(
                "http://localhost:5000/api/geo/locate/coordinates",
                params={"lat": lat, "lon": lon},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"\nüìç {lat}, {lon}:")
                print(f"  –£—Å–ø–µ—Ö: {data.get('success')}")
                
                if data.get('yandex'):
                    yandex = data['yandex']
                    print(f"  üü° –Ø–Ω–¥–µ–∫—Å: {yandex.get('formatted_address', 'N/A')}")
                else:
                    print("  üü° –Ø–Ω–¥–µ–∫—Å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
                
                dgis_count = len(data.get('dgis', {}).get('results', [])) if data.get('dgis') else 0
                print(f"  üîµ 2GIS: {dgis_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print(f"‚ùå {lat}, {lon}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {lat}, {lon}: –æ—à–∏–±–∫–∞ {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n")
    
    test_address_search()
    test_cadastral_search()
    test_coordinates_search()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìä –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("1. ‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –∏ 2GIS")
    print("2. ‚úÖ –î–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("3. ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É, –∫–∞–¥–∞—Å—Ç—Ä—É –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
    print("4. ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞")
    print("5. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ API")
