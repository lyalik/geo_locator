#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
–ê–Ω–∞–ª–∏–∑ —Ç–æ—á–Ω–æ—Å—Ç–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
"""

import os
import sys
import requests
import json
from pathlib import Path

def test_coordinate_accuracy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
    print("üéØ –ê–ù–ê–õ–ò–ó –¢–û–ß–ù–û–°–¢–ò –ö–û–û–†–î–ò–ù–ê–¢–ù–û–ì–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ù–∞–π–¥–µ–º –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_images = []
    upload_dirs = [
        "backend/uploads/coordinates",
        "backend/data/archive_photos",
        "test_image.jpg"
    ]
    
    for upload_dir in upload_dirs:
        if os.path.exists(upload_dir):
            if os.path.isfile(upload_dir):
                test_images.append(upload_dir)
            else:
                for file in os.listdir(upload_dir):
                    if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                        test_images.append(os.path.join(upload_dir, file))
    
    if not test_images:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(test_images)}")
    
    results = []
    url = "http://localhost:5001/api/coordinates/detect"
    
    for i, image_path in enumerate(test_images[:3]):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {os.path.basename(image_path)}")
        
        try:
            with open(image_path, 'rb') as f:
                files = {'file': f}
                data = {'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}
                
                response = requests.post(url, files=files, data=data, timeout=30)
                
            if response.status_code == 200:
                result = response.json()
                
                if result.get('success'):
                    data = result.get('data', {})
                    coordinates = data.get('coordinates', {})
                    objects = data.get('objects', [])
                    
                    analysis = {
                        'image': os.path.basename(image_path),
                        'coordinates_found': bool(coordinates),
                        'latitude': coordinates.get('latitude'),
                        'longitude': coordinates.get('longitude'),
                        'confidence': coordinates.get('confidence', 0),
                        'objects_count': len(objects),
                        'objects': [obj.get('category') for obj in objects[:5]]
                    }
                    
                    results.append(analysis)
                    
                    print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates.get('latitude')}, {coordinates.get('longitude')}")
                    print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {coordinates.get('confidence', 0):.3f}")
                    print(f"   üîç –û–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                    
                    if objects:
                        print("   üì¶ –û–±—ä–µ–∫—Ç—ã:")
                        for obj in objects[:3]:
                            print(f"      - {obj.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {obj.get('confidence', 0):.2f}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("=" * 40)
    
    if results:
        coords_found = sum(1 for r in results if r['coordinates_found'])
        avg_confidence = sum(r['confidence'] for r in results if r['confidence']) / len(results) if results else 0
        total_objects = sum(r['objects_count'] for r in results)
        
        print(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {coords_found}/{len(results)} ({coords_found/len(results)*100:.1f}%)")
        print(f"üìà –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
        print(f"üéØ –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {total_objects}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        
        if avg_confidence < 0.5:
            print("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å - –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
        
        if total_objects == 0:
            print("‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å YOLO –º–æ–¥–µ–ª—å")
        
        if coords_found < len(results):
            print("‚ö†Ô∏è –ù–µ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã - —É–ª—É—á—à–∏—Ç—å fallback –º–µ—Ç–æ–¥—ã")
    
    return len(results) > 0

def test_batch_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    print("\nüì¶ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 50)
    
    # –ù–∞–π–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    test_images = []
    upload_dirs = ["backend/uploads/coordinates", "backend/data/archive_photos"]
    
    for upload_dir in upload_dirs:
        if os.path.exists(upload_dir):
            for file in os.listdir(upload_dir):
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    test_images.append(os.path.join(upload_dir, file))
                    if len(test_images) >= 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
                        break
        if len(test_images) >= 2:
            break
    
    if len(test_images) < 2:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(test_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    url = "http://localhost:5001/api/coordinates/batch"
    
    try:
        files = []
        for i, image_path in enumerate(test_images):
            files.append(('images', (f'image_{i}.jpg', open(image_path, 'rb'), 'image/jpeg')))
        
        data = {'location_hints': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'}
        
        response = requests.post(url, files=files, data=data, timeout=60)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for _, file_tuple in files:
            file_tuple[1].close()
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('success'):
                processed = result.get('processed', 0)
                saved = result.get('saved', 0)
                results = result.get('results', [])
                
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {len(results)}")
                
                for i, res in enumerate(results):
                    coords = res.get('coordinates', {})
                    if coords:
                        print(f"   {i+1}. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords.get('latitude')}, {coords.get('longitude')}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:300]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_system_statistics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    url = "http://localhost:5001/api/coordinates/statistics"
    
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            
            if result.get('success'):
                stats = result.get('data', {})
                
                # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                system_info = stats.get('system_info', {})
                print(f"üîß –°–∏—Å—Ç–µ–º–∞: {system_info.get('name', 'Geo Locator')}")
                print(f"üìã –í–µ—Ä—Å–∏—è: {system_info.get('version', '1.0')}")
                
                # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                capabilities = stats.get('capabilities', {})
                print(f"\nüéØ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
                for capability, enabled in capabilities.items():
                    status = "‚úÖ" if enabled else "‚ùå"
                    print(f"   {status} {capability}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db_stats = stats.get('database_stats', {})
                if db_stats:
                    print(f"\nüíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
                    print(f"   üì∏ –§–æ—Ç–æ: {db_stats.get('total_photos', 0)}")
                    print(f"   üö® –ù–∞—Ä—É—à–µ–Ω–∏—è: {db_stats.get('total_detections', 0)}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–û–õ–û–ö–ê–¶–ò–ò")
    print("=" * 70)
    
    tests = [
        ("–¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", test_coordinate_accuracy),
        ("–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞", test_batch_processing),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã", test_system_statistics)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É API –∫–ª—é—á–µ–π")
        print("2. –£–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å YOLO –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤")
        print("4. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
