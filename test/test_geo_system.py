#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import os
import sys
import json
import requests
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.services.geo_aggregator_service import GeoAggregatorService
from backend.services.yandex_maps_service import YandexMapsService
from backend.services.dgis_service import DGISService
from backend.services.roscosmos_satellite_service import RoscosmosService
from backend.services.yandex_satellite_service import YandexSatelliteService
from backend.services.image_database_service import ImageDatabaseService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class GeoSystemTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.results = {
            'timestamp': datetime.now().isoformat(),
            'tests': {},
            'summary': {'passed': 0, 'failed': 0, 'total': 0}
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å)
        self.test_lat = 55.7558
        self.test_lon = 37.6176
        self.test_address = "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
        
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
        
        # –¢–µ—Å—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.test_yandex_maps_service()
        self.test_dgis_service()
        self.test_roscosmos_service()
        self.test_yandex_satellite_service()
        self.test_image_database_service()
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞
        self.test_geo_aggregator_service()
        
        # –¢–µ—Å—Ç API endpoints
        self.test_api_endpoints()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        self.print_summary()
        
        return self.results
    
    def test_yandex_maps_service(self):
        """–¢–µ—Å—Ç Yandex Maps —Å–µ—Ä–≤–∏—Å–∞"""
        test_name = "Yandex Maps Service"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            service = YandexMapsService()
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
            search_result = service.search_places("–∫–∞—Ñ–µ", self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            geocode_result = service.geocode(self.test_address)
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            reverse_result = service.reverse_geocode(self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã
            map_result = service.get_static_map(self.test_lat, self.test_lon)
            
            success = (
                search_result.get('source') == 'yandex_maps' and
                geocode_result.get('source') == 'yandex_geocoder' and
                reverse_result.get('source') == 'yandex_geocoder' and
                map_result.get('source') == 'yandex_static_map'
            )
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'search': search_result.get('success', False),
                    'geocode': geocode_result.get('success', False),
                    'reverse_geocode': reverse_result.get('success', False),
                    'static_map': map_result.get('success', False)
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def test_dgis_service(self):
        """–¢–µ—Å—Ç 2GIS —Å–µ—Ä–≤–∏—Å–∞"""
        test_name = "2GIS Service"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            service = DGISService()
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
            search_result = service.search_places("—Ä–µ—Å—Ç–æ—Ä–∞–Ω", self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            geocode_result = service.geocode(self.test_address)
            
            # –¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            reverse_result = service.reverse_geocode(self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç
            nearby_result = service.find_nearby_places(self.test_lat, self.test_lon, "–∫–∞—Ñ–µ")
            
            success = (
                search_result.get('source') == '2gis' and
                geocode_result.get('source') == '2gis' and
                reverse_result.get('source') == '2gis' and
                nearby_result.get('source') == '2gis'
            )
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'search': search_result.get('success', False),
                    'geocode': geocode_result.get('success', False),
                    'reverse_geocode': reverse_result.get('success', False),
                    'nearby': nearby_result.get('success', False)
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def test_roscosmos_service(self):
        """–¢–µ—Å—Ç –†–æ—Å–∫–æ—Å–º–æ—Å —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        test_name = "Roscosmos Satellite Service"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            service = RoscosmosService()
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞
            satellite_result = service.get_satellite_image(self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤
            archive_result = service.search_archive(
                self.test_lat, self.test_lon, 
                "2023-01-01", "2023-12-31"
            )
            
            # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø—É—Ç–Ω–∏–∫–∞—Ö
            info_result = service.get_satellite_info()
            
            success = (
                satellite_result.get('source') in ['roscosmos_geoportal', 'scanex_kosmosnimki', 'public_satellite'] and
                archive_result.get('source') == 'roscosmos_archive' and
                info_result.get('success', False)
            )
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'satellite_image': satellite_result.get('success', False),
                    'archive_search': archive_result.get('success', False),
                    'satellite_info': info_result.get('success', False),
                    'preferred_source': satellite_result.get('source', 'none')
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def test_yandex_satellite_service(self):
        """–¢–µ—Å—Ç –Ø–Ω–¥–µ–∫—Å –°–ø—É—Ç–Ω–∏–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        test_name = "Yandex Satellite Service"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            service = YandexSatelliteService()
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞
            satellite_result = service.get_satellite_image(self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            hybrid_result = service.get_hybrid_image(self.test_lat, self.test_lon)
            
            # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
            info_result = service.get_service_info()
            
            success = (
                satellite_result.get('source') == 'yandex_satellite' and
                hybrid_result.get('source') == 'yandex_satellite' and
                info_result.get('success', False)
            )
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'satellite_image': satellite_result.get('success', False),
                    'hybrid_image': hybrid_result.get('success', False),
                    'service_info': info_result.get('success', False)
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def test_image_database_service(self):
        """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        test_name = "Image Database Service"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            service = ImageDatabaseService()
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            connection_ok = hasattr(service, 'session') and service.session is not None
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            similar_result = service.find_similar_images(self.test_lat, self.test_lon, 1000)
            
            success = connection_ok and isinstance(similar_result, list)
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'database_connection': connection_ok,
                    'similar_search': isinstance(similar_result, list),
                    'similar_count': len(similar_result) if isinstance(similar_result, list) else 0
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def test_geo_aggregator_service(self):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        test_name = "Geo Aggregator Service"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            service = GeoAggregatorService()
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_result = service.get_location_statistics()
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞
            satellite_result = service._get_best_satellite_image(self.test_lat, self.test_lon)
            
            success = (
                'available_services' in stats_result and
                satellite_result.get('success', False)
            )
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'statistics': 'available_services' in stats_result,
                    'satellite_integration': satellite_result.get('success', False),
                    'services': stats_result.get('available_services', {})
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API endpoints (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)"""
        test_name = "API Endpoints"
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {test_name}")
        
        try:
            base_url = "http://localhost:5000"
            
            # –¢–µ—Å—Ç health endpoint
            health_response = requests.get(f"{base_url}/api/geo/health", timeout=5)
            health_ok = health_response.status_code == 200
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_response = requests.get(f"{base_url}/api/geo/statistics", timeout=5)
            stats_ok = stats_response.status_code in [200, 401]  # 401 –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            
            success = health_ok
            
            self.results['tests'][test_name] = {
                'status': 'PASSED' if success else 'FAILED',
                'details': {
                    'health_endpoint': health_ok,
                    'statistics_endpoint': stats_ok,
                    'server_running': health_ok
                }
            }
            
            if success:
                self.results['summary']['passed'] += 1
                logger.info(f"‚úÖ {test_name} - PASSED")
            else:
                self.results['summary']['failed'] += 1
                logger.error(f"‚ùå {test_name} - FAILED")
                
        except requests.exceptions.ConnectionError:
            self.results['tests'][test_name] = {
                'status': 'SKIPPED',
                'reason': 'Server not running on localhost:5000'
            }
            logger.warning(f"‚ö†Ô∏è {test_name} - SKIPPED (server not running)")
        except Exception as e:
            self.results['tests'][test_name] = {
                'status': 'ERROR',
                'error': str(e)
            }
            self.results['summary']['failed'] += 1
            logger.error(f"üí• {test_name} - ERROR: {e}")
        
        self.results['summary']['total'] += 1
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("\n" + "="*60)
        logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ï–û–õ–û–ö–ê–¶–ò–û–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
        logger.info("="*60)
        
        total = self.results['summary']['total']
        passed = self.results['summary']['passed']
        failed = self.results['summary']['failed']
        
        logger.info(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed} ‚úÖ")
        logger.info(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed} ‚ùå")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total*100):.1f}%" if total > 0 else "0%")
        
        logger.info("\n–î–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ—Å—Ç–∞–º:")
        for test_name, result in self.results['tests'].items():
            status_emoji = {
                'PASSED': '‚úÖ',
                'FAILED': '‚ùå',
                'ERROR': 'üí•',
                'SKIPPED': '‚ö†Ô∏è'
            }.get(result['status'], '‚ùì')
            
            logger.info(f"{status_emoji} {test_name}: {result['status']}")
            
            if 'details' in result:
                for key, value in result['details'].items():
                    logger.info(f"    {key}: {value}")
        
        logger.info("="*60)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        with open('test_results.json', 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        logger.info("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")


if __name__ == "__main__":
    tester = GeoSystemTester()
    results = tester.run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results['summary']['failed'] == 0:
        sys.exit(0)  # –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
    else:
        sys.exit(1)  # –ï—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
