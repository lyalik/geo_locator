#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Geo Locator
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:5001"
TEST_USER_EMAIL = "test@example.com"
TEST_USER_PASSWORD = "testpass123"

# –¢–µ—Å—Ç–æ–≤—ã–π Expo push token (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
TEST_PUSH_TOKEN = "ExponentPushToken[xxxxxxxxxxxxxxxxxxxxxx]"

class PushNotificationTester:
    def __init__(self):
        self.session = requests.Session()
        self.user_id = None
        
    def login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            response = self.session.post(f"{API_BASE_URL}/auth/login", json={
                "email": TEST_USER_EMAIL,
                "password": TEST_USER_PASSWORD
            })
            
            if response.status_code == 200:
                user_data = response.json()
                self.user_id = user_data.get('user', {}).get('id')
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, user_id: {self.user_id}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def save_push_token(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞"""
        try:
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞...")
            response = self.session.post(f"{API_BASE_URL}/api/notifications/save-push-token", json={
                "pushToken": TEST_PUSH_TOKEN
            })
            
            if response.status_code == 200:
                print("‚úÖ Push —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def send_test_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            print("üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
            response = self.session.post(f"{API_BASE_URL}/api/notifications/send-push", json={
                "title": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
                "body": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Geo Locator",
                "data": {
                    "type": "test",
                    "timestamp": datetime.now().isoformat(),
                    "test_id": "push_test_001"
                }
            })
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:")
                print(f"   –°—Ç–∞—Ç—É—Å: {result.get('success')}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def simulate_violation_detection(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            print("üö® –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            test_image_data = b"fake_image_data_for_testing"
            files = {
                'file': ('test_violation.jpg', test_image_data, 'image/jpeg')
            }
            
            data = {
                'latitude': '55.7558',
                'longitude': '37.6176'
            }
            
            response = self.session.post(
                f"{API_BASE_URL}/api/violations/detect",
                files=files,
                data=data
            )
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
                print(f"   –£—Å–ø–µ—Ö: {result.get('success')}")
                print(f"   –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('violations', []))}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
            return False
    
    def check_notification_stats(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            response = self.session.get(f"{API_BASE_URL}/api/notifications/stats")
            
            if response.status_code == 200:
                stats = response.json()
                print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
                print(f"   –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('total_sent', 0)}")
                print(f"   –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats.get('delivered', 0)}")
                print(f"   –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {stats.get('failed', 0)}")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('active_tokens', 0)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return False
    
    def test_notification_preferences(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            response = self.session.get(f"{API_BASE_URL}/api/notifications/preferences")
            if response.status_code == 200:
                prefs = response.json()
                print(f"   –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {prefs}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            new_prefs = {
                "email_notifications": True,
                "push_notifications": True,
                "violation_alerts": True,
                "system_updates": False
            }
            
            response = self.session.post(f"{API_BASE_URL}/api/notifications/preferences", json=new_prefs)
            if response.status_code == 200:
                print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("=" * 60)
        
        tests = [
            ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", self.login),
            ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞", self.save_push_token),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", self.test_notification_preferences),
            ("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", self.send_test_notification),
            ("–°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è", self.simulate_violation_detection),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", self.check_notification_stats)
        ]
        
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
            print("-" * 40)
            
            try:
                if test_func():
                    passed += 1
                    print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                else:
                    print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
            except Exception as e:
                print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
            
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        print("\n" + "=" * 60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Geo Locator")
    print("=" * 60)
    
    tester = PushNotificationTester()
    success = tester.run_full_test()
    
    if success:
        print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())
