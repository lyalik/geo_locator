#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –∫–ª—é—á–∞–º–∏
–í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ –∫–ª—é—á–∏ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""
import os
import sys
import requests
import json

# –†–ï–ê–õ–¨–ù–´–ï API –ö–õ–Æ–ß–ò
YANDEX_API_KEY = input("–í–≤–µ–¥–∏—Ç–µ Yandex API –∫–ª—é—á: ").strip()
DGIS_API_KEY = input("–í–≤–µ–¥–∏—Ç–µ 2GIS API –∫–ª—é—á: ").strip()

def test_yandex_geocoding_real(api_key, address="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞"):
    """–¢–µ—Å—Ç Yandex Geocoding —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï YANDEX GEOCODING (–†–ï–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß)")
    print("=" * 50)
    
    url = 'https://geocode-maps.yandex.ru/1.x/'
    params = {
        'apikey': api_key,
        'geocode': address,
        'format': 'json',
        'results': 1,
        'lang': 'ru_RU'
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
            
            if geo_objects:
                geo_object = geo_objects[0]['GeoObject']
                coordinates = geo_object['Point']['pos'].split()
                formatted_address = geo_object.get('metaDataProperty', {}).get('GeocoderMetaData', {}).get('text', '')
                
                print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å: {formatted_address}")
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates[1]}, {coordinates[0]}")
                return True
            else:
                print("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_dgis_search_real(api_key, query="–∫–∞—Ñ–µ", lat=55.7558, lon=37.6176):
    """–¢–µ—Å—Ç 2GIS Search —Å —Ä–µ–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï 2GIS SEARCH (–†–ï–ê–õ–¨–ù–´–ô –ö–õ–Æ–ß)")
    print("=" * 50)
    
    url = 'https://catalog.api.2gis.com/3.0/items'
    params = {
        'key': api_key,
        'q': query,
        'point': f"{lon},{lat}",
        'radius': 1000,
        'region_id': 1,  # –ú–æ—Å–∫–≤–∞
        'page_size': 3,
        'fields': 'items.point,items.adm_div,items.address,items.contact_groups,items.rubrics'
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            
            if 'error' in data.get('meta', {}):
                print(f"‚ùå API –û—à–∏–±–∫–∞: {data['meta']['error']}")
                return False
            
            items = data.get('result', {}).get('items', [])
            total = data.get('meta', {}).get('total', 0)
            
            print(f"‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ {len(items)} –∏–∑ {total} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            for i, item in enumerate(items[:3], 1):
                name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                address = item.get('address_name', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                point = item.get('point', {})
                lat_item = point.get('lat', 0)
                lon_item = point.get('lon', 0)
                
                print(f"{i}. {name}")
                print(f"   üìç {address}")
                print(f"   üó∫Ô∏è  {lat_item}, {lon_item}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_backend_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 50)
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['YANDEX_API_KEY'] = YANDEX_API_KEY
        os.environ['DGIS_API_KEY'] = DGIS_API_KEY
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
        sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')
        
        from services.yandex_maps_service import YandexMapsService
        from services.dgis_service import DGISService
        
        # –¢–µ—Å—Ç Yandex —Å–µ—Ä–≤–∏—Å–∞
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ YandexMapsService...")
        yandex_service = YandexMapsService()
        yandex_result = yandex_service.geocode("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞")
        
        if yandex_result.get('success'):
            coords = yandex_result.get('coordinates', {})
            print(f"‚úÖ Yandex: {coords.get('latitude')}, {coords.get('longitude')}")
        else:
            print(f"‚ùå Yandex: {yandex_result.get('error')}")
        
        # –¢–µ—Å—Ç 2GIS —Å–µ—Ä–≤–∏—Å–∞
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DGISService...")
        dgis_service = DGISService()
        dgis_result = dgis_service.search_places("–∫–∞—Ñ–µ", 55.7558, 37.6176, 1000)
        
        if dgis_result.get('success'):
            places_count = len(dgis_result.get('places', []))
            print(f"‚úÖ 2GIS: –ù–∞–π–¥–µ–Ω–æ {places_count} –º–µ—Å—Ç")
        else:
            print(f"‚ùå 2GIS: {dgis_result.get('error')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• API –ö–õ–Æ–ß–ï–ô")
    print("=" * 60)
    
    if YANDEX_API_KEY == "YOUR_YANDEX_KEY_HERE":
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ YANDEX_API_KEY –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á!")
        return
    
    if DGIS_API_KEY == "YOUR_DGIS_KEY_HERE":
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–º–µ–Ω–∏—Ç–µ DGIS_API_KEY –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á!")
        return
    
    results = {
        'yandex_geocoding': test_yandex_geocoding_real(YANDEX_API_KEY),
        'dgis_search': test_dgis_search_real(DGIS_API_KEY),
        'backend_integration': test_backend_integration()
    }
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    for test_name, success in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
    
    passed = sum(results.values())
    total = len(results)
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! API –∫–ª—é—á–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å Yandex –∏ 2GIS API.")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏.")

if __name__ == "__main__":
    main()
