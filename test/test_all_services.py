#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
"""
import sys
import os
sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')

from services.yandex_maps_service import YandexMapsService
from services.dgis_service import DGISService
from services.openstreetmap_service import OpenStreetMapService
from services.geo_aggregator_service import GeoAggregatorService
from services.coordinate_detector import CoordinateDetector
from services.archive_photo_service import ArchivePhotoService
from services.roscosmos_satellite_service import RoscosmosService
from services.yandex_satellite_service import YandexSatelliteService

def test_yandex_service():
    """–¢–µ—Å—Ç Yandex Maps —Å–µ—Ä–≤–∏—Å–∞"""
    print("üó∫Ô∏è YANDEX MAPS SERVICE")
    print("-" * 40)
    
    try:
        service = YandexMapsService()
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üîë API –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if service.api_key else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        
        # –¢–µ—Å—Ç geocode
        result = service.geocode("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞")
        print(f"   üèõÔ∏è Geocode —Ç–µ—Å—Ç: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        if result.get('success'):
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('coordinates')}")
        
        # –¢–µ—Å—Ç search_places
        places = service.search_places("–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 55.7558, 37.6176)
        print(f"   üîç Search places: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if places.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        print(f"      –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {len(places.get('places', []))}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()

def test_dgis_service():
    """–¢–µ—Å—Ç 2GIS —Å–µ—Ä–≤–∏—Å–∞"""
    print("üè¢ 2GIS SERVICE")
    print("-" * 40)
    
    try:
        service = DGISService()
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üîë API –∫–ª—é—á: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if service.api_key else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        
        # –¢–µ—Å—Ç search_places
        result = service.search_places("–∫–∞—Ñ–µ", 55.7558, 37.6176)
        print(f"   üîç Search places: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        if result.get('success'):
            print(f"      –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç: {len(result.get('places', []))}")
        
        # –¢–µ—Å—Ç geocode
        geocode_result = service.geocode("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞")
        print(f"   üèõÔ∏è Geocode —Ç–µ—Å—Ç: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if geocode_result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()

def test_osm_service():
    """–¢–µ—Å—Ç OpenStreetMap —Å–µ—Ä–≤–∏—Å–∞"""
    print("üåç OSM SERVICE")
    print("-" * 40)
    
    try:
        service = OpenStreetMapService()
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç geocode
        result = service.geocode("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞")
        print(f"   üèõÔ∏è Geocode —Ç–µ—Å—Ç: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        if result.get('success'):
            print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('coordinates')}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∑–¥–∞–Ω–∏–π
        buildings = service.get_buildings_in_area(55.7558, 37.6176, 1000)
        print(f"   üè† Buildings search: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if buildings.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        if buildings.get('success'):
            print(f"      –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings.get('buildings', []))}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()

def test_satellite_services():
    """–¢–µ—Å—Ç —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üõ∞Ô∏è SATELLITE SERVICES")
    print("-" * 40)
    
    # –†–æ—Å–∫–æ—Å–º–æ—Å
    try:
        roscosmos = RoscosmosService()
        print(f"   üá∑üá∫ –†–æ—Å–∫–æ—Å–º–æ—Å: ‚úÖ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        result = roscosmos.get_satellite_image(55.7558, 37.6176, zoom=15)
        print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ –ø–æ–ª—É—á–µ–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        
    except Exception as e:
        print(f"   üá∑üá∫ –†–æ—Å–∫–æ—Å–º–æ—Å: ‚ùå {e}")
    
    # –Ø–Ω–¥–µ–∫—Å –°–ø—É—Ç–Ω–∏–∫
    try:
        yandex_sat = YandexSatelliteService()
        print(f"   üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –°–ø—É—Ç–Ω–∏–∫: ‚úÖ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        result = yandex_sat.get_satellite_image(55.7558, 37.6176, zoom=15)
        print(f"      –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ –ø–æ–ª—É—á–µ–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
        
    except Exception as e:
        print(f"   üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –°–ø—É—Ç–Ω–∏–∫: ‚ùå {e}")
    
    print()

def test_archive_service():
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print("üèõÔ∏è ARCHIVE SERVICE")
    print("-" * 40)
    
    try:
        service = ArchivePhotoService()
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        archive_path = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos"
        if os.path.exists(archive_path):
            files = os.listdir(archive_path)
            print(f"   üìÅ –ê—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(files)}")
        else:
            print(f"   üìÅ –ê—Ä—Ö–∏–≤–Ω–∞—è –ø–∞–ø–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        test_image = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg"
        if os.path.exists(test_image):
            result = service.find_similar_buildings(test_image)
            print(f"   üîç –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö: {'‚úÖ –≤—ã–ø–æ–ª–Ω–µ–Ω' if result else '‚ùå –æ—à–∏–±–∫–∞'}")
            if result:
                print(f"      –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(result)}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()

def test_geo_aggregator():
    """–¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    print("üåê GEO AGGREGATOR SERVICE")
    print("-" * 40)
    
    try:
        service = GeoAggregatorService()
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        test_image = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg"
        if os.path.exists(test_image):
            print(f"   üì∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º...")
            
            # –¢–µ—Å—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            result = service.locate_image(test_image, location_hint="–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
            print(f"   üéØ –° –ø–æ–¥—Å–∫–∞–∑–∫–æ–π: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
            if result.get('success'):
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('final_location')}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0):.2f}")
                print(f"      –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(result.get('sources_used', []))}")
            
            # –¢–µ—Å—Ç –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
            result_no_hint = service.locate_image(test_image)
            print(f"   üé≤ –ë–µ–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if result_no_hint.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
            
        else:
            print(f"   üì∏ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()

def test_coordinate_detector():
    """–¢–µ—Å—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("üìç COORDINATE DETECTOR")
    print("-" * 40)
    
    try:
        service = CoordinateDetector()
        print(f"   ‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        test_image = "/home/denis/Documents/Hackathon_2025/geo_locator/backend/uploads/coordinates/1krasn_pl2-3797155958.jpg"
        if os.path.exists(test_image):
            print(f"   üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            
            result = service.detect_coordinates_from_image(
                image_path=test_image,
                location_hint="–ú–æ—Å–∫–≤–∞"
            )
            
            print(f"   üéØ –î–µ—Ç–µ–∫—Ü–∏—è: {'‚úÖ —É—Å–ø–µ—à–Ω–æ' if result.get('success') else '‚ùå –æ—à–∏–±–∫–∞'}")
            print(f"   üìä –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–Ω–µ—Ç')}")
            print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result.get('coordinates', '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã')}")
            print(f"   üéØ –û–±—ä–µ–∫—Ç–æ–≤: {len(result.get('detected_objects', []))}")
            print(f"   üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {'–µ—Å—Ç—å' if result.get('satellite_data') else '–Ω–µ—Ç'}")
            
        else:
            print(f"   üì∏ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print()

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ò–°–û–í")
    print("=" * 60)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    test_yandex_service()
    test_dgis_service() 
    test_osm_service()
    test_satellite_services()
    test_archive_service()
    test_geo_aggregator()
    test_coordinate_detector()
    
    print("=" * 60)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
