#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ Google API
"""
import os
import sys
import json
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/home/denis/Documents/Hackathon_2025/geo_locator/backend')

from services.archive_photo_service import ArchivePhotoService

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_archive_service_basic():
    """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ArchivePhotoService"""
    print("üèõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ArchivePhotoService...")
    
    try:
        service = ArchivePhotoService()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = service.get_archive_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞:")
        print(f"  - –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {stats.get('total_photos', 0)}")
        print(f"  - –ü–æ —Ç–∏–ø–∞–º: {stats.get('by_type', {})}")
        print(f"  - –ü–æ —Å—Ç–∏–ª—è–º: {stats.get('by_style', {})}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        metadata_count = len(service.metadata_cache)
        print(f"  - –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {metadata_count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        test_image = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/buildings/sample_building_001.jpg'
        
        if os.path.exists(test_image):
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π...")
            similar = service.find_similar_buildings(test_image, threshold=0.1)
            print(f"  - –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö –∑–¥–∞–Ω–∏–π: {len(similar)}")
            
            for i, building in enumerate(similar[:3]):
                metadata = building.get('metadata', {})
                similarity = building.get('similarity', 0)
                description = metadata.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                print(f"  - #{i+1}: {description} (—Å—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f})")
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_image}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        print(f"\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
        if os.path.exists(test_image):
            coords = service.get_coordinates_from_similar_buildings(test_image, threshold=0.1)
            if coords:
                print(f"  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {coords.get('latitude')}, {coords.get('longitude')}")
                print(f"  - –ò—Å—Ç–æ—á–Ω–∏–∫: {coords.get('matched_building', {}).get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            else:
                print(f"  - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ArchivePhotoService: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_metadata_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    
    metadata_path = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos/metadata'
    
    try:
        if not os.path.exists(metadata_path):
            print(f"‚ùå –ü–∞–ø–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {metadata_path}")
            return False
            
        metadata_files = [f for f in os.listdir(metadata_path) if f.endswith('.json')]
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {len(metadata_files)}")
        
        for file in metadata_files:
            file_path = os.path.join(metadata_path, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    description = data.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                    coords = data.get('coordinates', {})
                    lat = coords.get('latitude', 'N/A')
                    lon = coords.get('longitude', 'N/A')
                    print(f"  - {file}: {description} ({lat}, {lon})")
            except Exception as e:
                print(f"  - ‚ùå –û—à–∏–±–∫–∞ –≤ {file}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_image_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    base_path = '/home/denis/Documents/Hackathon_2025/geo_locator/backend/data/archive_photos'
    
    folders = ['buildings', 'landmarks', 'streets']
    total_images = 0
    
    for folder in folders:
        folder_path = os.path.join(base_path, folder)
        if os.path.exists(folder_path):
            images = [f for f in os.listdir(folder_path) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
            print(f"  - {folder}: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            total_images += len(images)
            
            for img in images[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                img_path = os.path.join(folder_path, img)
                size = os.path.getsize(img_path)
                print(f"    * {img} ({size} –±–∞–π—Ç)")
        else:
            print(f"  - {folder}: –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    print(f"üìä –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
    return total_images > 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ë–ê–ó–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–†–•–ò–í–ù–û–ì–û –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 50)
    
    tests = [
        ("–§–∞–π–ª—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", test_metadata_files),
        ("–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", test_image_files),
        ("ArchivePhotoService", test_archive_service_basic)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print()
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if success else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if success:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ê—Ä—Ö–∏–≤–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("  - –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª '–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç' –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
        print("  - –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª '–ê–Ω–∞–ª–∏–∑ –ò–ò' –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()
