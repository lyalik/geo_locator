#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ API –∫–ª—é—á–µ–π –Ø–Ω–¥–µ–∫—Å –∏ 2GIS
"""
import os
import sys
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_yandex_api():
    """–¢–µ—Å—Ç –Ø–Ω–¥–µ–∫—Å API –Ω–∞–ø—Ä—è–º—É—é"""
    print("üü° –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å Geocoder API...")
    
    api_key = os.getenv('YANDEX_API_KEY')
    if not api_key:
        print("‚ùå YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üîë –ö–ª—é—á: {api_key[:20]}...")
    
    # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    url = "https://geocode-maps.yandex.ru/1.x/"
    params = {
        'apikey': api_key,
        'geocode': '–ú–æ—Å–∫–≤–∞',
        'format': 'json',
        'results': 1,
        'lang': 'ru_RU'
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        print(f"üì° HTTP Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
            
            if geo_objects:
                geo_object = geo_objects[0]['GeoObject']
                coordinates = geo_object['Point']['pos'].split()
                lat, lon = float(coordinates[1]), float(coordinates[0])
                address = geo_object.get('metaDataProperty', {}).get('GeocoderMetaData', {}).get('text', '')
                
                print(f"‚úÖ –ê–¥—Ä–µ—Å: {address}")
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ú–æ—Å–∫–≤—ã
                if 55.0 < lat < 56.0 and 37.0 < lon < 38.0:
                    print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")
                else:
                    print(f"‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–ª—è –ú–æ—Å–∫–≤—ã: {lat}, {lon}")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_2gis_api():
    """–¢–µ—Å—Ç 2GIS API –Ω–∞–ø—Ä—è–º—É—é"""
    print("\nüîµ –¢–µ—Å—Ç–∏—Ä—É–µ–º 2GIS API...")
    
    api_key = os.getenv('DGIS_API_KEY')
    if not api_key:
        print("‚ùå DGIS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"üîë –ö–ª—é—á: {api_key[:20]}...")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
    url = "https://catalog.api.2gis.com/3.0/items"
    params = {
        'key': api_key,
        'q': '–ú–æ—Å–∫–≤–∞',
        'region_id': 1,
        'type': 'adm_div.place',
        'fields': 'items.point,items.adm_div,items.address',
        'page_size': 1
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        print(f"üì° HTTP Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
            items = data.get('result', {}).get('items', [])
            if items:
                item = items[0]
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                if 'point' in item:
                    point = item['point']
                    lat, lon = point.get('lat'), point.get('lon')
                    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
                else:
                    print("‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_backend_services():
    """–¢–µ—Å—Ç backend —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º backend —Å–µ—Ä–≤–∏—Å—ã...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))
    
    try:
        from services.yandex_maps_service import YandexMapsService
        from services.dgis_service import DGISService
        
        # –¢–µ—Å—Ç Yandex
        print("üü° –¢–µ—Å—Ç YandexMapsService...")
        yandex = YandexMapsService()
        result = yandex.geocode('–ú–æ—Å–∫–≤–∞')
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
        # –¢–µ—Å—Ç 2GIS
        print("\nüîµ –¢–µ—Å—Ç DGISService...")
        dgis = DGISService()
        result = dgis.geocode('–ú–æ—Å–∫–≤–∞')
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")

if __name__ == "__main__":
    print("üß™ –û—Ç–ª–∞–¥–∫–∞ API –∫–ª—é—á–µ–π\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print(f"YANDEX_API_KEY: {'‚úÖ' if os.getenv('YANDEX_API_KEY') else '‚ùå'}")
    print(f"DGIS_API_KEY: {'‚úÖ' if os.getenv('DGIS_API_KEY') else '‚ùå'}")
    print()
    
    test_yandex_api()
    test_2gis_api()
    test_backend_services()
    
    print("\n‚ú® –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
