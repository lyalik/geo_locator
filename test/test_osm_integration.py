#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OpenStreetMap API –≤ Geo Locator
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã OSM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import requests
import json
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def test_osm_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö OSM API endpoints"""
    base_url = "http://localhost:5000"
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OSM API endpoints...")
    
    # –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ú–æ—Å–∫–≤—ã
    moscow_lat, moscow_lon = 55.7558, 37.6176
    
    tests = [
        {
            "name": "OSM Health Check",
            "url": f"{base_url}/api/osm/health",
            "method": "GET"
        },
        {
            "name": "OSM Geocoding",
            "url": f"{base_url}/api/osm/geocode",
            "method": "GET",
            "params": {"address": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞"}
        },
        {
            "name": "OSM Reverse Geocoding", 
            "url": f"{base_url}/api/osm/reverse-geocode",
            "method": "GET",
            "params": {"lat": moscow_lat, "lon": moscow_lon}
        },
        {
            "name": "OSM Buildings",
            "url": f"{base_url}/api/osm/buildings",
            "method": "GET", 
            "params": {"lat": moscow_lat, "lon": moscow_lon, "radius": 500}
        },
        {
            "name": "OSM Search Places",
            "url": f"{base_url}/api/osm/search",
            "method": "GET",
            "params": {"query": "–∫–∞—Ñ–µ", "lat": moscow_lat, "lon": moscow_lon}
        },
        {
            "name": "OSM Urban Context",
            "url": f"{base_url}/api/osm/urban-context", 
            "method": "GET",
            "params": {"lat": moscow_lat, "lon": moscow_lon, "radius": 1000}
        }
    ]
    
    results = []
    
    for test in tests:
        try:
            print(f"  ‚è≥ {test['name']}...")
            
            if test['method'] == 'GET':
                response = requests.get(
                    test['url'], 
                    params=test.get('params', {}),
                    timeout=10
                )
            
            if response.status_code == 200:
                data = response.json()
                success = data.get('success', False)
                
                result = {
                    "test": test['name'],
                    "status": "‚úÖ PASS" if success else "‚ö†Ô∏è PARTIAL",
                    "response_time": response.elapsed.total_seconds(),
                    "data_count": len(data.get('buildings', data.get('results', data.get('places', []))))
                }
                
                if success:
                    print(f"    ‚úÖ {test['name']} - OK ({result['response_time']:.2f}s)")
                    if result['data_count'] > 0:
                        print(f"       üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['data_count']}")
                else:
                    print(f"    ‚ö†Ô∏è {test['name']} - –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö")
                    
            else:
                result = {
                    "test": test['name'],
                    "status": f"‚ùå FAIL ({response.status_code})",
                    "response_time": response.elapsed.total_seconds(),
                    "error": response.text[:200]
                }
                print(f"    ‚ùå {test['name']} - –û—à–∏–±–∫–∞ {response.status_code}")
                
            results.append(result)
            
        except Exception as e:
            result = {
                "test": test['name'],
                "status": "‚ùå ERROR",
                "error": str(e)
            }
            results.append(result)
            print(f"    ‚ùå {test['name']} - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return results

def test_geo_aggregator_osm():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OSM –≤ geo aggregator"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Geo Aggregator —Å OSM...")
    
    try:
        from services.geo_aggregator_service import GeoAggregatorService
        
        aggregator = GeoAggregatorService()
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ —Å OSM
        print("  ‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞...")
        results = aggregator._search_external_apis("–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
        
        osm_found = 'osm' in results and results['osm'].get('success')
        
        if osm_found:
            print("    ‚úÖ OSM –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"       üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {results['osm']['coordinates']}")
            return True
        else:
            print("    ‚ö†Ô∏è OSM –ø–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return False
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ geo aggregator: {e}")
        return False

def test_frontend_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    base_url = "http://localhost:3000"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å frontend
        response = requests.get(base_url, timeout=5)
        if response.status_code == 200:
            print("    ‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –≤—ã–∑–æ–≤—ã –∏–∑ frontend
            api_tests = [
                f"http://localhost:5000/api/osm/buildings?lat=55.7558&lon=37.6176&radius=200",
                f"http://localhost:5000/api/osm/urban-context?lat=55.7558&lon=37.6176&radius=1000"
            ]
            
            for api_url in api_tests:
                try:
                    api_response = requests.get(api_url, timeout=10)
                    if api_response.status_code == 200:
                        data = api_response.json()
                        if data.get('success'):
                            print(f"    ‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {api_url.split('/')[-1].split('?')[0]}")
                        else:
                            print(f"    ‚ö†Ô∏è API endpoint —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç: {api_url.split('/')[-1].split('?')[0]}")
                    else:
                        print(f"    ‚ùå API endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {api_url.split('/')[-1].split('?')[0]}")
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ API: {e}")
            
            return True
        else:
            print(f"    ‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            return False
            
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ frontend: {e}")
        return False

def generate_test_report(osm_results, geo_test, frontend_test):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\n" + "="*60)
    print("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò OSM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("="*60)
    
    # OSM API —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüîß OSM API Endpoints:")
    passed = sum(1 for r in osm_results if "PASS" in r['status'])
    total = len(osm_results)
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    
    for result in osm_results:
        print(f"   {result['status']} {result['test']}")
        if 'response_time' in result:
            print(f"      ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {result['response_time']:.2f}s")
        if 'data_count' in result and result['data_count'] > 0:
            print(f"      üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω–æ: {result['data_count']}")
    
    # Geo Aggregator
    print(f"\nüîÑ Geo Aggregator: {'‚úÖ PASS' if geo_test else '‚ùå FAIL'}")
    
    # Frontend
    print(f"üåê Frontend Integration: {'‚úÖ PASS' if frontend_test else '‚ùå FAIL'}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    overall_success = (passed >= total * 0.7) and geo_test and frontend_test
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'‚úÖ SUCCESS' if overall_success else '‚ùå NEEDS ATTENTION'}")
    
    if overall_success:
        print("\nüéâ OSM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("   –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ OSM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ backend –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")
    
    print("\n" + "="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø OSM –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend
    try:
        response = requests.get("http://localhost:5000/health", timeout=5)
        if response.status_code != 200:
            print("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./start_local.sh")
            return
    except:
        print("‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./start_local.sh")
        return
    
    print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    osm_results = test_osm_api_endpoints()
    geo_test = test_geo_aggregator_osm()
    frontend_test = test_frontend_integration()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_test_report(osm_results, geo_test, frontend_test)

if __name__ == "__main__":
    main()
