#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–¥–µ–ª–æ–º "–ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import os
import sys
import logging
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_yandex_maps_service():
    """–¢–µ—Å—Ç Yandex Maps Service"""
    try:
        from services.yandex_maps_service import YandexMapsService
        
        service = YandexMapsService()
        logger.info("üó∫Ô∏è Testing Yandex Maps Service...")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        result = service.search_places("–∫–∞—Ñ–µ", 55.7558, 37.6176)
        logger.info(f"‚úÖ Yandex search result: {result.get('success', False)}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
        result2 = service.search_places("detected objects")
        logger.info(f"‚úÖ Yandex fallback result: {result2.get('success', False)}")
        
        # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        geocode_result = service.geocode("–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
        logger.info(f"‚úÖ Yandex geocode result: {geocode_result.get('success', False)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Yandex Maps Service test failed: {e}")
        return False

def test_coordinate_detector():
    """–¢–µ—Å—Ç CoordinateDetector"""
    try:
        from services.coordinate_detector import CoordinateDetector
        
        detector = CoordinateDetector()
        logger.info("üéØ Testing Coordinate Detector...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image_path = "backend/data/archive_photos/test_image.jpg"
        if not os.path.exists(test_image_path):
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from PIL import Image
            import numpy as np
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100x100 –ø–∏–∫—Å–µ–ª–µ–π
            img_array = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
            img = Image.fromarray(img_array)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(test_image_path), exist_ok=True)
            img.save(test_image_path)
            logger.info(f"üì∏ Created test image: {test_image_path}")
        
        # –¢–µ—Å—Ç –±–µ–∑ location_hint (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
        result = detector.detect_coordinates_from_image(test_image_path)
        logger.info(f"‚úÖ Coordinate detection without hint: {result.get('success', False)}")
        
        # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º location_hint
        result2 = detector.detect_coordinates_from_image(test_image_path, "–ú–æ—Å–∫–≤–∞")
        logger.info(f"‚úÖ Coordinate detection with hint: {result2.get('success', False)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Coordinate Detector test failed: {e}")
        return False

def test_geo_aggregator():
    """–¢–µ—Å—Ç GeoAggregatorService"""
    try:
        from services.geo_aggregator_service import GeoAggregatorService
        
        aggregator = GeoAggregatorService()
        logger.info("üåç Testing Geo Aggregator Service...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        test_image_path = "backend/data/archive_photos/test_image.jpg"
        if not os.path.exists(test_image_path):
            from PIL import Image
            import numpy as np
            
            img_array = np.random.randint(0, 255, (100, 100, 3), dtype=np.uint8)
            img = Image.fromarray(img_array)
            os.makedirs(os.path.dirname(test_image_path), exist_ok=True)
            img.save(test_image_path)
        
        # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º location_hint
        result = aggregator.locate_image(test_image_path, "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å")
        logger.info(f"‚úÖ Geo aggregator with valid hint: {result.get('success', False)}")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º location_hint (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback)
        result2 = aggregator.locate_image(test_image_path, "detected objects")
        logger.info(f"‚úÖ Geo aggregator with invalid hint: {result2.get('success', False)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Geo Aggregator Service test failed: {e}")
        return False

def test_api_keys():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π"""
    logger.info("üîë Testing API Keys...")
    
    yandex_key = os.getenv('YANDEX_API_KEY')
    dgis_key = os.getenv('DGIS_API_KEY')
    
    if yandex_key and yandex_key != 'your_yandex_api_key_here':
        logger.info("‚úÖ YANDEX_API_KEY is configured")
    else:
        logger.warning("‚ö†Ô∏è YANDEX_API_KEY is not properly configured")
    
    if dgis_key and dgis_key != 'your_2gis_api_key_here':
        logger.info("‚úÖ DGIS_API_KEY is configured")
    else:
        logger.warning("‚ö†Ô∏è DGIS_API_KEY is not properly configured")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ Starting Coordinate Analysis Fix Test...")
    
    tests = [
        ("API Keys", test_api_keys),
        ("Yandex Maps Service", test_yandex_maps_service),
        ("Geo Aggregator Service", test_geo_aggregator),
        ("Coordinate Detector", test_coordinate_detector),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"Running test: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            results[test_name] = test_func()
        except Exception as e:
            logger.error(f"‚ùå Test {test_name} failed with exception: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info(f"\n{'='*50}")
    logger.info("üìä TEST RESULTS SUMMARY")
    logger.info(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
        if result:
            passed += 1
    
    logger.info(f"\nOverall: {passed}/{total} tests passed")
    
    if passed == total:
        logger.info("üéâ All tests passed! Coordinate Analysis section should work correctly now.")
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} tests failed. Please check the issues above.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
