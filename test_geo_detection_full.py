#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Mistral AI OCR, –ø–∞–Ω–æ—Ä–∞–º—ã, —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏
"""

import os
import sys
import requests
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

def test_coordinate_detection_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...")
    
    # –ù–∞–π–¥–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image_path = None
    upload_dirs = [
        "backend/uploads/coordinates",
        "backend/data/archive_photos", 
        "."
    ]
    
    for upload_dir in upload_dirs:
        if os.path.exists(upload_dir):
            for file in os.listdir(upload_dir):
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    test_image_path = os.path.join(upload_dir, file)
                    break
        if test_image_path:
            break
    
    if not test_image_path:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    url = "http://localhost:5001/api/coordinates/detect"
    
    try:
        with open(test_image_path, 'rb') as f:
            files = {'file': f}  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'image' –Ω–∞ 'file'
            data = {
                'location_hint': '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'
            }
            
            response = requests.post(url, files=files, data=data, timeout=30)
            
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.get('success'):
                data = result.get('data', {})
                coordinates = data.get('coordinates', {})
                objects = data.get('objects', [])
                
                print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {bool(coordinates)}")
                if coordinates:
                    print(f"   –®–∏—Ä–æ—Ç–∞: {coordinates.get('latitude')}")
                    print(f"   –î–æ–ª–≥–æ—Ç–∞: {coordinates.get('longitude')}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {coordinates.get('confidence', 0):.2f}")
                
                print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")
                for obj in objects[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä–µ–∫—Ç–∞
                    print(f"   - {obj.get('category', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {obj.get('confidence', 0):.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if 'sources' in data:
                    sources = data['sources']
                    print(f"üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {len(sources)}")
                    for source_name, source_data in sources.items():
                        if source_data:
                            print(f"   ‚úÖ {source_name}: {source_data.get('confidence', 0):.2f}")
                
                return True
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:500]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_mistral_ocr_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Mistral AI OCR API"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mistral AI OCR...")
    
    # –ù–∞–π–¥–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    test_image_path = None
    upload_dirs = [
        "backend/uploads/coordinates",
        "backend/data/archive_photos",
        "."
    ]
    
    for upload_dir in upload_dirs:
        if os.path.exists(upload_dir):
            for file in os.listdir(upload_dir):
                if file.lower().endswith(('.jpg', '.jpeg', '.png')):
                    test_image_path = os.path.join(upload_dir, file)
                    break
        if test_image_path:
            break
    
    if not test_image_path:
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    
    url = "http://localhost:5001/api/geo/mistral/address"
    
    try:
        with open(test_image_path, 'rb') as f:
            files = {'file': f}
            
            response = requests.post(url, files=files, timeout=20)
            
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Mistral AI OCR")
            
            if result.get('success'):
                ocr_text = result.get('ocr_text', '')
                analysis = result.get('analysis', {})
                
                print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                if ocr_text:
                    print(f"   –ü—Ä–µ–≤—å—é: {ocr_text[:100]}...")
                
                if analysis:
                    addresses = analysis.get('addresses', [])
                    buildings = analysis.get('buildings', [])
                    
                    print(f"üè† –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(addresses)}")
                    print(f"üè¢ –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")
                
                return True
            else:
                print(f"‚ùå Mistral AI –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_panorama_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–Ω–æ—Ä–∞–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    url = "http://localhost:5001/api/coordinates/statistics"
    
    try:
        response = requests.get(url, timeout=15)
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            if result.get('success'):
                stats = result.get('data', {})
                system_info = stats.get('system_info', {})
                capabilities = stats.get('capabilities', {})
                
                print(f"üîß –°–∏—Å—Ç–µ–º–∞: {system_info.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {len(capabilities)} –º–æ–¥—É–ª–µ–π")
                
                for capability, enabled in capabilities.items():
                    status = "‚úÖ" if enabled else "‚ùå"
                    print(f"   {status} {capability}")
                
                return True
            else:
                print(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {result.get('error')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–ï–û–õ–û–ö–ê–¶–ò–ò")
    print("=" * 50)
    
    results = []
    
    # –¢–µ—Å—Ç 1: –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    results.append(test_coordinate_detection_api())
    
    # –¢–µ—Å—Ç 2: Mistral AI OCR
    results.append(test_mistral_ocr_api())
    
    # –¢–µ—Å—Ç 3: –ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    results.append(test_panorama_api())
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    test_names = [
        "–î–µ—Ç–µ–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
        "Mistral AI OCR", 
        "–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    ]
    
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{i+1}. {name}: {status}")
    
    passed = sum(results)
    total = len(results)
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    main()
